#!/bin/bash
#
# linux-labs - A script used to download, setup and grade the CIT-220 lab
# enviornment in my CIT-220 Linux System Administration classes.
# Copyright (c) 2022-2023 Matthew R. Kisow, D.Sc. <matthew.kisow@kisow.org>
#
# License (GPL v3.0)
# ------------------
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# TODO:
# LAB01-01 - Student Install
# LAB07-01 - GRADING
# LAB13-01 - (ssh) pg. 364-365
# LAB17-01 - (lsmod)
# LAB23-01 - Network Troubleshooting
# LAB29-01 - Chroot on Apache Server

# ##############################################################################
# Virtual Machine Setup
#
# SCSI1: 160Gb    sda             8:0    0   160G  0 disk 
#                 ├─sda1          8:1    0     1M  0 part  (BIOS OFFSET)
#                 ├─sda2          8:2    0    30G  0 part  /
#                 ├─sda3          8:3    0    15G  0 part  /tmp
#                 ├─sda4          8:4    0   1.5G  0 part  /boot
#                 ├─sda5          8:5    0   512M  0 part  /boot/efi
#                 ├─sda6          8:6    0    30G  0 part  /home
#                 ├─sda7          8:7    0    15G  0 part  /usr
#                 ├─sda8          8:8    0    30G  0 part  /var
#                 └─sda9          8:9    0     4G  0 part  [SWAP]
#
#                 sdb             8:16   0   128M  0 disk 
#                 └─sdb1          8:17   0   127M  0 part  /labs/CH12/LAB12-02-Q
#                 sdc             8:32   0   128M  0 disk 
#                 └─sdc1          8:33   0   127M  0 disk  /labs/CH18/LAB18-01
#                 sdd             8:48   0   128M  0 disk 
#                 └─vg1-CIT220  253:0    0   248M  0 lvm   /labs/CH19/LAB19-01
#                 sde             8:64   0   128M  0 disk 
#                 └─vg1-CIT220  253:1    0   248M  0 lvm   /labs/CH19/LAB19-01
#                 sdf             8:80   0   128M  0 disk
#                 └─md0           9:0    0   252M  0 raid5 /labs/CH19/LAB19-02
#                 sdg             8:96   0   128M  0 disk
#                 └─md0           9:0    0   252M  0 raid5 /labs/CH19/LAB19-02
#                 sdh             8:112  0   128M  0 disk
#                 └─md0           9:0    0   252M  0 raid5 /labs/CH19/LAB19-02
# ##############################################################################

# Scroll to the bottom of this script to follow the main script flow.

## Set how the script will behave when certain conditions are encountered.
# Enable exiting immediately if a command exits with a non-zero status.
set -e

# Enable erroring on un-bound (undefined) variables.
set -u

# Enable filename patterns that match no files to expand to a null string, rather than themselves.
shopt -s nullglob

# ************************* global variable definitions ************************
g_PROGNAME="$(basename "${0}")"
g_VERSION="0.0.18"
g_PROGRAM_NAME="linux-labs"
g_PROGRAM_DESCRIPTION="A script used to download, setup and grade the CIT-220 lab enviornment"
g_SCRIPT_URL="https://github.com/DoctorKisow/CIT-220/raw/main/linux-labs"
g_COPYRIGHT_TEXT="Copyright (c) 2022-2023"
g_AUTHOR_TEXT="Dr. Matthew Kisow"

# Script location where it was run from.
g_SCRIPT_LOCATION="${BASH_SOURCE[@]}"

# (g_<color>_TEXT) - Variables used to control how output is displayed to the screen during script execution.
g_RED_TEXT="" g_GREEN_TEXT="" g_YELLOW_TEXT="" g_BLUE_TEXT="" g_MAGENTA_TEXT="" g_CYAN_TEXT="" g_WHITE_TEXT="" g_RESET_ATTS=""  g_ALERT_TEXT=""
if [[ -v TERM && -n "${TERM}" && "${TERM}" != "dumb" ]]; then
	g_RD_TEXT="$(tput setaf 1)$(tput bold)"
	g_GREEN_TEXT="$(tput setaf 2)$(tput bold)"
	g_YELLOW_TEXT="$(tput setaf 3)$(tput bold)"
	g_BLUE_TEXT="$(tput setaf 4)$(tput bold)"
	g_MAGENTA_TEXT="$(tput setaf 5)$(tput bold)"
	g_CYAN_TEXT="$(tput setaf 6)$(tput bold)"
	g_WHITE_TEXT="$(tput setaf 7)$(tput bold)"
	g_RESET_ATTS="$(tput sgr0)"
	g_ALERT_TEXT="$(tput bel)"
fi

# (g_LAB_PATH) - Strings that hold the location to the lab files.
g_LAB_PATH="/Lab Files"
g_LAB_SYMLINK="/labs"
g_DIR_PREFIX="CH"
g_LAB_PREFIX="LAB"

# (g_PREFIXSTRING) - String value used to indicate what is appended to the output at the beginning of screen output during script execution.
g_PREFIXSTRING="*  "

# (g_SHOWPREFIX) - String value used to indicate normal script execution.
g_SHOWPREFIX="${g_GREEN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}"

# (g_SCRIPT_PATH) - String value used to hold the execution path of the script.
g_SCRIPT_PATH="`dirname \"$0\"`"
g_SCRIPT_PATH="`( cd \"$g_SCRIPT_PATH\" && pwd )`"

# (g_ARG_<variable>) - Boolean values used to indicate which command line options are set during execution; the default for all values is 0.
# WARNING: DO NOT MODIFY THESE VALUE(S)!
declare -i g_ARG_CHANGE_LAB=0
declare -i g_ARG_GRADE_LAB=0
declare -i g_ARG_INSTALL=0
declare -i g_ARG_FINISH_INSTALL=0
declare -i g_ARG_ROLLBACK_LAB=0
declare -i g_ARG_UPDATE=0

declare -i g_ARG_CHANGE=0
declare -i g_ARG_GRADE=0
declare -i g_ARG_ROLLBACK=0

declare g_FIRST_TOKEN=""
declare g_INSTALL_DATE=""

# **************************** basic script functions **************************
# (script_banner) - Function used to display the program banner when it is executed interactively from the CLI.
function script_banner ()
{
	printf "${g_WHITE_TEXT}${g_PROGRAM_NAME}, v${g_VERSION}${g_RESET_ATTS}\n"
	printf "${g_CYAN_TEXT}${g_COPYRIGHT_TEXT}, ${g_AUTHOR_TEXT}\n${g_RESET_ATTS}"
	printf -- "--------------------------------------------------------------------------------\n"
}

# (info) - Function for formatted informational messages.
function info ()
{
	echo -e "${g_CYAN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}INFO: ${1}" >&2
}

# (warning) - Function for formatted warning messages.
function warning ()
{
	echo -e "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}WARNING: ${1}" >&2
}

# (error) - Function for the error catching routine, display an error cleanup and exit the script.
function error ()
{
	echo
	echo -e "${g_RED_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}ERROR: ${1} - exiting" >&2
	cleanup_and_exit_with_code 1
}

# (cleanup_and_exit_with_code) - Function used to properly cleanup the enviornment after an error; the passed value are 1 (error) or 0 (normal).
function cleanup_and_exit_with_code ()
{
	# (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
	l_BOOL='^[0-1]+$'
	if ! [[ $1 =~ $l_BOOL ]]; then
		error "Function: cleanup_and_exit_with_code was passed a value that is out of bounds."
	fi

	# If output was redirected to the logfile during an interactive session, repoint it to the console.
	exec &>$(tty)

	# Error trapping is turned off because we want to handle errors.
	set +e
	trap - EXIT

	exit $1
}

# (trap_cleanup) - Function used to set how we want the script to handle any error conditions it encounters and what we want to do once those error conditions are encountered.
function trap_cleanup ()
{
	trap - SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT
	error "Caught signal"
}
trap trap_cleanup SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT

# (print_usage) - Function used to display the scripts usage and command line options.
function print_usage ()
{
	clear
	script_banner

	cat << EOF

  Usage: ${g_PROGNAME} [-c <1-29>] [-g <1-29>] [-h] [-i|--install] [-r <1-29>]
                    [-u|--update] [-v]
  Options:
	-c                     roll the enviornment forward to a lab [1-29]
	-g                     grade a completed lab [1-29]
	-h                     show this help message
	-i --install           install the lab enviornment
	-r                     roll back a specific lab [1-29]
	-u --update            update the ${g_PROGNAME} script
	-v                     display the version number of ${g_PROGNAME} and exit
EOF
}

# (help) - Function used to display the scripts usage and command line options.
function help ()
{
	printf "${g_PROGNAME} - ${g_PROGRAM_DESCRIPTION}\n"
	print_usage
}

# (print_version) - Function used to print the script version.
function print_version ()
{
	clear
	script_banner

	printf "%s\n" "${g_VERSION}"
}

# (display_usage_message_and_bail_out) - Function used to display the usage when an invalid command line option is passed to the script.
function display_usage_message_and_bail_out ()
{
	if [ ! -z "${1+x}" ]; then
		printf "%s: %s\n" "${g_PROGNAME}" "${1}" >&2
	fi

	print_usage >&2
	cleanup_and_exit_with_code 1
}

# (process_command_line_options) - Function used to set and validate command line options passed to the script.
function process_command_line_options ()
{
	# (l_TEMP) - Local array used to hold the list of command line arguements passed from the cammandline during script execution.
	local l_TEMP

	# (l_RC) - Local boolean value used to test if any commandline arguements passed from the cammandline during script execution are invalid.
	declare -i l_RC

	# Error trapping is turned off because we want to handle errors.
	set +e
		l_TEMP="$(getopt -o c:g:hir:uvz --long install,update -n "${g_PROGNAME}" -- "${@}")"
		l_RC="${?}"
	set -e

	# Check if any invalid options were passed and display help.
	if ((l_RC!=0)); then
		display_usage_message_and_bail_out
	fi

	# No arguements were passed to the script, display help.
	if [ $# -eq 0 ]; then
		display_usage_message_and_bail_out
	fi

	eval set -- "${l_TEMP}"

	for arg in "${@}"; do
		shift
		case "$arg" in
			--install) set -- "$@" '-i' ;;
			--update)  set -- "$@" '-u' ;;
			*)         set -- "$@" "$arg" ;;
		esac
	done

	# Set the first token for the error message when multiple tol=kens are passed.
	g_FIRST_TOKEN=${1}

	# Extract the options and their arguments into variables.
	while true ; do
		case "${1}" in
			-c) g_ARG_CHANGE_LAB=1; g_ARG_CHANGE=${2}; (( g_ARG_CHANGE >= 1 && g_ARG_CHANGE <= 29 )) || display_usage_message_and_bail_out; shift 2 ;;
			-g) g_ARG_GRADE_LAB=1; g_ARG_GRADE=${2}; (( g_ARG_GRADE >= 1 && g_ARG_GRADE <= 29 )) || display_usage_message_and_bail_out; shift 2 ;;
			-h) display_usage_message_and_bail_out ;;
			-i) g_ARG_INSTALL=1; shift ;;
			-r) g_ARG_ROLLBACK_LAB=1; g_ARG_ROLLBACK=${2}; (( g_ARG_ROLLBACK >= 1 && g_ARG_ROLLBACK <= 29 )) || display_usage_message_and_bail_out; shift 2 ;;
			-u) g_ARG_UPDATE=1; shift ;;
			-v) print_version >&2; cleanup_and_exit_with_code 1 ;;
			-z) g_ARG_FINISH_INSTALL=1; shift ;;
			--) shift; break ;;
		esac
	done
}

# (internal_consistency_option_checks) - Function used to validate the some of the more obvious configuration file snafus.
function internal_consistency_option_checks ()
{
	while true ; do
		case "$g_FIRST_TOKEN" in
			-c)
				if ((g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB  ||  g_ARG_INSTALL  ||  g_ARG_UPDATE)); then
					warning "You cannot change the enviornment with any other options set."
					cleanup_and_exit_with_code 1
				fi
				break
				;;
			-g)
				if ((g_ARG_INSTALL || g_ARG_UPDATE || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB)); then
					warning "You cannot grade a lab with any other options set."
					cleanup_and_exit_with_code 1
				fi
				break
				;;
			-i)
				if ((g_ARG_UPDATE || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB)); then
					warning "You cannot setup the labs enviornment with any other options set."
					cleanup_and_exit_with_code 1
				fi
				break
				;;
			-r)
				if ((g_ARG_GRADE_LAB ||g_ARG_INSTALL || g_ARG_UPDATE || g_ARG_CHANGE_LAB)); then
					warning "You cannot rollback a lab with any other options set."
					cleanup_and_exit_with_code 1
				fi
				break
				;;
			-u)
				if ((g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB  ||  g_ARG_INSTALL)); then
					warning "You cannot update this script with any other options set."
					cleanup_and_exit_with_code 1
				fi
				break
				;;
		esac
	done
}

# (update) - Function used to check for and update this script from the repository.
function update ()
{
	local l_TMP_FILE
	local l_ABS_PATH
	local l_VERSION

	info "Checking for updates to the $g_PROGRAM_NAME script."

	cd "${g_SCRIPT_PATH}"

	# Get a new version of the script.
	l_TMP_FILE=$(mktemp -p "" "XXXXX.sh")
	curl -s -L "$g_SCRIPT_URL" > "$l_TMP_FILE"

	l_VERSION=$(grep "^g_VERSION" "$l_TMP_FILE" | awk -F'[="]' '{print $3}')

	# Compare the script versions and update if newer.
	if [ "$g_VERSION" \< "$l_VERSION" ]; then
		info "Updating the $g_PROGRAM_NAME script."

		# Create updater script.
		l_ABS_PATH=$(readlink -f "$g_SCRIPT_LOCATION")

		printf '#!/bin/bash\n\n' >> updater.sh
		printf "cp \"$l_TMP_FILE\" \"$l_ABS_PATH\"\n" >> updater.sh

		chmod +x updater.sh
		chmod 770 "$l_TMP_FILE"
		chown root:labusers1 "$l_TMP_FILE"
		exec /bin/bash "$g_SCRIPT_PATH/updater.sh"
	else
		rm -f "$l_TMP_FILE"
	fi

	cleanup_and_exit_with_code 0
}

# (update_notice) - Function used to notify the user of a new script available in the repository.
function update_notice ()
{
	local l_TMP_FILE
	local l_ABS_PATH
	local l_VERSION

	cd "${g_SCRIPT_PATH}"

	# Get a new version of the script.
	l_TMP_FILE=$(mktemp -p "" "XXXXX.sh")
	curl -s -L "$g_SCRIPT_URL" > "$l_TMP_FILE"

	l_VERSION=$(grep "^g_VERSION" "$l_TMP_FILE" | awk -F'[="]' '{print $3}')

	# Compare the script versions and notify if newer.
	if ! ((g_ARG_FINISH_INSTALL==1)); then
		if [ "$g_VERSION" \< "$l_VERSION" ]; then
			info "There is a new version v$l_VERSION of the $g_PROGRAM_NAME script available.\n         To upgrade please type \"$g_PROGRAM_NAME -u\" at the command prompt.\n\n"
		else
			info "You are running the current version of this script.\n\n"

			if [[ -f "${g_SCRIPT_PATH}/updater.sh" ]]; then
					rm "${g_SCRIPT_PATH}/updater.sh"
			fi
		fi
	fi

	rm -f $l_TMP_FILE
}

# (set_error_trapping) - Function used to enable and disable error handeling, unbound variables and filename pattern matching; the passed value is 1 for enabled or 0 for disabled.
function set_error_trapping ()
{
	# (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
	l_BOOL='^[0-1]+$'
	if ! [[ $1 =~ $l_BOOL ]]; then
		error "Function: set_error_trapping was passed a value that is out of bounds."
	fi

	# (l_TRAP) - Local boolean value used to enable and disable how the script
	# behaves when certain error conditions are met.
	local l_TRAP="${1}"

	if ((l_TRAP == 0)); then
		# Disable errors when a command exits with a non-zero status.
		set +e

		# Disable errors on unbound (undefined) variables.
		set +u

		# Disable allowing filename patterns that match no files to expand to a null
		# string, rather than themselves.
		shopt -u nullglob
	else
		# Enable exiting immediately if a command exits with a non-zero status.
		set -e

		# Enable erroring on unbound (undefined) variables.
		set -u

		# Enable filename patterns that match no files to expand to a null
		# string, rather than themselves.
		shopt -s nullglob
	fi
}
# **************************** basic script functions **************************


# *************************** script specific functions ************************
# (test_user) - Function used to test for the existence of a user then remove them. Passes arguements ($1) username.
function test_user ()
{
	# (l_USER) - Local string value used to hold the username passed in from $1.
	local l_USER="$1"

	if id -u "$l_USER" >/dev/null 2>&1; then
		userdel -r -f "$l_USER" >> /dev/null 2>&1
	fi

	if [ $(getent group $l_USER) ]; then
		groupdel $l_USER
	fi
}

# (test_group) - Function used to test for the existence of a group. Passes arguements ($1) group name.
function test_group ()
{
	# (l_GROUP) - Local string value used to hold the group name passed in from $1.
	local l_GROUP="$1"

	if [ $(getent group $l_GROUP) ]; then
		groupdel $l_GROUP
	fi
}

# (create directory) - Passed arguements ($1) the book chapter number.
function create_directory ()
{
	# (l_CH_NUM) - Local string value used to hold the lab directory number passed in from $1.
	local l_CH_NUM="$1"

	# Verify the function was passed a valid lab number.
	if ! (( l_CH_NUM >= 1 && l_CH_NUM <= 29 )); then
		error "Function: was passed an expression that was out of range."
	fi

	# If we are passed a single digit number, prefix it with a zero.
	l_CH_NUM=$(printf '%02d' $((l_CH_NUM)))

	# Set the working directory.
	l_WORKING_DIRECTORY="$g_LAB_PATH/$g_DIR_PREFIX$l_CH_NUM"

	# Create the directory.
	if ! [[ -d "$l_WORKING_DIRECTORY" ]]; then
		mkdir "$l_WORKING_DIRECTORY"
	fi

	# Return the created directories path.
	echo "$l_WORKING_DIRECTORY"
}

# (create_lab) - Passed arguements ($1) the lab number ($2) optional sets increment.
function create_lab ()
{
	# (l_CH_NUM) - Local string value used to hold the lab directory number passed in from $1.
	local l_LAB_NUM="$1"

	# (l_LAB_NUM_INC) - Local string value used to hold the optional increment value for dual chapter labs number passed in from $2.
	local l_LAB_NUM_INC=${2:-"1"}

	# (l_LAB_NUM) - Local string used for return value.
	local l_LAB=""

	# Verify the function was passed a valid lab number.
	if ! (( l_LAB_NUM >= 1 && l_LAB_NUM <= 29 )); then
		error "Function: was passed an expression that was out of range."
	fi

	# If we are passed a single digit number, prefix it with a zero.
	l_LAB_NUM=$(printf '%02d' $((l_LAB_NUM)))

	# If we are passed a single digit number, prefix it with a zero.
	l_LAB_NUM_INC=$(printf '%02d' $((l_LAB_NUM_INC)))

	# Set the lab number.
	l_LAB="$g_LAB_PREFIX$l_LAB_NUM-$l_LAB_NUM_INC"

	# Return the lab number.
	echo $l_LAB
}

# (backup_lab) - Passed arguements ($1) the chapter number.
function backup_lab ()
{
	# (l_CH_NUM) - Local string value used to hold the lab directory number passed in from $1.
	local l_CH_NUM="$1"

	# (l_WORKING_DIRECTORY) - Local string used to hold working directory.
	local l_WORKING_DIRECTORY=""

	# Verify the function was passed a valid lab number.
	if ! (( l_CH_NUM >= 1 && l_CH_NUM <= 29 )); then
		error "Function: was passed an expression that was out of range."
	fi

	# If we are passed a single digit number, prefix it with a zero.
	l_CH_NUM=$(printf '%02d' $((l_CH_NUM)))

	# Set the working directory.
	l_WORKING_DIRECTORY="$g_LAB_PATH/$g_DIR_PREFIX$l_CH_NUM"

	info "Backing up the previous \"$l_WORKING_DIRECTORY\" working directory."

	if [ -d "$l_WORKING_DIRECTORY.bak" ]; then
		info "  Removing the old backup directory."
		rm -r "$l_WORKING_DIRECTORY.bak" &>/dev/null
	fi

	info "  Creating a backup of the \"$l_WORKING_DIRECTORY\" directory."
	cp -r "$l_WORKING_DIRECTORY"{,.bak}
}
# *************************** script specific functions ************************

# ##############################################################################
# SYSTEM BASE - Setup system for the rest of the labs.
function base ()
{
	local l_LABUSER_PASS="P@\$\$w0rd"

	# Ensure we have the necessary block devices available.
	if [ $(lsblk | grep -o "^sd[a-z]" | wc -l) -ne 8 ]; then
		error "You do not have enough block devices available to complete the labs. LAB12-02, \nLAB18-01, LAB19-01 and LAB19-02 require these block devices to be made \navailable. Please add these block devices before continuing with installation.\n\nFor information on how to add these devices, please contact your instructor.\n"
	fi

	info "Installing the base lab enviornment."

	info "  Installing the required system packages."
	#CH06 (ifconfig)
	info "    Installing the net-tools package(s)."
	apt -y install net-tools -qq &>/dev/null
	#CH06 (lynx browser)
	info "    Installing the lynx package(s)."
	apt -y install lynx -qq &>/dev/null
	#CH07
	info "    Installing the tree package(s)."
	apt -y install tree -qq &>/dev/null
	#CH09
	info "    Installing the acl package(s)."
	apt -y install acl -qq &>/dev/null
	#CH11
	info "    Installing the zip package(s)."
	apt -y install zip -qq &>/dev/null
	#CH12
	info "    Installing the quota package(s)."
	apt -y install quota -qq &>/dev/null
	#CH16
	info "    Installing the sysstat package(s)."
	apt -y install sysstat -qq &>/dev/null
	info "    Installing the procinfo package(s)."
	apt -y install procinfo -qq &>/dev/null
	#CH20
	info "    Installing the network-manager package(s)."
	apt -y install network-manager -qq &>/dev/null
	#CH21
	info "    Installing the whois package(s)."
	apt -y install whois -qq &>/dev/null
	#CH23
	info "    Installing the at package(s)."
	apt -y install at -qq &>/dev/null
	#CH27
	info "    Installing the git package(s)."
	apt -y install git -qq &>/dev/null

	# BACKUP THE FILESYSTEM TABLE
	cp -f /etc/fstab{,.bak}

	# ADD GROUPS
	info "  Creating security groups."

	info "    Creating the labusers1 group."
	if ! [ $(getent group labusers1) ]; then
		groupadd -g 1001 labusers1
	else
		warning "A previous lab enviornment may not have been cleaned up corretly."
	fi

	info "    Creating the labusers2 group."
	if ! [ $(getent group labusers2) ]; then
		groupadd -g 1002 labusers2
	else
		warning "A previous lab enviornment may not have been cleaned up corretly."
	fi

	info "    Creating the labusers3 group."
	if ! [ $(getent group labusers3) ]; then
		groupadd -g 1003 labusers3
	else
		warning "A previous lab enviornment may not have been cleaned up corretly."
	fi

	info "    Creating the labusers9 group."
	if ! [ $(getent group labusers9) ]; then
		groupadd -g 509 labusers9
	else
		warning "A previous lab enviornment may not have been cleaned up corretly."
	fi

	# Ignore error when adding users, due to manually setting UID/GID.
	set +e
	set +u

	# UID 500 - mkisowa

	#if ! [ "`id -u ccacits 2>/dev/null`" ]; then
	#	useradd -c "CCAC ITS" -m -s /bin/bash ccacits
	#	usermod -u 510 ccacits &>/dev/null
	#	usermod -g ccacits ccacits &>/dev/null
	#	groupmod -g 510 ccacits
	#	chown ccacits:ccacits /home/ccacits
	#	echo 'ccacits:2T$qj3Dd7aO1bQiZ' | chpasswd
	#fi

	# ADD USERS
	info "  Creating lab users."
	info "    Creating the labuser1 account."
	if ! [ "`id -u labuser1 2>/dev/null`" ]; then
		useradd --comment "Lab User 1" --uid 501 --create-home --no-user-group --gid 1001 --groups adm,cdrom,sudo,dip,plugdev,lxd,labusers2 --shell /bin/bash labuser1
		usermod -g labusers1 labuser1 &>/dev/null
		chown labuser1:labusers1 /home/labuser1
		echo 'labuser1:P@$$w0rd' | chpasswd
	else
		warning "    A previous lab enviornment may not have been cleaned up corretly."
	fi

	info "    Creating the labuser2 account."
	if ! [ "`id -u labuser2 2>/dev/null`" ]; then
		useradd --comment "Lab User 2" --uid 1002 --create-home --no-user-group --gid 1002 --shell /bin/bash labuser2
		chown labuser2:labusers2 /home/labuser2
		echo 'labuser2:P@$$w0rd' | chpasswd
	else
		warning "    A previous lab enviornment may not have been cleaned up corretly."
	fi

	info "    Creating the labuser3 account."
	if ! [ "`id -u labuser3 2>/dev/null`" ]; then
		useradd --comment "Lab User 3" --uid 1003 --create-home --no-user-group --gid 1001 --groups labusers2 --shell /bin/bash labuser3
		chown labuser3:labusers3 /home/labuser3
		echo 'labuser3:P@$$w0rd' | chpasswd
	else
		warning "    A previous lab enviornment may not have been cleaned up corretly."
	fi

	info "    Creating the labuser9 account."
	if ! [ "`id -u labuser9 2>/dev/null`" ]; then
		useradd --comment "Lab User 9" --uid 509 --create-home --no-user-group --gid 509 --shell /bin/bash labuser9
		chown labuser9:labusers9 /home/labuser9
		echo 'labuser9:P@$$w0rd' | chpasswd

		sed -i '/# User privilege specification/ a labuser9 ALL=(root) NOPASSWD: /bin/systemctl enable ssh, /bin/systemctl disable ssh, /bin/systemctl reload ssh, /bin/systemctl start ssh, /bin/systemctl stop ssh' /etc/sudoers
	else
		warning "    A previous lab enviornment may not have been cleaned up corretly."
	fi

	# Reapply error trapping.
	set -e
	set -u

	# CREATE DIRECTORY
	info "  Creating the lab directories and symlink."
	if ! [ -d "$g_LAB_PATH" ]; then
		mkdir "$g_LAB_PATH"
	fi

	# CREATE SYMLINK
	if ! [[ -h "$g_LAB_SYMLINK" ]]; then
		ln -s "$g_LAB_PATH" "$g_LAB_SYMLINK"
	fi

	# SET SECURITY
	info "  Setting the ownership and permissions for the lab enviornment."
	chown root:labusers1 "$g_LAB_PATH"
	chmod 02755 "$g_LAB_PATH"

	# Set a sourceable file that lists the install date.
	info "  Creating installation timestamp file."
	l_TIMESTAMP=$(echo $(date +%d-%b-%Y) | tr '[:lower:]' '[:upper:]')
	if [ -f "$g_LAB_PATH/.lid" ]; then
		warning "A previous lab enviornment may not have been cleaned up corretly."
		rm "$g_LAB_PATH/.lid"
	fi

	printf "g_INSTALL_DATE=$l_TIMESTAMP\n" >> "$g_LAB_PATH/.lid"
	chown root:root "$g_LAB_PATH/.lid"
	chmod 00440 "$g_LAB_PATH/.lid"

	# Create script to move installation script to labs directory
	if ! [ "$g_SCRIPT_PATH" == "$g_LAB_PATH" ]; then
		info "Moving the installation script then continuing the installation."
		printf '#!/bin/bash\n\n' >> install.sh

		if [ "$g_SCRIPT_PATH" == "/" ]; then
			printf "mv \"/$g_PROGNAME\" \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
			printf "chmod 750 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
			printf "chown root:labusers1 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
			printf "rm \"/install.sh\"\n" >> install.sh
			printf "exec /bin/bash \"$g_LAB_PATH/$g_PROGNAME\" -i -z\n" >> install.sh
		else
			printf "mv \"$g_SCRIPT_PATH/$g_PROGNAME\" \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
			printf "chmod 750 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
			printf "chown root:labusers1 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
			printf "rm \"$g_SCRIPT_PATH/install.sh\"\n" >> install.sh
			printf "exec /bin/bash \"$g_LAB_PATH/$g_PROGNAME\" -i -z\n" >> install.sh
		fi

		chmod 750 "$g_SCRIPT_PATH/install.sh"
		chown mkisowa:labusers1 "$g_SCRIPT_PATH/install.sh"
		exec /bin/bash "$g_SCRIPT_PATH/install.sh"
	fi
}

# CHAPTER - Name of Chapter - Passed arguements ($1) the operation are we performing, ($2) the chapter/lab number.
# CH01 - Installing (No Labs)
function chapter_1 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH02 - Package Management (No Labs)
function chapter_2 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH03 - Virtualization (No Labs)
function chapter_3 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH04 - The Boot Process (No Labs)
function chapter_4 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH05 - Managing System Services
function chapter_5 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB. Please record\nyour answers on your lab sheet and upload them to blackboard."

			#ANSWERS CH05-01

			#1
			#systemctl status ssh

			#2
			#sudo systemctl enable ssh

			#3
			#systemctl status ssh

			#4
			#sudo systemctl start ssh
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 00750 "$l_WORKING_DIRECTORY"

			# Disable SSH
			info "  Stopping the SSH service."
			systemctl stop ssh 2>/dev/null
			info "  Disabling the SSH service."
			systemctl disable ssh 2>/dev/null
			#warning "  The SSH service could be in an unclean state and the system should be rebooted."

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."
			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:        LAB05-01
			OBJECTIVE:  The objective of this lab is to learn how to enable and disable, start and stop services, and review system runlevels.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH05 folder to complete this lab.

			SERVICE MANAGEMENT
			1.  Using the systemctl command, check the status of the ssh service.
				a.	Is the service enabled?
				b.	Is the service started?
			2.  Using the systemctl command, enable the ssh service.
				a.	What did you observe?
			3.  Using the systemctl command, what is the status of the ssh service?
				a.	Is the service enabled?
				b.	Is the service started?
			4.  Using the systemctl command, start the ssh service.
				a.	What did you observe?
			5.  Using the systemctl command, what is the status of the ssh service?
				a.	Is the service enabled?
				b.	Is the service started?

			NOTE: You will have to use the sudo command for these steps.

			RUNLEVEL MANAGEMENT
			6.  Using the runlevel command, what is the current runlevel?
				a.	What did you observe?
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH06 - System Performance
function chapter_6 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB06-01
			#1
			#free

			#2
			#free -h

			#3
			#free --lohi

			#5
			#ps -A | grep lynx

			#6
			#pstree lynx

			#7
			#ps -A | grep lab6-01.sh

			#8
			#kill -9 <PID>
			#ps -A | grep lab6-01.sh
			#ps -A | grep lynx

			#10
			#a. ps -A | grep lynx
			#b. kill <PID>
			#c. kill -9 <PID>
			#d. ps -A | grep lynx
			#f. killall -9 lynx
			#h. kill -9 <PID> (SCRIPT PID)

			#12
			#top
			#u
			#labuser1
			#q

			#13
			#ps aux | grep lab6-01.sh

			#14
			#renice <PID> 5

			#15
			#ps aux | grep lab6-01.sh

			#16
			#u
			#labuser1
			#k
			#<PID>
			#9

			#17
			#pstree labuser1

			#18
			#screen
			#[ESC]

			#19
			#pstree labuser1

			#20
			#[CTRL]+[A] and [CTRL]+[C]
			#top
			#[CTRL]+[A] [P]

			#21
			#lynx ccac.edu
			#[CTRL]+[A] [P]

			#22
			#[CTRL]+[A]+["]
			#[1]+[ENTER]

			#23
			#[CTRL]+[A]+["]
			#[2] + [ENTER]
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02774 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# CREATE SCRIPT
			printf '#!/bin/bash\n\n' >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "# LAB6-01 - System Performance\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "# Copyright © 2022 - 2023\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "# Dr. Matthew Kisow\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "# CC BY-NC-ND 4.0\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "clear\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "echo \"Spawning processes for LAB6-01...\"\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "for i in {1..10}; do (lynx ccac.edu > /dev/null) & done\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "while true; do sleep 86400; done\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			printf "exit 0\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
			chmod 00750 "$l_WORKING_DIRECTORY/lab06-01.sh"

			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."
			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB06-01
			OBJECTIVE:	The objective of this lab is to learn how to assess system performance and create/terminate processes.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the /labs/CH06 folder.

			MEMORY MANAGEMENT
			1.	Using the free command, check how much memory and virtual memory are available on the system.
					a.	How much of this did you understand?

			2.	Using the free command and the switch that puts these values into a human-readable format, check how much memory and virtual memory are available on the system.
					a.	Is it more readable now?

			3.	Using the free command and the switch that shows the low and high values, determine how much memory and virtual memory are available.
					a.	What do you see?
					b.	Is it more readable now?

			PROCESS MANAGEMENT
			4.	*Execute the script in this folder by typing ./lab06-01.sh & at the command prompt. This script spawns several lynx web browsers in the background.
					Ensure you hit the enter key, a message appears that can safely be ignored.
					*NOTE: You may have to install the lynx program.  To do this type: sudo apt install lynx -y
			5.	Pipe the output of the ps command to the grep command listing only the lynx process.
					a.	What did you observe?
			6.	Using the pstree command, list the lynx process.
					a.	What did you observe?
			7.	Pipe the output of the ps command to the grep command listing only the lab06-01.sh script's process.
					a.	What did you observe?
					b.	Find the PID of lab06-01.sh script from the output of the previous command.
			8.	Using the kill command, the signal 9 switch (terminate immediately), and the PID from the previous command terminate the lab06-01.sh scripts process.
					a.	Run the commands you used in steps 6 and 8 again.
					b.	What did you observe?

			9.	Again, execute the script in this folder by typing ./lab06-01.sh & at the command prompt. This script spawns several lynx web browsers in the background.
			10.	Using the kill and killall commands, follow the steps below:
					a.	List all of the lynx processes.
					b.	Terminate one of those processes using the kill <PID> command.
					c.	Terminate another lynx process this time using the signal 9 switch.
					d.	Relist the lynx processes.
					e.	What did you notice when you relisted the running processes?
					f.	Kill all of the remaining lynx processes using one command, and ensure you use the signal 9 switch. DO NOT terminate lab6-01.sh process yet.
					g.	Which command and options did you use?
					h.	Relist the lynx processes; are they all terminated?
					i.	Now terminate lab06-01.sh process.

			PROCESS PRIORITY
			11.	Again, execute the script in this folder by typing ./lab06-01.sh & at the command prompt. This script spawns several lynx web browsers in the background
			12.	Using the top command, see if the lynx or lab06-01.sh process is one of the top processes.
					a.	Filter the processes out, focusing on user labuser1.
					b.	What do you observe?
					c.	Exit top.
			13.	Pipe the output of the ps command using the user process switch to the grep command listing only the lab06-01.sh script's process.
			14.	Use the renice command, to change the priority of lab06-01.sh PID to 5.
			15.	Pipe and scrutinize the output of the ps command using the user process switch to the grep command listing only the lab06-01.sh script's process.
					a.	What changed?
			16.	Using the top command, see if the lynx or lab06-01.sh process is one of the top processes.
					a.	Filter the processes out, focusing on user labuser1.
					b.	What do you observe this time?
					c.	From top, find and terminate using signal 9 the lab6-01.sh process.
					d.	Find and type the PID of lab6-01.sh process.
					e.	What did you observe?
					f.	Exit top.

			SCREEN
			17.	Using the pstree command, list the processes for labuser1.
					a.	What do you observe?
			18.	Type the screen command, and start the screen virtual window manager.
					a.	Type [ESC] to continue.
			19.	Using the pstree command, list the processes for labuser1.
					a.	What do you observe?
			20.	Start a new virtual screen session.
					a.	Start the top program.
					b.	While in the top program, move back to the previous screen.
			21.	Start a new virtual screen session.
					a.	Start the lynx program and navigate to ccac.edu.
					b.	While in the lynx program, move back to the previous screen.
			22.	List the virtual consoles.
					a.	Choose the first one “1”.
					b.	What screen are you on?
					c.	Exit the top program, then type the exit command.
			23.	List the virtual consoles again.
					a.	Choose the second one “2”.
					b.	What screen are you on?
					c.	Quit the lynx program, then type the exit command.
			24.	Exit the screen virtual screen session.
					a.	Type the exit command.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH07 - File Manipulation
function chapter_7 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB07-01
			#7
			#mkdir "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships"
			#mkdir "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel"
			#mkdir "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans"
			#mkdir "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Officers"

			#9
			#mkdir -p "$l_WORKING_DIRECTORY/numbered/{1..9}/{1..9}"

			#12
			# Soft Link Enterprise-A from JTK (Done In Lab).
			#ln -s "$g_LAB_PATH/$l_WORKING_DIRECTORY/James T. Kirk/USS Enterprise-A" "$l_WORKING_DIRECTORY/Montgomery Scott/USS Enterprise-A"

			# Move Capitans to Capitans (Done In Lab)
			#mv "$l_WORKING_DIRECTORY/Christopher Pike" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/"
			#mv "$l_WORKING_DIRECTORY/James T. Kirk" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/"
			#mv "$l_WORKING_DIRECTORY/Montgomery Scott" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/"
			#mv "$l_WORKING_DIRECTORY/Hikaru Sulu" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/"
			#mv "$l_WORKING_DIRECTORY/Nyota Uhura" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/"
			#rm "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/James T. Kirk/USS Enterprise"
			#rm "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Hikaru Sulu/USS Excelsior"

			# USS Discovery
			#mv "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Christopher Pike/USS Discovery" "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Discovery" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Christopher Pike/"

			# USS Enterprise
			#mv "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Christopher Pike/USS Enterprise" "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Enterprise" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Christopher Pike/"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Enterprise" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/James T. Kirk/"

			# USS Enterprise-A
			#mv "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/James T. Kirk/USS Enterprise-A" "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Enterprise-A" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/James T. Kirk/"

			# USS Excelsior
			#mv "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Montgomery Scott/USS Excelsior" "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Excelsior" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Montgomery Scott/"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Excelsior" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Hikaru Sulu/"

			# USS Leondegrance
			#mv "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Nyota Uhura/USS Leondegrance" "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships"
			#ln -s "$l_WORKING_DIRECTORY/Starfleet Federation/Federation Ships/USS Leondegrance" "$l_WORKING_DIRECTORY/Starfleet Federation/Personnel/Capitans/Nyota Uhura/"

			#13
			#find /labs/CH07/difference/ -name *.txt | tree

			#14
			#find /labs/CH07/difference/ -name *.html -exec grep -iw Hello {} \;
			#find /labs/CH07/difference/ -name *.html -exec grep -iw Zeus {} \;
			#find /labs/CH07/difference/ -name *.html -exec grep -iw Aphrodite {} \;
			#find /labs/CH07/difference/ -name *.html -exec grep -iw "<head>" {} \;

			#15
			#find /labs/CH07/difference/ -name *.txt -exec grep -iw fox {} \;
			#find /labs/CH07/difference/ -name *.txt -exec grep -iw 7h3 {} \;
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			chown labuser1:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02774 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# CREATE FILE STRUCTURE
			# Ship Capitans Directories
			mkdir "$l_WORKING_DIRECTORY/Christopher Pike"
			mkdir "$l_WORKING_DIRECTORY/James T. Kirk"
			mkdir "$l_WORKING_DIRECTORY/Montgomery Scott"
			mkdir "$l_WORKING_DIRECTORY/Hikaru Sulu"
			mkdir "$l_WORKING_DIRECTORY/Nyota Uhura"

			# Starfleet Federation Directory
			mkdir "$l_WORKING_DIRECTORY/Starfleet Federation"

			# Numbered Directory
			mkdir "$l_WORKING_DIRECTORY/numbered"

			# Difference Directory
			mkdir "$l_WORKING_DIRECTORY/difference"
			mkdir -p "$l_WORKING_DIRECTORY/difference"/{1..3}
			touch "$l_WORKING_DIRECTORY/difference"/README
			mkdir -p "$l_WORKING_DIRECTORY/difference/1"/{1..3}
			touch "$l_WORKING_DIRECTORY/difference/1"/file{1..2}.{txt,html}
			printf '<head>\nHello Zeus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/1/file3.html"
			printf '<head>\nHello Hera!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/1/file2.html"
			printf '<head>\nHello Aphrodite!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/1/file3.html"
			printf '7h3 qu1ck 8r0wn f0x jump5 0ver 7h3 142y d09!\n' > "$l_WORKING_DIRECTORY/difference/1/file3.txt"
			mkdir -p "$l_WORKING_DIRECTORY/difference/2"/{1..5}
			touch "$l_WORKING_DIRECTORY/difference/2"/file{1..5}.{txt,html}
			printf '<head>\nHello Zeus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file1.html"
			printf '<head>\nHello Hera!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file2.html"
			printf '<head>\nHello Aphrodite!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file3.html"
			printf '<head>\nGoodbye Eros!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file4.html"
			printf '<head>\nGoodbye Athena!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file5.html"
			printf 'The quick brown fox jumps over the lazy dog!\n' > "$l_WORKING_DIRECTORY/difference/2/file4.txt"
			mkdir -p "$l_WORKING_DIRECTORY/difference/3"/{1..7}
			touch "$l_WORKING_DIRECTORY/difference/3"/file{1..7}.{txt,html}
			printf '<head>\nHello Zeus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file1.html"
			printf '<head>\nHello Hera!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file2.html"
			printf '<head>\nGoodbye Aphrodite!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file3.html"
			printf '<head>\nHello Eros!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file4.html"
			printf '<head>\nGoodbye Athena!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file5.html"
			printf '<head>\nHello Hephaestus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file6.html"
			printf '<head>\nGoodbye Ares!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file7.html"
			printf 'The quick brown fox jumps over the lazy dog!\n' > "$l_WORKING_DIRECTORY/difference/3/file1.txt"
			printf '7h3 qu1ck 8r0wn f0x jump5 0v3r 7h3 142y d09!\n' > "$l_WORKING_DIRECTORY/difference/3/file2.txt"
			printf 'The quick brown fox jumps over the lazy dog!\n' > "$l_WORKING_DIRECTORY/difference/3/file4.txt"

			# USS Enterprise Quotes
			printf "Our mission? We explore. We seek out new life and new civilizations. We boldly go where no one has gone before.\n- Christopher Pike, 2259\n\n" >> "$l_WORKING_DIRECTORY/Christopher Pike/USS Enterprise"
			printf "All I ask is a tall ship and a star to steer her by.\n- James T. Kirk, 2268" >> "$l_WORKING_DIRECTORY/Christopher Pike/USS Enterprise"

			touch "$l_WORKING_DIRECTORY/Christopher Pike/USS Discovery"

			# Hard Link
			ln "$l_WORKING_DIRECTORY/Christopher Pike/USS Enterprise" "$l_WORKING_DIRECTORY/James T. Kirk/USS Enterprise"

			# USS Enterprise-A Quotes
			printf "My friends, we've come home.\n- James T. Kirk, 2286" >> "$l_WORKING_DIRECTORY/James T. Kirk/USS Enterprise-A"

			# USS Excelsior Quotes
			printf "My God, that's a big ship.\nNot so big as her captain, I think.\n- Leonard McCoy and Montgomery Scott, 2293" >> "$l_WORKING_DIRECTORY/Montgomery Scott/USS Excelsior"

			# Soft Link
			ln -s "$l_WORKING_DIRECTORY/Montgomery Scott/USS Excelsior" "$l_WORKING_DIRECTORY/Hikaru Sulu/USS Excelsior"
			touch "$l_WORKING_DIRECTORY/Nyota Uhura/USS Leondegrance"

			# SET SECURITY
			chown labuser1:labusers1 -R "$l_WORKING_DIRECTORY"/*
			chmod 00755 -R "$l_WORKING_DIRECTORY"/*

			# CREATE LAB - SET PERMISSIONS
			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB07-01
			OBJECTIVE:	The objective of this lab is to learn how to navigate, create and delete files and folders, symbolic links, and structure from the command line.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH07 folder.

			TREES AND FILE LISTINGS
			1.	Using the tree command, map the structure of the CH07 folder.
			2.	Interrogate each folder:
					a.	What are these folders' groups and user ownership?
					b.	Are there any symbolic links?
					c.	What do those links look like?
			3.	Interrogate the inodes of the files in the Hikaru Sulu and Montgomery Scott folders.
					a.	What is the inode of the USS Excelsior file in both folders?
					b.	What kind of link is this?
					c.	What do you notice about the pathname of the symbolic link in the Hikaru Sulu folder?
			4.	Interrogate the inodes of the files in the Christopher Pike and James T. Kirk folders.
					a.	What is the inode of the USS Enterprise file in both folders?
					b.	What kind of link is this?
			5.	Navigate to the 'Montgomery Scott' folder.
					a.	Create a link to the USS Enterprise-A in the James T. Kirk folder.
			6.	Navigate to the Nyota Uhura folder.
					a.	Using the touch command, update the date and time stamp of the USS Leondegrance file to January 1, 2288.
					b.	Create an empty file called USS Gallant in this folder.

			CREATING FOLDERS
			7.	Create the following folder structure under the 'Starfleet Federation' folder.
					Starfleet Federation/
					|-- Federation Ships
					\-- Personnel
					    |-- Captains
					    \-- Officers
					a.	How many commands did you type?
			8.	Remove the Personnel directory.

			9.	Create nine directories in the numbered directory numbered one through nine, with nine sub-directories numbered one through nine in each.
					numbered
					|-- 1
					|   |-- 1
					|   .
					|   .
					|   .
					|   \--9
					.
					.
					.
					\--9
					|-- 1
					|-- 2
					|-- 3
					.
					.
					.
					\--9
					a.	Were you able to create it using one command?

			DIFFERENCE
			10.  Using the diff command, what is the difference between directories one through three?

			MOVING AND REMOVING OBJECTS
			11.  From the root of the CH07 folder, move the Starfleet captains under the Starfleet Federation/Personnel/Capitans folder.
			12.  Under each Starfleet Captain, move the ship file under the Starfleet Federation/Federation Ships folder and create a symbolic link under each Captain to their ship.  Use the diagram (below) to help you.

					NOTE: Recall that the USS Enterprise under James T. Kirk is a hard link, and the USS Excelsior is a soft link or symbolic-link under Hikaru Sulu. Remove these links first, then recreate them once the ship has been moved to the 'Federation Ships' directory.

					/Starfleet Federation/
					|-- Federation Ships
					|   |-- USS Discovery
					|   |-- USS Enterprise
					|   |-- USS Enterprise-A
					|   |-- USS Excelsior
					|   \--USS Leondegrance
					\--Personnel
					|-- Captains
					|   |-- Christopher Pike
					|   |   |-- USS Discovery -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Discovery
					|   |   \--USS Enterprise -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Enterprise
					|   |-- Hikaru Sulu
					|   |   \--USS Excelsior -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Excelsior
					|   |-- James T. Kirk
					|   |   |-- USS Enterprise -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Enterprise
					|   |   \--USS Enterprise-A -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Enterprise-A
					|   |-- Montgomery Scott
					|   |   \--USS Excelsior -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Excelsior
					|   \--Nyota Uhura
					|       \--USS Leondegrance -> /Lab Files/CH07-A/Starfleet Federation/Federation Ships/USS Leondegrance
					\--Officers

			SEARCHING
			13.  Find all text files in the difference directory and sub-directories. Once done, pipe the output to the tree command.
			14.  Find all .html files in the difference directory and sub-directories with the word:
					a.	"Hello" in them.
					b.	"Zeus" in them.
					c.	"Aphrodite" in them.
					d.	"<head>" in them.
			15.  Find all .txt files in the difference directory and sub-directories with the word:
					a.	"fox" in them.
					b.	"7h3" in them.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH08 - File Processing
function chapter_8 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#Answers
			#15b
			#awk -F ',' '{$3,$2,$1}' starfleet-ships.txt

			#15c
			#awk -F ',' '{printf "%-15s %-20s %-20s \n", $3,$2,$1}' starfleet-ships.txt | sort -V

			#15d
			#awk -F ',' '{printf "%-15s %-20s %-20s \n", $3,$2,$1}' starfleet-ships.txt | sort -V | grep "Constitution-class (31st century)"

			#15e
			#awk -F ',' '{printf "%-15s %-20s %-20s \n", $3,$2,$1}' starfleet-ships.txt | sort -V | grep "Enterprise"

			#15f
			#awk -F ',' '{print $1}' starfleet-ships.txt | sort | uniq -c

			#15g
			#tr [:lower:] [:upper:] < starfleet-ships.txt | awk -F ',' '{printf "%-15s %-20s %-20s \n", $3,$2,$1}' | sort -V

			#16b
			#sed -e 's/niap/pain/g ; s/hcihw/which/g ; s/dna/and/g ; s/secnatsmucric/circumstances/g' lorem-ipsum.txt

			#17b
			#sed -i 's/niap/pain/g ; s/hcihw/which/g ; s/dna/and/g ; s/secnatsmucric/circumstances/g' lorem-ipsum.txt

			#20
			#fgrep -f written-numbers-search.txt written-numbers.txt
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 $l_WORKING_DIRECTORY
			chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# HE WHO SHALL NOT BE NAMED
			info "   Creating hwsnbn.sh script."
			printf '#!/bin/bash\n\n' >> "$l_WORKING_DIRECTORY/hwsnbn.sh"
			printf "sed -i 's/Tom Marvolo Riddle/He who shall not be named/g' /labs/CH08/wizard-names.txt\n" >> "$l_WORKING_DIRECTORY/hwsnbn.sh"
			printf "sed -i 's/Lord Voldemort/He who shall not be named/g' /labs/CH08/wizard-names.txt\n" >> "$l_WORKING_DIRECTORY/hwsnbn.sh"
			chown root:root "$l_WORKING_DIRECTORY/hwsnbn.sh"
			chmod 00700 "$l_WORKING_DIRECTORY/hwsnbn.sh"

			# Remove ANY existing crontab entries from previous script runs.
			info "   Removing any old hwsnbn.sh residue from crontab."
			sed -i -e '/1  \*    \* \* \*   root    \/labs\/CH08\/hwsnbn.sh/d' /etc/crontab

			# Apply crontab entry for hwsnbn.sh.
			info "   Applying new hwsnbn.sh entry to crontab."
			sed -i "`wc -l < /etc/crontab` i 1  *    * * *   root    /labs/CH08/hwsnbn.sh" /etc/crontab

			# frankenstein letter
			cat > "$l_WORKING_DIRECTORY/frankenstein-letter.txt" <<-EOF
			To Mrs. Saville, England
			St. Petersburgh, Dec. 11th, 17—

			You will rejoice to hear that no disaster has accompanied
			the commencement of an enterprise which you have regard-
			ed with such evil forebodings. I arrived here yesterday, and
			my first task is to assure my dear sister of my welfare and
			increasing confidence in the success of my undertaking.
			I am already far north of London, and as I walk in the
			streets of Petersburgh, I feel a cold northern breeze play
			upon my cheeks, which braces my nerves and fills me
			with delight. Do you understand this feeling? This breeze,
			which has travelled from the regions towards which I am
			advancing, gives me a foretaste of those icy climes. Inspir-
			ited by this wind of promise, my daydreams become more
			fervent and vivid. I try in vain to be persuaded that the
			pole is the seat of frost and desolation; it ever presents it-
			self to my imagination as the region of beauty and delight.

			There, Margaret, the sun is forever visible, its broad disk just
			skirting the horizon and diffusing a perpetual splendour.
			There—for with your leave, my sister, I will put some trust
			in preceding navigators— there snow and frost are ban-
			ished; and, sailing over a calm sea, we may be wafted to

			a land surpassing in wonders and in beauty every region
			hitherto discovered on the habitable globe. Its productions
			and features may be without example, as the phenomena of
			the heavenly bodies undoubtedly are in those undiscovered
			solitudes. What may not be expected in a country of eter-
			nal light? I may there discover the wondrous power which
			attracts the needle and may regulate a thousand celestial
			observations that require only this voyage to render their
			seeming eccentricities consistent forever. I shall satiate my
			ardent curiosity with the sight of a part of the world never
			before visited, and may tread a land never before imprinted
			by the foot of man. These are my enticements, and they are
			sufficient to conquer all fear of danger or death and to in-
			duce me to commence this labourious voyage with the joy
			a child feels when he embarks in a little boat, with his holi-
			day mates, on an expedition of discovery up his native river.

			But supposing all these conjectures to be false, you cannot
			contest the inestimable benefit which I shall confer on all
			mankind, to the last generation, by discovering a passage
			near the pole to those countries, to reach which at present
			so many months are requisite; or by ascertaining the secret
			of the magnet, which, if at all possible, can only be effected
			by an undertaking such as mine.

			These reflections have dispelled the agitation with which
			I began my letter, and I feel my heart glow with an enthu-
			siasm which elevates me to heaven, for nothing contributes
			so much to tranquillize the mind as a steady purpose—a
			point on which the soul may fix its intellectual eye. This
			expedition has been the favourite dream of my early years.

			I have read with ardour the accounts of the various voyag-
			es which have been made in the prospect of arriving at the
			North Pacific Ocean through the seas which surround the
			pole. You may remember that a history of all the voyages
			made for purposes of discovery composed the whole of our
			good Uncle Thomas' library. My education was neglected,
			yet I was passionately fond of reading. These volumes were
			my study day and night, and my familiarity with them in-
			creased that regret which I had felt, as a child, on learning
			that my father's dying injunction had forbidden my uncle to
			allow me to embark in a seafaring life.

			These visions faded when I perused, for the first time,
			those poets whose effusions entranced my soul and lifted
			it to heaven. I also became a poet and for one year lived in
			a paradise of my own creation; I imagined that I also might
			obtain a niche in the temple where the names of Homer and
			Shakespeare are consecrated. You are well acquainted with
			my failure and how heavily I bore the disappointment. But
			just at that time I inherited the fortune of my cousin, and
			my thoughts were turned into the channel of their earlier
			bent.

			Six years have passed since I resolved on my present
			undertaking. I can, even now, remember the hour from
			which I dedicated myself to this great enterprise. I com-
			menced by inuring my body to hardship. I accompanied
			the whale-fishers on several expeditions to the North Sea; I
			voluntarily endured cold, famine, thirst, and want of sleep;
			I often worked harder than the common sailors during the
			day and devoted my nights to the study of mathematics, the
			theory of medicine, and those branches of physical science
			from which a naval adventurer might derive the greatest
			practical advantage. Twice I actually hired myself as an un-
			der-mate in a Greenland whaler, and acquitted myself to
			admiration. I must own I felt a little proud when my captain
			offered me the second dignity in the vessel and entreated
			me to remain with the greatest earnestness, so valuable did
			he consider my services.

			And now, dear Margaret, do I not deserve to accomplish
			some great purpose? My life might have been passed in
			ease and luxury, but I preferred glory to every enticement
			that wealth placed in my path. Oh, that some encouraging
			voice would answer in the affirmative! My courage and my
			resolution is firm; but my hopes fluctuate, and my spirits
			are often depressed. I am about to proceed on a long and
			difficult voyage, the emergencies of which will demand all
			my fortitude: I am required not only to raise the spirits of
			others, but sometimes to sustain my own, when theirs are
			failing.

			This is the most favourable period for travelling in Russia.
			They fly quickly over the snow in their sledges; the motion is
			pleasant, and, in my opinion, far more agreeable than that
			of an English stagecoach. The cold is not excessive, if you
			are wrapped in furs— a dress which I have already adopted,
			for there is a great difference between walking the deck and
			remaining seated motionless for hours, when no exercise
			prevents the blood from actually freezing in your veins. I
			have no ambition to lose my life on the post-road between
			St. Petersburgh and Archangel.

			I shall depart for the latter town in a fortnight or three
			weeks; and my intention is to hire a ship there, which can
			easily be done by paying the insurance for the owner, and
			to engage as many sailors as I think necessary among those
			who are accustomed to the whale-fishing. I do not intend
			to sail until the month of June; and when shall I return?

			Ah, dear sister, how can I answer this question? If I suc-
			ceed, many, many months, perhaps years, will pass before
			you and I may meet. If I fail, you will see me again soon, or
			never.

			Farewell, my dear, excellent Margaret. Heaven shower
			down blessings on you, and save me, that I may again and
			again testify my gratitude for all your love and kindness.

			Your affectionate brother,
			R. Walton
			EOF

			# lorem-ipsum
			cat > "$l_WORKING_DIRECTORY/lorem-ipsum.txt" <<-EOF
			Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
			incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
			nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
			Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
			fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
			culpa qui officia deserunt mollit anim id est laborum.

			Nor is there anyone who loves or pursues or desires to obtain niap of itself,
			because it is niap, but occasionally secnatsmucric occur in hcihw toil dna niap
			can procure him some great pleasure.

			Roman Philosopher, Cicero
			EOF

			# numbers
			cat > "$l_WORKING_DIRECTORY/numbers.txt" <<-EOF
			22
			67
			189
			13
			88
			99
			3
			15
			8
			68
			113
			74
			9
			58
			77
			19
			115
			34
			100
			91
			EOF

			# starfleet-ships
			cat > "$l_WORKING_DIRECTORY/starfleet-ships.txt" <<-EOF
			Danube-class,USS Rubicon,NCC-72936
			unknown,USS Farouk El-Baz,NCC-31823
			Renaissance-class,USS Hornet,NCC-45231
			Nebula-class,USS Sutherland,NCC-72015
			unknown,USS Endeavour,NCC-71805
			unknown,USS Whorfin,NCC-1024
			Merced-class,USS Trieste,NCC-37124
			unknown,USS Merrimac,NCC-1715
			Prometheus-class,USS Prometheus,NX-59650
			Transport ship,USS Constantinople,NCC-43622
			Inquiry-class,USS Rustazh,NCC-86503
			New Orleans-class,USS Thomas Paine,NCC-65530
			Sagan-class,USS Stargazer,NCC-82893
			Galaxy-class,USS Odyssey,NCC-71832
			Dreadnought,USS Entente,NCC-2120
			Apollo-class,USS Ajax,NCC-11574
			Walker-class,USS Shenzhou,NCC-1227
			California-class,USS Oakland,NCC-75012
			Constitution-class,USS Potemkin,NCC-1657
			Sovereign-class,USS Pachacuti,NCC-74181
			unknown,unknown,NCC-31054
			Merian-class,USS Mitchell,NCC-325027
			unknown,USS Endeavour,NCC-25330
			unknown,USS Omaha Nebraska,NCC-5252
			Galaxy-class,USS Yamato,NCC-71807
			Dresselhaus-type,USS Dresselhaus,NCC-325019
			unknown,USS Exeter,NCC-26531
			Ambassador-class,USS Yamaguchi,NCC-26510
			Excelsior-class,USS Repulse,NCC-2544
			Miranda-class,USS ShirKahr,NCC-31905
			Inquiry-class,USS Nathan Hale,NCC-86501
			unknown,USS Nobel,NCC-55012
			unknown,unknown,NCC-71325
			unknown,USS Atlantis,NCC-72007
			Danube-class,USS Ganges,NCC-72454
			Antares-type,Woden,NCC-325
			Inquiry-class,USS Magellan,NCC-86509
			Nebula-class,USS Bonchune,NCC-70915
			unknown,USS Atlantis,NCC-32710
			Federation mission scoutship,unknown,NCC-75227
			Akira-class,USS Thunderchild,NCC-63549
			unknown,USS Tecumseh,NCC-14934
			Nimitz-class,USS Europa,NCC-1648
			Luna-class,USS Titan,NCC-80102
			Freedom-class,USS Franklin,NX-326
			California-class,USS Cerritos,NCC-75567
			unknown,USS Tikhov,NCC-1067-M
			Nebula-class,USS Bellerophon,NCC-62048
			Constitution-class,USS Korolev,NCC-2014
			Sovereign-class,USS Gilgamesh,NCC-74669
			Obena-class,USS Archimedes,NCC-83002
			Ambassador-class,USS Excalibur,NCC-26517
			Defiant-class,USS Sao Paulo,NCC-75633
			Curry-type,Raging Queen,NCC-42264
			unknown,unknown,NCC-1831
			Sutherland-class,USS Ibn al-Haytham,NCC-91965
			Nebula-class,USS Monitor,NCC-61826
			Constellation-class,USS Hathaway,NCC-2593
			Sovereign-class,USS Venture,NCC-75306
			Constitution-class,USS Enterprise-A,NCC-1701-A
			Yeager-type,USS Yeager,NCC-65674
			Ptolemy-class,unknown,NCC-3801
			Antares-type,Antares,NCC-501
			New Orleans-class,USS Kyushu,NCC-65491
			Excelsior-class,USS Valley Forge,NCC-43305
			unknown,USS Wellington,NCC-33821
			Springfield-class,USS Chekov,NCC-57302
			Reliant-class,USS Uhura,NCC-90214
			Sovereign-class,USS Okuda,NCC-74107
			Oberth-class,USS Oberth,NCC-602
			Inquiry-class,USS Zheng He,NCC-86505
			unknown,USS Equicon,NCC-1988
			Excelsior-class,USS Excelsior,NCC-2000
			Sutherland-class,USS Huygens,NCC-91814
			Nebula-class,USS Prometheus,NCC-71201
			Oberth-class,USS Tsiolkovsky,NCC-53911
			Constitution-class,USS Endeavour,NCC-1895
			Sovereign-class,USS Hrothgar,NCC-74975
			Antares-type,Yorkshire,NCC-330
			Credence-type,USS Credence,NCC-2804
			Korolev-class,USS Goddard,NCC-59621
			Excelsior-class,USS Melbourne,NCC-62043
			Inquiry-class,USS Shackleton,NCC-86517
			unknown,USS Non Sequitur,NCC-12999
			Excelsior-class,USS Lakota,NCC-42768
			Constellation-class,USS Constellation,NX-1974
			Galaxy-class,USS Venture,NCC-71854
			Constitution-class,USS Hood,NCC-1703
			Apollo-class,USS Clement,NCC-12537
			Curry-type,USS Curry,NCC-42254
			Miranda-class,USS Antares,NCC-9844
			Shepard-class,USS Gagarin,NCC-1309
			unknown,USS Max Plank,NCC-28573
			Renaissance-class,USS Aries,NCC-45167
			Challenger-class,USS Buran,NCC-57580
			Daedalus-class,USS Essex,NCC-173
			Constitution-class,USS Ahwahnee,NCC-2048
			unknown,USS Gremlin,NCC-72927
			Oberth-class,USS Grissom,NCC-638
			Oberth-class,USS Cochrane,NCC-59318
			Defiant-class,USS Valiant,NCC-74210
			unknown,USS Apollo,NCC-30000
			Constitution-class,USS Exeter,NCC-1672
			California-class,USS Solvang,NCC-12101
			unknown,unknown,NCC-1697
			Constitution-class,USS Emden,NCC-1856
			Eisenberg-class,USS Nog,NCC-325070
			Ross-class,USS Yi Sun-Sin,NCC-76545
			unknown,USS Kelvin,NCC-0514
			Excelsior II-class,USS Eureka,NCC-42023
			unknown,USS Archer,NCC-627
			Galaxy-class,USS Galaxy,NCC-70637
			Bonaventure-type,Bonaventure,10281NCC
			Hiawatha-type,USS Hiawatha,NCC-815
			Nebula-class,USS Honshu,NCC-60205
			Reliant-class,USS Reliant,NCC-90200
			Crossfield-class,USS Glenn,NCC-1030
			unknown,USS John Muir,NCC-1732
			Sovereign-class,USS Van Citters,NCC-72504
			Luna-class,USS Europa,NCC-80104
			Cheyenne-class,USS Ahwahnee,NCC-71620
			Nebula-class,USS Phoenix,NCC-65420
			California-class,USS Carlsbad,NCC-73110
			unknown,USS Eagle,NCC-956
			unknown,USS Akagi,NCC-62158
			unknown,unknown,NCC-31810
			California-class,USS Vacaville,NCC-72707
			Crossfield-class,USS Discovery,NCC-1031
			Sovereign-class,USS Valkyrie,NCC-74877
			Crossfield-class (refit),USS Discovery,NCC-1031-A
			Defiant-class,USS Defiant,NX-74205
			unknown,USS Hokule'a,NCC-31087
			Danube-class,USS Rio Grande,NCC-72452
			Luna-class,USS Oberon,NCC-80103
			unknown,unknown,NCC-1685
			unknown,USS Challenger,NCC-2032
			Antares-type,unknown,NCC-502
			unknown,USS Excelsior,NCC-21445
			unknown,USS Neil Armstrong,NCC-31806
			Sutherland-class,USS Almagest,NCC-91870
			unknown,USS Heart of Gold,NCC-42
			Parliament-class,USS Vancouver,NCC-70492
			unknown,unknown,NCC-30532
			Alka-Selsior-type,USS Alka-Selsior,NCC-1404
			Excelsior-class,USS Berlin,NCC-14232
			unknown,USS Tripoli,NCC-19386
			Niagara-class,USS Princeton,NCC-59804
			unknown,USS Voyager,NCC-74656-J
			Constitution-class,USS Enterprise,NCC-1701
			Lancelot-class,USS Leondegrance,NCC-2176
			unknown,USS Archer,NCC-44278
			Engle-class,USS T'Plana-Hath,NCC-1004
			Sombra-class,USS Peregrine,NCC-1549
			Oberth-class,USS Yosemite,NCC-19002
			Intrepid-class,USS Voyager,NCC-74656
			unknown,USS Da-Teplan,NCC-30087
			Centaur-type,USS Centaur,NCC-42043
			Galaxy-class,USS Challenger,NCC-71099
			Excelsior-class,USS Charleston,NCC-42285
			Nova-class,USS Equinox,NCC-72381
			Oberth-class,USS Pegasus,NCC-53847
			Constellation-class,USS Stargazer,NCC-2893
			Miranda-class,USS Brattain,NCC-21166
			Miranda-class,USS Reliant,NCC-1864
			Danube-class,USS Shenandoah,NCC-73024
			unknown,USS Nova,NCC-73515
			Constitution-class,USS Intrepid,NCC-1631
			Reliant-class,USS Clark,NCC-90206
			unknown,USS Endeavour,NCC-39272
			Ross-class,USS Vanguard,NCC-75148
			Constellation-class,USS Victory,NCC-9754
			unknown,unknown,NCC-85343[4]
			unknown,USS Wyoming,NCC-43730
			Magee-class,USS Shran,NCC-1413
			Danube-class,unknown,NCC-73918
			Elkins-type,USS Elkins,NCC-74121
			Miranda-class,USS Saratoga,NCC-1887
			Ambassador-class,USS Zhukov,NCC-26136
			Courage-class,USS Song,NCC-325084
			Miranda-class,USS Tian An Men,NCC-21382
			Class F shuttlecraft,unknown,NCC-K7
			unknown,USS Liberator,NCC-67016
			Constellation-class,unknown,NCC-7100
			unknown,USS Republic,NCC-1371
			Miranda-class,USS Lantree,NCC-1837
			Scout,USS Revere,NCC-595
			Miranda-class,USS Majestic,NCC-31060
			Ambassador-class,USS Enterprise,NCC-1701-C
			Oberth-class,USS Raman,NCC-29487
			Sovereign-class,USS Arsinoe,NCC-75307
			Sydney-class,USS Jenolan,NCC-2010
			Excelsior-class,USS Fredrickson,NCC-42111
			unknown,USS Tycho,NCC-85103
			Hermes-class,unknown,NCC-585
			unknown,USS Intrepid,NCC-38907
			Sovereign-class,USS Hutchinson,NCC-74957
			unknown,USS Kongo,NCC-1710
			unknown,unknown,NCC-85183[3]
			Constitution-class (31st century),USS Noble,NCC-325002
			unknown,USS Sherlock Holmes,NCC-221B
			Nebula-class,USS Leeds,NCC-70352
			unknown,USS Ticonderoga,NCC-87270
			Intrepid-class,USS Intrepid,NCC-74600
			unknown,USS Constellation,NCC-55817
			unknown,unknown,NCC-77567
			Norway-class,USS Budapest,NCC-64923
			Miranda-class,USS Saratoga,NCC-31911
			Soyuz-class,USS Bozeman,NCC-1941
			Dauntless-class,USS Dauntless,NCC-80816
			Excelsior-class,USS Fearless,NCC-14598
			Gagarin-class,USS Gagarin,NCC-97930
			Constitution-class,unknown,NCC-1700
			Hansando-type,USS Hansando,NCC-325072
			Protostar-type,USS Protostar,NX-76884
			California-class,USS Merced,NCC-87075
			Malachowski-class,USS Clarke,NCC-1661
			Antares-type,unknown,NCC-G1465[1]
			Oberth-class,USS Bonestell,NCC-31600
			Intrepid-class,USS Bellerophon,NCC-74705
			Luna-class,USS Luna,NCC-80101
			unknown,USS Nightwing,NCC-8342
			Nebula-class,USS Merrimac,NCC-61827
			Huron-type,USS Huron,NCC-F1913
			Saber-class,USS Yeager,NCC-61947
			Curiosity-class,USS Ibn Majid,NCC-75710
			unknown,USS Copernicus,NCC-58637
			unknown,USS Unicorn,NCC-85117
			Akira-class,USS Avalon,NCC-63887
			unknown,USS Scovill,NCC-1598
			Saladin-class,unknown,NCC-500
			Sovereign-class,USS Enterprise,NCC-1701-E
			unknown,USS Valiant,NCC-75418
			Excelsior-class,USS Hood,NCC-42296
			unknown,USS Helin,NCC-1692
			Excelsior-class,USS Potemkin,NCC-18253
			unknown,USS Yuri Gagarin,NCC-25306
			Constitution-class,USS Excalibur,NCC-1664
			unknown,USS Excalibur,NCC-21534
			Miranda-class,USS Trial,NCC-1948
			unknown,USS Ganymede,NCC-18451
			unknown,unknown,NCC-21335
			unknown,USS Giacconi,NCC-316608
			unknown,USS Saratoga,NCC-31640
			Constitution-class (31st century),USS Armstrong,NCC-317856
			Excelsior II-class,USS Excelsior,NCC-42037
			unknown,USS Yorktown,NCC-20045
			Nebula-class,USS Lexington,NCC-30405
			Constitution-class (31st century),USS Excalibur,NCC-1664-M
			Nebula-class,USS Farragut,NCC-60597
			California-class,USS Rubidoux,NCC-12109
			Daedalus-class,USS Horizon,NCC-176
			unknown,USS Zapata,NCC-33184
			unknown,unknown,NCC-1718
			unknown,USS Hermes,NCC-10376
			Shepard-class,USS Kerala,NCC-1255
			Galaxy-class,USS Enterprise,NCC-1701-D
			Constitution-class,USS Lexington,NCC-1709
			Sutherland-class,USS Sutherland,NCC-91800
			Cardenas-class,USS Yeager,NCC-1437
			unknown,USS Aleo,NCC-1981
			Bradbury-class,USS Bradbury,NX-72307
			Constitution-class,USS Defiant,NCC-1764
			Akira-class,USS Helios,NCC-63284
			Transport Container,unknown,NCC-4000
			Steamrunner-class,USS Appalachia,NCC-52136
			unknown,USS Sarajevo,NCC-38529
			Scout,USS Columbia,NCC-621
			Excelsior-class,USS Enterprise-B,NCC-1701-B
			Osler-type,Osler,NX-75300
			unknown,unknown,NCC-19585[2]
			Constitution-class,USS Constellation,NCC-1017
			Hoover-class,USS Edison,NCC-1683
			Sydney-class,USS Nash,NCC-2010-5
			California-class,USS Alhambra,NCC-75256
			Akira-class,USS Rabin,NCC-63293
			Oberth-class,USS Copernicus,NCC-640
			unknown,USS Springfield,NCC-1963
			Miranda-class,USS Nautilus,NCC-31910
			EOF

			# wizard-names
			cat > "$l_WORKING_DIRECTORY/wizard-names.txt" <<-EOF
			Harry Potter
			Minerva McGonagall
			Albus Dumbledore
			Neville Longbottom
			Sirius Black
			Dennis Creevey
			Ron Weasley
			Hermione Granger
			Remus Lupin
			Draco Malfoy
			Alastor (Mad-Eye) Moody
			Newt Scamander
			EOF

			# written-numbers
			cat > "$l_WORKING_DIRECTORY/written-numbers.txt" <<-EOF
			one
			two
			three
			four
			five
			six
			seven
			eight
			nine
			ten
			EOF

			# written-numbers-search
			cat > "$l_WORKING_DIRECTORY/written-numbers-search.txt" <<-EOF
			one
			three
			eight
			twenty
			EOF

			# CREATE LAB - SET PERMISSIONS
			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB08-01
			OBJECTIVE:	The objective of this lab is to learn how to work with files using the commands we learned from the book; we will do so using the files listed below.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH08 folder.

			LIST THAT FILE
			1.	Using the cat command, list the contents of the frankenstein-letter.txt
				a.	Did the entire contents of the letter fit on the screen?
			2.	Using the tac command, list the contents of the frankenstein-letter.txt
				a.	What changed?
			3.	Using the more command, list the contents of the frankenstein-letter.txt
				a.	Were you able to read the contents of the file this time?
					b.	What key did you use to skip to the next text screen?
			4.	Using the less command, list the contents of the frankenstein-letter.txt
				a.	Were you able to read the contents of the file this time?
				b.	What key did you use to skip to the next text screen?
				c.	What did the arrow keys do?
				d.	Exit less.
			5.	Using the nl command, number the individual lines of the frankenstein-letter.txt and pipe it to the less command.
				a.	What word does line fifty-six start with?
					b.	Exit nl.

			HEADS AND TAILS
			6.	Using the head command, list the first ten lines of the frankenstein-letter.txt
				a.	What was the syntax of the command?
				b.	How did this command differentiate from the head command without the additional n switch?
			7.	Using the tail command, list the last eight lines of the frankenstein-letter.txt
				a.	What was the syntax of the command?
			8.	Using the head command, start on line forty of the frankenstein-letter.txt and pipe the output to tail.
				a.	What was the first line shown?
				b.	What was the last line shown?

			SORTING ALPHABETICAL
			9.	Using the cat command, list the contents of the wizard-names.txt
				a.	Is this list organized?
			10.	Using the sort command, list the contents of the wizard-names.txt
				a.	Is this list organized by first name or last name?
			11.	Using the sort command, this time, list the contents of the wizard-names.txt by the last name.
				a.	What was the syntax of the command?

			SORTING NUMERIC
			12.	Using the cat command, list the contents of the numbers.txt
				a.	Is this list organized?
			13.	Using the sort command, list the contents of the numbers.txt
				a.	Is this list organized this time?
			14.	Using the sort command and a switch, list the contents of the numbers.txt
				a.	Is this list organized this time?

			REARRANGING COLUMNS
			15.	Using the cat command, list the contents of the starfleet-ships.txt
				a.	How is this list organized?
					* The file is organized in “Class, Ship Name, Ship Number” order. *
				b.	Using the awk command, rearrange the file in “Ship Number, Ship Name and Class” order. Removing the comma field separator and replacing it with a fixed-length field.

					NOTE: This step will require research and will use the printf command.

				c.	BONUS (RESEARCH): sort this list by ship number (Hint: pipe it to a command).
				d.	How many and what are the names of the Constitution-class (31st century) ships?
				e.	How many and what are the class names of all ships named the Enterprise?
				f.	BONUS (RESEARCH): How many ships have an unknown class?

					HINT: Pipe it to the uniq command using a switch.

				g.	Using the tr command, capitalize the entire starfleet-ships.txt file using 15b or 15c as the input.

			SEARCH AND REPLACE
			16.	Using the cat command, list the contents of the lorem-ipsum.txt file.
				a.	Did you notice the mis-spellings of 'pain', 'which', 'and' and 'circumstances' in the translation?
				b.	Using the sed command, change all of the mis-spellings of those words.
			17.	Using the cat command, list the contents of the lorem-ipsum.txt file.
				a.	Why didn't the changes from the sed command remain?
				b.	BONUS (RESEARCH): Using the command from 16b, make the spelling changes permanent.

			GREP
			18.	Using the cat command, list the contents of the written-numbers.txt file.
				a.	What do you see?
			19.	Using the cat command, list the contents of the written-numbers-search.txt file.
				a.	What do you see?
			20.	Using the fgrep command, search for the terms within the written-numbers.txt file.
				a.	What do you notice?

			VIM
			21.	Using the vi program, open the wizard-names.txt file.
				a.	Add Tom Marvolo Riddle after Sirius Black.
				b.	Add Rubeus Hagrid after Newt Scamander.
				c.	Move Remus Lupin before Albus Dumbledore.
				d.	Write the file and quit.

				* Wait exactly one minute before proceeding to the next step. *

			22.	Using the cat command, list the contents of the wizard-names.txt file.
				a.	What do you see?
				b.	What happened to the line Tom Marvolo Riddle?
			23.	Using the vi command, open the wizard-names.txt file.
				a.	Delete the line He who shall not be named
				b.	Add the line Lord Voldemort after Rubeus Hagrid.

				* Wait exactly one minute before proceeding to the next step. *

			24.	Using the cat command, list the contents of the wizard-names.txt file.
				a.	What do you see?
				b.	What happened to the line Lord Voldemort?

				NOTE: I wrote a script that will change those lines every minute if they are entered. Kinda-Magic?

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 744 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# CH09 - File Permissions
function chapter_9 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable, would normally go here, this however, is a two-part lab, see below.
	#l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "There is no lab to roll forward for lab: $l_LAB."

			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "There is no lab to roll forward for lab: $l_LAB."

			cleanup_and_exit_with_code 1
			;;
		-g)
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "There is no grading module available for lab: $l_LAB."

			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "There is no grading module available for lab: $l_LAB."

			cleanup_and_exit_with_code 1

			#Answers
			#3
			#printf "E=mc2" >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/einstein.txt"

			#5
			#printf "If you can't explain it to a six-year-old, you don't understand it yourself." >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/einstein.txt"

			#7
			#chmod 660 "$l_WORKING_DIRECTORY/LAB09-02/Physicists/einstein.txt"

			#9
			#printf "Logic will get you from A to Z; imagination will get you everywhere." >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/einstein.txt"

			#12
			#printf "This must be gravity!" >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/newton.txt"

			#14
			#printf "Nature is pleased with simplicity. And nature is no dummy." >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/newton.txt"

			#16
			#printf "Any man whose errors take ten years to correct is quite a man." >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/oppenheimer.txt"

			#20
			#printf "People who boast about their I.Q. are losers." >> "$l_WORKING_DIRECTORY/LAB09-02/Physicists/hawking.txt"
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02755 "$l_WORKING_DIRECTORY"

			# CREATE LAB09-01 - SET PERMISSIONS
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# CREATE LAB DIRECTORY - SET PERMISSIONS
			mkdir "$l_WORKING_DIRECTORY/$l_LAB"
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 02755 "$l_WORKING_DIRECTORY/$l_LAB"

			# Directory made here, permissions and ownership applied below.
			mkdir "$l_WORKING_DIRECTORY/$l_LAB/Constellations"

			# CREATE FILES
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/andromeda.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/antlia.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/apus.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/aquila.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/ara.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/aries.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/auriga.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/caelum.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/camelopardalis.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/cancer.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/canes.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/canis minor.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/canis major.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/capricornus.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/cassiopeia.txt"

			# SET PERMISSIONS FOR FILES
			chmod 00644 -R "$l_WORKING_DIRECTORY/$l_LAB/Constellations"
			chmod 00744 "$l_WORKING_DIRECTORY/$l_LAB/Constellations/."
			chown labuser1:labusers1 -R "$l_WORKING_DIRECTORY/$l_LAB/Constellations"

			cat > "$l_WORKING_DIRECTORY/$l_LAB/$l_LAB" <<-EOF
			LAB:		LAB09-01
			OBJECTIVE:	The objective of this lab is to learn how to set UID and GID permissions on files, folders, and sub-folders.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH09/LAB09-01 folder.

			APPLY USER GROUP
			1.	Set the Constellations folder group to labusers2 and change into that folder.
			2.	Create a new text file in the Constellations folder called venatici.txt.
			3.	List the files in the Constellations folder.
					a.	What is the group name of the venatici.txt file?
					b.	Why?
					c.	What group name is applied to every other file in this directory?
			4.	Exit the Constellations folder.

			RECURSIVELY APPLY USER GROUP
			5.	Recursively set the Constellations folder group to labusers2 and change into that folder.
			6.	List the files in the Constellations folder.
					a.	What group name is applied to every other file in this directory?
			7.	Create a new text file in the Constellations folder called pleiades.txt.
			8.	List the files in the Constellations folder.
					a.	What is the group name of the pleiades.txt file?
					b.	Why?
			9.	Exit the Constellations folder.

			STICKY BITS
			10.	Set the group of the Constellations folder to sticky and change into that folder.
			11.	Create a new text file in the Constellations folder called pegasus.txt.
			12.	List the files in the Constellations folder.
					a.	What is the group name of the pegasus.txt file?
					b.	Why?

			NOTE: We only learned about setting group permissions in this lab; you can easily do the same with user permissions. Try it yourself!

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB/$l_LAB"

			# CREATE LAB09-02 - SET PERMISSIONS
			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# CREATE LAB DIRECTORY - SET PERMISSIONS
			mkdir "$l_WORKING_DIRECTORY/$l_LAB"
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 02755 "$l_WORKING_DIRECTORY/$l_LAB"

			# Directory made here, permissions and ownership applied below.
			mkdir "$l_WORKING_DIRECTORY/$l_LAB/Physicists"

			# CREATE FILES - SOME WITH QUOTES
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/archimedes.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/bohr.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/cox.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/curie.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/einstein.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/faraday.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/feynman.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/galilei.txt"
			printf "Intelligence is the ability to adapt to change." >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/hawking.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/kaku.txt"
			printf "Falling Apple" >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/newton.txt"
			printf "Now, I have become Death, the destroyer of worlds." >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/oppenheimer.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/pascal.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/raman.txt"
			touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/tesla.txt"

			# Create script to list all .txt files without extension.
			printf '#!/bin/bash\n' >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/physicists-list"
			printf "ls -1 *.txt | sed -e 's/\.txt$//'" >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/physicists-list"

			# SET PERMISSIONS FOR FOLDERS AND FILES
			chmod 00660 -R "$l_WORKING_DIRECTORY/$l_LAB/Physicists"
			chmod 00755 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/."
			chown labuser3:labusers1 -R "$l_WORKING_DIRECTORY/$l_LAB/Physicists"

			# Einstein is editable by labuser3 then labuser2 after security change.
			chmod 00640 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/einstein.txt"

			# Newton is editable by labuser3 and labuser2
			chown labuser2:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/newton.txt"

			# Hawking is only editable by labuser2
			chmod 00600 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/hawking.txt"
			chown labuser2:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/hawking.txt"

			# Oppenheimer is editable by labuser3 and labuser2
			chown labuser2:labusers2 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/oppenheimer.txt"

			# CREATE LAB09-02 - SET PERMISSIONS
			cat > "$l_WORKING_DIRECTORY/$l_LAB/$l_LAB" <<-EOF
			LAB:		LAB09-02
			OBJECTIVE:	The objective of this lab is to learn how to set file permissions.

			* You should be logged in as labuser3 with the password of 'P@$$w0rd'
			* You will switch to the labuser2 account using the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH09/LAB09-02 folder.

			1.  Change into the 'Physicists' folder.

			EINSTEIN
			2.  Using the groups command, list the groups for labuser1, labuser2, and labuser3.
			3.  Using the vim text editor, open the einstein.txt text file and place the following line of text in that file: "E=mc2" and exit from vim.
			4.  Using the su command, switch to the labuser2 account and navigate to the Physicists folder.
			5.  Using the vim text editor, open the einstein.txt text file and add the following text under the previous line: "If you can't explain it to a six-year-old, you don't understand it yourself," and exit from vim.
				a.	Were you able to add the text?
				b.	Why?
			6.  Exit from the labuser2 account.
			7.  Change the permissions on the einstein.txt file granting labusers1 group rw permissions; no other permissions should be set.
			8.  Using the su command, switch to the labuser2 account and navigate to the Physicists folder.
			9.  Using the vim text editor, open the einstein.txt text file and add the following line of text under the previous line: "Logic will get you from A to Z; imagination will get you everywhere," and exit from vim.
				a.	Were you able to add the text?
				b.	If not, then why?
			10. Exit from the labuser2 account.

			FILES OWNED BY LABUSER2
			11. Find the physicists whose files are owned by labuser2.
				a.	How many are there?
				b.	Who are they?

			NEWTON
			12. Using the vim text editor, open the newton.txt text file and add the following line of text under the existing line: "This must be gravity!" and exit from vim.
				a.	Were you able to add the text?
				b.	If so, then why?
			13. Using the su command, switch to the labuser2 account and navigate to the Physicists folder.
			14. Using the vim text editor, open the newton.txt and add the following text to that file: "Nature is pleased with simplicity. And nature is no dummy," and exit from vim.
				a.	Were you able to add the text?
				b.	If so, then why?
			15. Exit from the labuser2 account.

			REMAINING FILES
			16. Using the vim text editor, open the remaining two files owned by labuser2. In the file, you can edit and add the text under the existing line: "Any man whose errors take ten years to correct is quite a man," and exit from vim.
				a.	Which file were you able to edit?
			17. Using the su command, switch to the labuser2 account and navigate to the Physicists folder.
			18. Add only the permissions needed for labuser3 to edit and save the file that could not be edited in the previous step.
			19. Exit from the labuser2 account.
			20. Using the vim text editor, open the remaining unedited files owned by labuser2.  Add the following text under the existing line: "People who boast about their I.Q. are losers," and exit from vim.
				a.	Were you able to update the file this time?
				b.	Why?

			LISTING GROUPS
			21. Type the following command: "id -nG labuser3"
				a.	What groups is labuser3 a member of?
			22. Type the following command: "id -nG labuser2"
				a.	What groups is labuser2 a member of?

			EXECUTABLE FLIES
			23. Type the following command: "cat physicists-list"
				a.	What does it look like this file does?
			24. Type the following command: “./physicists-list”
				a.	What happened?
			25. Add the execute permission to the user and group of the physicists-list file. Then Type the following command: “./physicists-list” again.
				a.	What happened?

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH10 - SELinux and AppArmor (No Labs)
function chapter_10 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH11 - File Compression and Storage
function chapter_11 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#Answers
			#1
			# tar -lf pghzoo.tar.gz

			#2
			# tar -xvf pghzoo.tar.gz

			#4
			# rm pghzoo.tar.gz

			#5
			# cd "Pittsburgh Zoo"
			# touch Lion
			# touch "Black Bear"
			# touch Chimpanzee

			#6
			# tar -czvf pghzoo.tar.gz "Pittsburgh Zoo"

			#7
			# zip -r pghzoo.zip "Pittsburgh Zoo"/
			# unzip -l pghzoo.zip
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown labuser1:labusers1 $l_WORKING_DIRECTORY
			chmod 02775 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# CREATE THE ZOO
			mkdir "$l_WORKING_DIRECTORY/Pittsburgh Zoo"

			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Aardvark"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Anteater"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Beaver"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Camel"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Donkey"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Eland"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Giraffe"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Grizzly Bear"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Kangaroo"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Lemur"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Red Panda"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Sloth"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Tiger"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Wolf"
			touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Zebra"

			cd "$l_WORKING_DIRECTORY"
			tar -czf pghzoo.tar.gz "Pittsburgh Zoo" 2>/dev/null
			rm -r "$l_WORKING_DIRECTORY/Pittsburgh Zoo/"

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB11-01
			OBJECTIVE:	The objective of this lab is to learn how to work with file compression and storage.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH11 folder.

			UNCOMPRESS ARCHIVE
			1.  Using the tar command, list the contents of the pghzoo.tar.gz archive.
				a.	What did you notice?
				b.	What options did you use?
			2.  Using the tar command, uncompress the pghzoo.tar.gz archive verbosely.
				a.	What did you notice?
			3.  List the contents of the CH11/Pittsburgh Zoo folder.
				a.	Who is the owner of the files, and what are the permissions?
				b.	What are the permissions of the CH11 folder?
			4.  Remove the pghzoo.tar.gz archive file.
			5.  Go into the Pittsburgh Zoo folder.
				a.	Using the touch command, create a file called 'Lion'
				b.	Using the touch command, create a file called 'Black Bear'
				c.	Using the touch command, create a file called 'Chimpanzee'
				d.	Change from the Pittsburgh Zoo folder.

			CREATE A TARBALL
			6.  From the CH11 folder, create a new archive of the Pittsburgh Zoo folder, use the verbose switch and ensure that you gzip the file. Use the same filename as before pghzoo.tar.gz
				a.	Ensure the new archive has all of the new files.
				b.	Remove the Pittsburgh Zoo folder.
				c.	Restore your archive.
				d.	Are the three new file you created in the Pittsburgh Zoo folder?

			COMPRESS A DIRECTORY AND FILES
			7.  From the CH11 folder, create a compressed file containing the Pittsburgh Zoo folder. Use pghzoo.zip as the filename.
				a.	What do you notice?
				b.	Use the "unzip" command to list the contents of the 'pghzoo.zip' archive.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH12 - User and Group Management
function chapter_12 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable, would normally go here, this however, is a two-part, see below.
	#l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "There is no lab to roll forward for lab: $l_LAB."

			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "There is no lab to roll forward for lab: $l_LAB."

			cleanup_and_exit_with_code 1
			;;
		-g)
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "There is no grading module available for lab: $l_LAB."

			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "There is no grading module available for lab: $l_LAB."

			cleanup_and_exit_with_code 1

			#ANSWERS LAB12-01
			#3
			# a, b, e, f
			#useradd -m -d /home/labuser4 -c "Lab User 4" -s /bin/false labuser4
			# c
			#usermod -g labusers1 labuser4
			# d
			#usermod -a -G sudo labuser4
			# g
			#echo 'labuser4:P@$$w0rd' | chpasswd

			#4
			#usermod -s /bin/bash labuser4

			#7
			#printf "This is a private system used for the Linux System Administration CIT-220 class." >> /etc/motd

			#10
			# groupadd labuser4
			#usermod -a -G finance labuser1
			#usermod -a -G finance labuser2
			#usermod -a -G finance labuser4

			#11
			#mkdir finance
			#chown labuser4:finance finance
			#chmod 02770 finance

			#12
			#touch budget
			#chown labuser4:labusers1 budget

			#touch accounts-payable
			#chown labuser2:labusers1 accounts-payable
			#printf "$23,565" >> budget

			#15
			#echo 'labuser4:pAsswOrd' | chpasswd
			#echo 'labuser4:P@$$w0rd' | chpasswd

			#ANSWERS LAB12-02
			#1
			# a, b, d, f
			#useradd -m -d /home/labuser5 -c "Lab User 5" -s /bin/bash labuser5
			# c
			#groupadd labusers5
			#usermod -g labusers5 labuser5
			# d
			#usermod -a -G labusers1 labuser5
			# g
			#echo 'labuser5:P@$$w0rd' | chpasswd

			#2
			#quotacheck -avugc

			#3
			#edquota -u labuser5

			#4
			#for i in {1..10}; do echo "IIIIIIIIIIIIIIIIIIII" >> file.labuser5; done

			#5
			#quota labuser5

			#6
			#quotaon "/Lab Files/CH12/LAB12-02/"

			#7
			#quota
			#cp /etc/* "/Lab Files/CH12/LAB12-02"
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02775 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			# Set the lab number variable LAB12-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# Remove Users and Groups created by students in the lab.
			test_user labuser4
			test_group finance

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB12-01
			OBJECTIVE:	The objective of this lab is to learn how to work with users and groups.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* You should be logged in as labuser2 with the password of 'P@$$w0rd'
			* You should be logged in as labuser3 with the password of 'P@$$w0rd'
			* You will create a labuser4 account.
			* To complete this lab, you must be in the CH12 folder.

			LEARNING ABOUT USERS
			1.  Using the getent command, interrogate the passwd database for labuser1.
				a.	What did you notice?
			2.  Using the getent command, interrogate the passwd database for labuser2 and labuser3.
				a.	What did you notice?
				b.	What was different about each of these accounts?
			3.  Create a new user:
				a.	The username must be labuser4.
				b.	Set the real name to Lab User 4.
				c.	The users primary group must be labusers1.
				d.	The user must be a member of the sudo group.
				e.	Set the login shell to /bin/false.
				f.	The user must have a home directory set to /home/labuser4
				g.	Set the password to P@$$w0rd.

				NOTE: You will have to use the sudo command for these steps.

			4.  Using the su command, switch to the labuser4 account.
				a.	What happened and why?
			5.  Update the labuser4 shell from /bin/false to /bin/bash.
			6.  Using the su command, switch to the labuser4 account.
				a.	What happened and why?

			LOGIN MESSAGE
			7.  Using the vim editor, create an /etc/motd file. Place the following line of text in that file: "This is a private system used for the Linux System Administration CIT-220 class."
				a.	Write and exit that file.

					NOTE: You will have to use the sudo command for this step.

			8.  Log out of the labuser1 account.
			9.  Log in to the labuser1 account
				a.	What did you notice?

			LEARNING ABOUT GROUPS
			10. Create a new group:
				a.	Name the group "finance"
				b.	Add users labuser1, labuser2, and labuser4 to this group.

			11. In the CH12 folder, create a directory called “finance”.
				a.	Change the ownership of the finance directory with labuser4 as the owner and finance as the group.
				b.	Change the permissions of the finance folder to 770

					NOTE: You will have to use the sudo command for this step.

			12. Using the su command, switch to the labuser4 account.
				a.	Create a file called budget in the finance folder.
				b.	What permissions does this file have?
				c.	Who is the owner of the budget file?
				d.	Exit from the labuser4 account.

			13. Using the su command, switch to the labuser2 account.
				a.	Create a file called accounts-payable in the finance folder.
				b.	What permissions does this file have?
				c.	Who is the owner of the budget file?
				d.	Add $23,565 to the budget file using the vim editor and exit from vim.
				e.	Why were you able to modify this file?
				f.	Exit from the labuser2 account.

			14. Using the su command, switch to the labuser3 account.
				a.	Change to the finance folder.
				b.	Why could you not change into the folder?
				c.	Exit from the labuser3 account.

			CHANGING PASSWORDS
			15. Change the password of labuser4 to pAsswOrd.

			16. Using the su command, switch to the labuser4 account.
				a.	Did the new password work?
				b.	From the labuser4 account, change the password back to P@$$w0rd.
				c.	Exit from the labuser4 account.

			PASSWORD AGE
			17. List the password ages for labuser1, labuser2, labuser3 and labuser4.
				a.	What do you notice?

			WHO ARE YOU?
			18. Using the whoami command, discover who you are.
			19. Using the w command, discover whom you're logged in as.
			20. Using the su command, switch to the labuser4 account.
				a.	Use the "w" command.
				b.	What do you see?
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"

			# CREATE LAB - SET PERMISSIONS
			# Set the lab number variable LAB12-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# Remove Users and Groups created by students in the lab.
			test_user labuser5
			test_group labuser5

			# Cleanup residue left from previous labs if it exists.
			if [[ $(mount | grep "$l_WORKING_DIRECTORY/$l_LAB-Q") ]]; then
				info "  Turning off disk quota for /dev/sdb1."
				quotaoff "/Lab Files/CH12/LAB12-02-Q"
			fi

			if [[ $(mount | grep "$l_WORKING_DIRECTORY/$l_LAB-Q") ]]; then
				info "  Unmounting the quota disk /dev/sdb1"
				umount --lazy "$l_WORKING_DIRECTORY/$l_LAB-Q"
			fi

			if [ -d "$l_WORKING_DIRECTORY/$l_LAB-Q" ]; then
				info "  Removing the $l_WORKING_DIRECTORY/$l_LAB-Q directory."
				rm -r "/Lab Files/CH12/LAB12-02-Q/*"
			fi

			info "Removing any old LAB12-02-Q residue from /etc/fstab."
			sed -i -e '/# Disk\/User Quota Lab: LAB12-02-Q/d' /etc/fstab
			sed -i -e '/\/dev\/sdb1      \/labs\/CH12\/LAB12-02-Q	ext4	defaults,usrquota,grpquota 0 0/d' /etc/fstab

			#Setup Quota Disk
			wipefs /dev/sdb --all --force --quiet
			sgdisk -g /dev/sdb >> /dev/nul
			sgdisk -n 1:0:262110 -t 1:8300 /dev/sdb >> /dev/nul
			mkfs.ext4 /dev/sdb1 >> /dev/null 2>&1

			mkdir "$l_WORKING_DIRECTORY/$l_LAB-Q"
			printf "# Disk/User Quota Lab: LAB12-02-Q\n/dev/sdb1      /labs/CH12/LAB12-02-Q	ext4	defaults,usrquota,grpquota 0 0\n" >> /etc/fstab
			mount /labs/CH12/LAB12-02-Q

			info "  Setting the ownership and permissions for lab number: $l_LAB quota directory."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB-Q"
			chmod 02770 "$l_WORKING_DIRECTORY/$l_LAB-Q"

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB12-02
			OBJECTIVE:	The objective of this lab is to learn how to work with and set disk storage quotas.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* You will create a labuser5 account.
			* To complete this lab, you must be in the CH12 folder.
			* Devices used: /dev/sdb
				NOTE: This volume is setup and ready to use.


			QUOTAS
			1.  Create a new user:
				a.	The username must be labuser5.
				b.	Set the real name to Lab User 5.
				c.	The users primary group must be labusers5.
				d.	The user should be a member of the labusers1 group.
				e.	Set the login shell to /bin/bash.
				f.	The user must have a home directory set to /home/labuser5
				g.	Set the password to P@$$w0rd.
			2.  Using the quotacheck command, update the quota volume mounted at: /Lab Files/CH12/LAB12-02-Q
			3.  Using the edquota command, edit the quota for the labuser5 user, setting the quota as shown below, then exit edquota.
				Filesystem                   blocks       soft       hard     inodes     soft     hard
				/dev/sdb1                         0         50        100          0        0        0
			4.  Using the su command, switch to the labuser5 account and navigate to the /Lab Files/CH12/LAB12-02-Q folder.
				a.	Using the vim editor, create a new file called file.labuser5, inside of that file place ten (10) lines of any single CAPITAL letter. Each line should be twenty (20) characters wide.
				b.	Exit from the labuser5 account.
			5.  Using the quota command, check the quota for labuser5.
				a.	What do you see?
			6.	Turn the quota system on for /Lab Files/CH12/LAB12-02-Q.
			7.  Using the su command, switch to the labuser5 account and navigate to the /Lab Files/CH12/LAB12-02-Q folder.
				a.	Type quota and view the output.
				b.	Using the cp command, copy all of the /etc folder into the /Lab Files/CH12/LAB12-02-Q folder.
				c.	What happened?
				d.	Exit from the labuser5 account.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH13 - Account Security (No Labs)
function chapter_13 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH14 - Logging Services (No Labs)
function chapter_14 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH15 - Linux Devices (No Labs)
function chapter_15 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH16 - Hardware Troubleshooting
function chapter_16 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS
			#1
			#uptime

			#2
			#cat /proc/cpuinfo

			#3
			#iostat -c

			#4
			#free

			#5
			#vmstat

			#6
			#swapon -s
			#swapoff /swap.img

			#7
			#cat /proc/ioports

			#8
			#lspci

			#9
			#lsusb

			#10
			#lsdev

			#11
			#dmidecode

			#12
			#lshw
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02750 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB16-01
			OBJECTIVE:	The objective of this lab is to learn how to troubleshoot hardware.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH16 folder.

			TROUBLESHOOTING HARDWARE
			1.  Discover how long your server has been running.
			2.  Using the cat command, list the contents of the processor.
				a.	What did you notice?
			3.  What are the current CPU utilization statistics?
			4.  Discover how much free memory is available.
			5.  Get a detailed usage of your memory.
			6.  List the currently active memory page file.
				a.	Is it an actual file or a partition?
				b.  Disable the swap.img file.

			PHYSICAL DEVICES
			7.  List all communication ports open to the processor.
				a.	What command did you use?
			8.  List all of the PCI devices.
			9.  List all of the USB devices.
			10. List all of the devices.
			11. Decode the DMI devices.
			12. List all of the hardware.
			13. In 200 words, describe what each of the commands under the physical devices section does and how they relate to each other. Cite at least two outside resources using APA.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH17 - Kernel Modules (No Labs)
function chapter_17 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH18 - Storage Concepts
function chapter_18 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			# ANSWERS LAB18-01
			#2
			#wipefs /dev/sdc --all --force --quiet
			#sgdisk -g /dev/sdc >> /dev/nul
			#sgdisk -n 1:0:262110 -t 1:8300 /dev/sdc >> /dev/nul

			#4
			#mkfs.ext4 /dev/sdc1 >> /dev/null 2>&1

			#5
			# mkdir /labs/CH18/LAB18-01

			#6
			#printf "# Disk Lab: LAB18-01\n/dev/sdc1      /labs/CH18/LAB18-01	ext4	defaults 0 0\n" >> /etc/fstab

			#7
			#mount /labs/CH18/LAB18-01

			#8
			#chown labuser1:labusers1 /labs/CH18/LAB18-01
			#chmod 02770 /labs/CH18/LAB18-01

			#9
			#su labuser2
			#mkdir /labs/CH18/LAB18-01/cats
			#mkdir /labs/CH18/LAB18-01/dogs

			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02775 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# Cleanup residue left from previous labs if it exists.
			if [[ $(mount | grep "$l_WORKING_DIRECTORY/$l_LAB") ]]; then
				info "  Unmounting the disk /dev/sdc1"
				umount --lazy "$l_WORKING_DIRECTORY/$l_LAB"
			fi

			info "Removing any old LAB18-01 residue from /etc/fstab."
			sed -i -e '/# Disk Lab: LAB18-01/d' /etc/fstab
			sed -i -e '/\/dev\/sdc1/d' /etc/fstab

			# Wipe /dev/sdv
			wipefs /dev/sdc --all --force --quiet

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:	LAB18-01
			OBJECTIVE: 	The objective of this lab is to learn how to set up and install a new disk.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH16 folder.
			* Devices used: /dev/sdc

			1.  Using the lsblk command, locate and identify disk /dev/sdc.
			2.  Using the fdisk command, edit the partition table on /dev/sdc.
				a.	Create a new gpt partition (g) on /dev/sdc.
				b.	Create a new partition (n) on /dev/sdc.
				c.	List the new partition (p) on /dev/sdc.
				d.	Write the partition table (w) on /dev/sdc.
			3.  Using the lsblk command, locate and identify disk /dev/sdc1.
			4.  Using the mkfs.ext4 command, create a new filesystem on the /dev/sdc1 disk.
			5.  Create a new folder called LAB18-01 in the /labs/CH18 folder.
			6.  Using the vim editor, update the /etc/fstab file mounting this new device to the directory you created in the first step.
				a.	Set /dev/sdc1 to mount at /labs/CH18/LAB18-01.
			7.  Mount the newly created device.
			8.  Set the volume ownership and permissions:
				a.	Change the ownership of the LABS18-01 folder to labuser1:labusers1.
				b.	Set the permissions of the LABS18-01 folder to 02770.
			9.  Change to the labuser2 account.
				a.	Create a folder called pets in the LABS18-01 folder.
				b.	Create two files in the pets folder; one called “Dogs” and another called “Cats.”
				c.	Exit from the labuser2 account.

				NOTE:	To show me you did this correctly, attach an additional screenshot to your lab report showing the output from the df -h command.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH19 - Storage Configuration
function chapter_19 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable, would normally go here, this however, is a two-part, see below.
	#l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "There is no lab to roll forward for lab: $l_LAB."

			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "There is no lab to roll forward for lab: $l_LAB."

			cleanup_and_exit_with_code 1
			;;
		-g)
			# Set the lab number variable LAB09-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "There is no grading module available for lab: $l_LAB."

			# Set the lab number variable LAB09-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "There is no grading module available for lab: $l_LAB."

			cleanup_and_exit_with_code 1

			#ANSWERS LAB19-01
			#2
			#pvcreate /dev/sdd

			#4
			#vgcreate vg1 /dev/sdd

			#6
			#lvcreate -L 124M -n CIT220 vg1

			#8
			#mkfs.ext4 -F -m 0 -L "CIT220-LVM" /dev/vg1/CIT220

			#9
			# mkdir /labs/CH19/LAB19-01
			#printf "/dev/mapper/vg1-CIT220 /labs/CH19/LAB19-01 ext4 defaults  0    0\n" >> /etc/fstab

			#10
			#pvcreate /dev/sde

			#12
			#vgextend vg1 /dev/sde

			#14
			#lvextend -L +124M /dev/vg1/CIT220

			#ANSWERS LAB19-02
			#1
			#mdadm -C /dev/md0 -l 5 -n 3 /dev/sdf /dev/sdg /dev/sdh

			#2
			#more /proc/mdstat

			#3
			#mkfs.ext4 /dev/md0 

			#4
			#mkdir /labs/CH19/LAB19-02
			#printf "/dev/md0 /labs/CH19/LAB19-02 ext4 defaults  0    0\n" >> /etc/fstab

			#5
			#mount /labs/CH19/LAB19-02

			#6
			#chown labuser1:labusers1 /labs/CH19/LAB19-02
			#chmod 02770 /labs/CH19/LAB19-02
			;;
		-i)
			info "There is no lab available for this chapter."
			#info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02775 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			# Set the lab number variable LAB19-01.
			l_LAB=$(create_lab $l_CH_NUM)
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# Cleanup residue left from previous labs if it exists.
			if [[ $(mount | grep /dev/mapper/vg1-CIT220) ]]; then
				info "  Unmounting the volume group /dev/mapper/vg1-CIT220"
				umount --lazy /dev/mapper/vg1-CIT220
			fi

			info "Removing any old LAB19-01 residue from /etc/fstab."
			sed -i -e '/# Volume Group Lab: LAB19-01/d' /etc/fstab
			sed -i -e '/\/dev\/mapper\/vg1-CIT220/d' /etc/fstab

			if [ -b /dev/mapper/vg1-CIT220 ]; then
				info "  Removing Volume Group."

				vgchange -a n vg1 >> /dev/null 2>&1
				lvremove /dev/vg1/CIT220 >> /dev/null 2>&1
				vgremove vg1 >> /dev/null 2>&1
				pvremove /dev/sdd >> /dev/null 2>&1
				pvremove /dev/sde >> /dev/null 2>&1
			fi

			info "  Resetting disks."
			wipefs /dev/sdd --all --force --quiet
			sgdisk --zap /dev/sdd >> /dev/nul

			wipefs /dev/sde --all --force --quiet
			sgdisk --zap /dev/sde >> /dev/nul

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:	LAB19-01
			OBJECTIVE: 	The objective of this lab is to learn how to set up a new logical volume, expand a logical volume and write to a logical volume.

			* You should be logged in as labuser1 with the password of 'P@$$w0rd'
			* To complete this lab, you must be in the CH19 folder.
			* Devices used: /dev/sde, /dev/sdf

			LOGICAL VOLUMES
			1.  Using the lsblk command, locate the two 128Mb disks.
			2.  Using the pvcreate command, take the first disk /dev/sdd and create a physical volume on this disk.
			3.  Using the pvdisplay command, verify the previous command.
			4.  Using the vgcreate command, create a volume group called vg1 on /dev/sdd
			5.  Using the vgdisplay command, verify the previous command.
			6.  Using the lvcreate command, create a 124Mb logical volume on vg1 with the name CIT220
			7.  Force those changes using the vgchange --available y command.
			8.  Make an ext4 filesystem on the new logical volume at /dev/vg1/CIT220, do not reserve blocks and apply the label CIT220-LVM to the volume.

				NOTE: The following warning is normal for previously written disks; choose y to continue:
				WARNING: ext4 signature detected on /dev/vg1/CIT220 at offset 1080. Wipe it? [y/n]:

			9.  Mount the new logical volume:
				a.	Make a new folder called LAB19-01 under the folder /labs/CH19
				b.	Update the filesystem table and mount the new volume at /labs/CH19/LAB19-01.
				c.	Using the mount command, mount the filesystem.
			10. Using the pvcreate command, take the second disk /dev/sde and create a physical volume on this disk.
			12. Using the vgdisplay command, list the volume group vg1.
				a.	Note the VG size.
			13. Using the vgextend command, extend the volume group vg1 onto the /dev/sde physical volume.
			14. Using the pvdisplay command, list the physical volumes.
			15. Using the lvextend command, extend the /dev/vg1/CIT220 volume by +124Mb
			16. Using the vgdisplay command, list the volume group vg1.
				a.	Did the VG size change?
			17. Using the lsblk command, locate the two 128Mb disks.
				a.	Ensure the extents have been expanded.
			18. Set the volume ownership and permissions:
				a.	Change the ownership of the LABS19-01 folder to labuser1:labusers1.
				b.	Set the permissions of the LABS19-01 folder to 02770.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"

			# CREATE LAB - SET PERMISSIONS
			# Set the lab number variable LAB19-02.
			l_LAB=$(create_lab $l_CH_NUM 2)
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# Cleanup residue left from previous labs if it exists.
			if [ -b /dev/md0 ]; then
				if [[ $(mount | grep /dev/md0) ]]; then
					info "  Unmounting the RAID volume /dev/md0"
					umount --lazy /dev/md0
				fi

				info "Removing any old LAB19-02 residue from /etc/fstab."
				sed -i -e '/# RAID Lab: LAB19-02/d' /etc/fstab
				sed -i -e '/\/dev\/md0/d' /etc/fstab

				info "  Stopping RAID volume /dev/md0"
				mdadm --stop /dev/md0

				info "  Resetting disks."
				wipefs /dev/sdf --all --force --quiet
				sgdisk --zap /dev/sdf >> /dev/nul

				wipefs /dev/sdg --all --force --quiet
				sgdisk --zap /dev/sdg >> /dev/nul

				wipefs /dev/sdh --all --force --quiet
				sgdisk --zap /dev/sdh >> /dev/nul
			fi

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB19-02
			OBJECTIVE:	The objective of this lab is to learn how to set up and install a new disk.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH19 folder to complete this lab.
			* Devices used: /dev/sdf, /dev/sdg, /dev/sdh

			RAID VOLUME
			1.  Using the mdadm command, use the devices /dev/sdf, /dev/sdg, and /dev/sdh to create a RAID 5 volume at /dev/md0.
			2.  List your running volume.
			3.  Make an ext4 filesystem on the new RAID volume at /dev/md0, do not reserve blocks, and apply the label CIT220-RAID to the volume.
			4.  Mount the new logical volume:
				a.	Make a new folder called LAB19-02 under the folder /labs/CH19
				b.	Update the filesystem table and mount the new volume at /labs/CH19/LAB19-02.
			5.  Using the mount command, mount the filesystem
			6.  Set the volume ownership and permissions:
				a.	Change the ownership of the LAB19-01 folder to labuser1:labusers1.
				b.	Set the permissions of the LAB19-01 folder to 02770.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow

			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH20 - Network Configuration (No Labs)
function chapter_20 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH21 - Network Troubleshooting (No Labs)
function chapter_21 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH22 - Linux Firewalls
function chapter_22 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB21-01
			#2
			#iptables -A INPUT -p icmp -j DROP

			#3
			#iptables -D INPUT -p icmp -j DROP
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02770 "$l_WORKING_DIRECTORY"

			# Reset iptables to default.
			iptables -F

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB22-01
			OBJECTIVE:	The objective of this lab is to learn how to use the IPTables firewall to block and unblock traffic.

			INSTRUCTIONS: These labs will test your ability to actively research how to perform a required action on a Linux operating system. All questions asked (below) should be included in a lab report. This lab report should be written in Microsoft Word and include a numbered list corresponding to the task (below). This list must include a clear screenshot of the command and its output. Please follow the instructions for submitting this assignment on Blackboard.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH22 folder to complete this lab.

			IPTABLES
			1.  Open a terminal window (cmd prompt - Windows) or (terminal - macOS)and send a continuous ping to your Linux server's IP address.
			2.  From the Linux server, add an iptables rule to drop all ICMP packets.
					a.	What happened to the ping running in the other window?
			3.  Remove this rule from iptables.

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH23 - Orchestration (No Labs)
function chapter_23 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH24 - Automate Tasks
function chapter_24 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB24-01
			#1
			#   at now + 5 minute
			#at>/bin/sh /labs/CH24/lab2401.sh
			#at>[CTRL]+[D]
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02770 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			# Create a script to display a message.
			printf '#!/bin/sh' >> "$l_WORKING_DIRECTORY/lab2401.sh"
			printf "wall \"It's time to stop working on these labs.\"\n" >> "$l_WORKING_DIRECTORY/lab2401.sh"
			chown labuser1:labusers1 "$l_WORKING_DIRECTORY/lab2401.sh"
			chmod 770 "$l_WORKING_DIRECTORY/lab2401.sh"

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:	LAB24-01
			OBJECTIVE: 	The objective of this lab is to learn how to automate impromptu tasks.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH24 folder to complete this lab.

			SCHEDULING JOBS
			1.  Using the at command, run the lab2401.sh script located in the CH24 folder in five (5) minutes.
				a.	View the job in the queue using the atq command.
				b.	Did it run?
				c.	What printed on the screen in five minutes?

					NOTE:	You will have to pass the at command the string (shown below), don't forget to exit at with the [CTRL]+[D] keys.
							/bin/sh /labs/CH24/lab2401.sh

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH25 - Localization
function chapter_25 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB25-01
			#1
			#date

			#2
			#hwclock

			#3
			#ls -l /etc/localtime

			#4
			#ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
			#ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime #(reset)

			#5
			#datetimectl

			#6
			#locale -a

			#7
			#localectl status
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02770 "$l_WORKING_DIRECTORY"

			# Reset LOCALE
			ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime 

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:	LAB25-01
			OBJECTIVE: 	The objective of this lab is to learn how to manipulate the locale settings.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH25 folder to complete this lab.

			DATE/TIME
			1.  Display the system time.
			2.  Display the hardware clock.
			3.  Display the current time zone setting.
				a.	What is it set to?
			4.  Change the time zone to /usr/share/zoneinfo/America/New_York by updating the symbolic link to this file.
			5.  Using the datetimectl command, view the time settings.
				a.	Is NTP active?
			6.  Using the local -a command, list the currently installed locale's
				a.	What locales are installed?
			7.  Using the localectl command, view the current keyboard layout.
				a.	What do you notice about the keyboard type?

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH26 - Bash Scripting Essentials
function chapter_26 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB26-01
			#1
			#    #!/bin/bash
			#    for i in {1..10}; do         echo $i; done
			#    for i in {1..10..2}; do      echo $i; done
			#    for i in {1..10..5}; do      echo $i; done

			#2
			#    #!/bin/bash
			#    moon_pct_diff=.165
			#    read -p "Enter your weight on the earth's surface: " weight
			#    pct_weight=$(echo "$weight*$moon_pct_diff" | bc)
			#    moon_weight=$(printf %.2f $(echo "scale=2;($weight-$pct_weight)" | bc))
			#    echo "Your weight on the moon is:" $moon_weight
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02770 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:	LAB26-01
			OBJECTIVE: 	The objective of this lab is to learn how to write BASH scripts.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH26 folder to complete this lab.

			BASH
			1.  Using your book and the Internet as a reference, write a BASH script that meets the following criteria:
				a.	Using a looping structure, count from 1-10 in one-step increments.
				b.	Using a looping structure, count from 1-10 in two-step increments.
				c.	Using a looping structure, count from 1-10 in five-step increments.
			2.  Using your book and the Internet as a reference, write a BASH script that calculates the difference between your weight on the Earth and your weight on the moon. As a reference, you are 16.5% lighter on the moon. The BASH script must meet the following criteria:
				a.	You must use a constant variable that holds the percentage difference.
				b.	You must prompt the user to enter their weight on Earth.
				c.	If your moon weight results in a decimal, you must truncate that decimal to two decimal places.
				d.	You must print your weight on the moon.
				e.	Your logic must be correct.
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH27 - Git
function chapter_27 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1

			#ANSWERS LAB26-01
			#3
			#mkdir /labs/CH26/lab26-01

			#4
			#cd /labs/CH26/lab26-01

			#6
			#git config --global user.email "matthew.kisow@icloud.com"
			#git config --global user.name "DoctorKisow"

			#7
			#git config --global init.defaultBranch main

			#8
			#ssh-keygen -t ed25519 -C "matthew.kisow@icloud.com"
			#eval "$(ssh-agent -s)"
			#ssh-add ~/.ssh/id_ed25519
			#cat ~/.ssh/id_ed25519.pub

			#10
			#printf "#LAB26-02\n" >> README
			#printf "**LAB26-02** - A lab that shows me how to use Git.\n" >> README
			#printf "Dr. Matthew Kisow <mkisow@ccac.edu>\n" >> README
			#printf "Copyright &copy; D. Matthew Kisow 2022-2023.\n" >> README

			#11
			#git init

			#12
			#git add README.md

			#13
			#git commit -m "first comit"

			#14
			#git remote add origin https://github.com/DoctorKisow/lab27-02.git

			#15
			#git push -u origin main
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			info "  Creating the chapter: $l_CH_NUM directory."
			l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			chmod 02770 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#SETUP GIT - CLONE lsRules
			cd "$l_WORKING_DIRECTORY"
			git clone https://github.com/DoctorKisow/lsRules.git &>/dev/null

			cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			LAB:		LAB27-01
			OBJECTIVE:	The objective of this lab is to learn how to use the git command and GitHub.

			* You should be logged in as labuser1 with the password 'P@$$w0rd'
			* You must be in the /labs/CH27 folder to complete this lab.

			GIT
			1.  List the contents of the /labs/CH27 folder.
				a.	What do you see?
			2.  The lsRules is a clone of a script from my public repository on GitHub.
			3.  Make a new folder in the /labs/CH27 folder; call it lab27-01"
			4.  Change to the lab27-01 folder.
			5.  Create a personal account on GitHub (unless you already have one).
			6.  Set your global identity using the following two commands:
				a.	git config --global user.email "email@acd.ccac.edu"
				b.	git config --global user.name "Your Name"

				NOTE:	The email address and name values must match your GitHub account name and email address.

			7.  Set the main branch default as follows:
				a.	git config --global init.defaultBranch main
			8.  Generate an ssh key using the following command:
				a.	ssh-keygen -t ed25519 -C "email@acd.ccac.edu"
				b.	Start the ssh-agent and add the key you just generated.
				c.	Add that ssh key to your GitHub account.

				NOTE: Review the references below before coming to me with questions.

			9.  On GitHub, create a new repository called "lab27-01" and copy the SSH of that repository.
			10. Create a README.md file and place the following information in the first four lines (minus the letters a-d, of course):
				a.	# LAB27-01
				b.	**LAB27-01** - A lab that shows me how to use Git.
				c.	FirstName LastName <email@acd.ccac.edu>
				d.	Copyright &copy; FirstName LastName 2023.
			11. Initialize the git repository.
				a.	What happened?
			12. Add the README.md file to the repository.
			13. Commit your changes.
				a.	What happened?
			14. Add your GitHub repository.
				a.	git remote add origin <HTTPS URL FROM GITHUB>
			15. Push your changes.
			16. Make several updates, add files, change the contents of the README.md file, follow steps 12-15 to update your repository, and look for those changes on GitHub.

			REFERENCES
			https://www.geeksforgeeks.org/how-to-push-folders-from-local-pc-to-github-using-git-commands/
			https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=linux
			https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

			# Copyright © CC BY-NC-ND 4.0, (2022 - 2023)
			# Dr. Matthew Kisow
			EOF

			info "  Setting the ownership and permissions for lab number: $l_LAB."
			chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH28 - Server Roles (No Labs)
function chapter_28 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

#CH29 - Security Best Practice (No Labs)
function chapter_29 ()
{
	local l_OPER="$1"
	local l_CH_NUM="$2"
	local l_WORKING_DIRECTORY=""
	local l_LAB=""

	# Verify the function was passed the correct operation.
	if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
		error "Function was passed an expression that was out of range."
	fi

	# Set the lab number variable.
	l_LAB=$(create_lab $l_CH_NUM)

	case "$l_OPER" in
		-c)
			info "There is no lab to roll forward for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-g)
			info "There is no grading module available for lab: $l_LAB."
			cleanup_and_exit_with_code 1
			;;
		-i)
			info "Setting up the labs for chapter: $l_CH_NUM."

			info "  There are no labs available for this chapter."
			#info "  Setting up the labs for chapter: $l_CH_NUM."

			# SET SECURITY
			#info "  Creating the chapter: $l_CH_NUM directory."
			#l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

			#info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
			#chown root:labusers1 "$l_WORKING_DIRECTORY"
			#chmod 02754 "$l_WORKING_DIRECTORY"

			# CREATE LAB - SET PERMISSIONS
			#info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

			#cat > "$l_WORKING_DIRECTORY/$l_LAB" <<-EOF
			#EOF

			#info "  Setting the ownership and permissions for lab number: $l_LAB."
			#chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
			#chmod 644 "$l_WORKING_DIRECTORY/$l_LAB"
			;;
		-r)
			info "Resetting Lab: $l_CH_NUM."
			backup_lab $l_CH_NUM
			chapter_$l_CH_NUM -i $l_CH_NUM
			info "Lab $l_CH_NUM reset complete."
			;;
	esac
}

# *************************** begin of script proper ***************************
process_command_line_options "${@}"
internal_consistency_option_checks

# Only clear screen and present script banner when GAFI is zero.
if ! ((g_ARG_FINISH_INSTALL==1)); then
	clear
	script_banner
fi

# Update Notice
if ((g_ARG_UPDATE==0)); then
	update_notice
fi

# Process Options
if ((g_ARG_CHANGE_LAB==1)); then
	if [ $EUID -ne 1000 ]; then
		warning "This option can only be run by your instructor."
		cleanup_and_exit_with_code 1
	else
		chapter_$g_ARG_CHANGE -c $g_ARG_CHANGE
	fi
fi

if ((g_ARG_GRADE_LAB==1)); then
	info "Grading lab: $g_ARG_GRADE..."
	chapter_$g_ARG_GRADE -g $g_ARG_GRADE
fi

if ((g_ARG_INSTALL==1)); then
	if ! ((g_ARG_FINISH_INSTALL==1)); then
		info "Starting installation of the lab enviornment."
	else
		info "Continuing the installation of the lab enviornment."
	fi

	# Is this linux a supported device? If not, error and quit.
	if [ "$(cat /etc/lsb-release | grep -o "Ubuntu 22.04")" != "Ubuntu 22.04" ]; then
		error "You are attempting to run this script on a device that is not supported."
	fi

	# Does the lab install date file exist, if yes source it.
	if [[ -f "$g_LAB_PATH/.lid" ]]; then
		source "$g_LAB_PATH/.lid"
	fi

	# Are we being run by an instructor, if yes run it.
	#if [ $EUID -ne 500 ]; then
	if [ $EUID -ne 0 ]; then
		warning "This option can only be run by your instructor."
		cleanup_and_exit_with_code 1
	fi

	if ! ((g_ARG_FINISH_INSTALL==1)); then
		if [ -n "$g_INSTALL_DATE" ]; then
			printf "The install date of this lab was on: $g_INSTALL_DATE\n"

			read -r -n 1 -p "Are you sure you want to reinstall the lab enviornment? [Y/n]: " l_REPLY
			printf "\n\n"

			if [[ "${l_REPLY}" =~ ^[Yy]$ ]]; then
				info "Completely removing the lab enviornment."

				# Restore /etc/fstab created during base install.
				info "  Restoring the /etc/fstab file."
				if [ -f /etc/fstab.bak ]; then
					mv /etc/fstab{.bak,} &>/dev/null
				else
					warning "    The backup copy of the filesystem table no longer exists."
				fi

				# Remove the lab user(s).
				info "  Removing users and their home directories."
				if id -u "labuser1" >/dev/null 2>&1; then
					if [ $(id -nG labuser1 | grep -qw sudo) ]; then
						info "    Removing labuser1 from the sudo group."
						gpasswd --delete labuser1 sudo >> /dev/null 2>&1
					fi
				fi

				test_user labuser1
				test_user labuser2
				test_user labuser3
				test_user labuser9

				# Remove the lab security group(s).
				info "  Removing security groups."
				test_group labusers1
				test_group labusers2
				test_group labusers3
				test_group labusers9
				sed -i -e '/labuser9 ALL=(root) NOPASSWD: \/bin\/systemctl enable ssh, \/bin\/systemctl disable ssh, \/bin\/systemctl reload ssh, \/bin\/systemctl start ssh, \/bin\/systemctl stop ssh/d' /etc/sudoers

				# Chapter 5 (Disable SSH)
				info "  Stopping the SSH service."
				systemctl stop ssh 2>/dev/null

				info "  Disabling the SSH service."
				systemctl disable ssh 2>/dev/null

				# Chapter 8 (Remove hwsnbn.sh)
				info "    Cleaning up the /etc/crontab table."
				sed -i -e '/1  \*    \* \* \*   root    \/labs\/CH08\/hwsnbn.sh/d' /etc/crontab

				# Chapter 12 (Remove Users)
				test_user labuser4
				test_group finance
				test_user labuser5
				test_group labusers5

				# Chapter 12 (Unmount Disk)
				if $(mount | grep -qw /dev/sdb1); then
					info "  Unmounting the quota disk /dev/sdb1"
					umount --lazy /dev/sdb1
				fi

				# Chapter 12 (Wipe Disk)
				info "  Resetting disk(s)."
				wipefs /dev/sdb --all --force --quiet

				# Chapter 18 (Unmount Disk)
				if $(mount | grep -qw /dev/sdc1); then
					info "  Unmounting the disk /dev/sdc1"
					umount --lazy /dev/sdc1
				fi

				# Chapter 18 (Wipe Disk)
				info "  Resetting disk(s)."
				wipefs /dev/sdc --all --force --quiet

				# Chapter 19 (Unmount Disk)
				if $(mount | grep -qw /dev/mapper/vg1-CIT220); then
					info "  Unmounting the volume group /dev/mapper/vg1-CIT220"
					umount --lazy /dev/mapper/vg1-CIT220
				fi

				# Chapter 19 (Cleanup Volume Group)
				if [ -b /dev/mapper/vg1-CIT220 ]; then
					info "  Removing Volume Group."

					vgchange -a n vg1 >> /dev/null 2>&1
					lvremove /dev/vg1/CIT220 >> /dev/null 2>&1
					vgremove vg1 >> /dev/null 2>&1
					pvremove /dev/sdd >> /dev/null 2>&1
					pvremove /dev/sde >> /dev/null 2>&1
				fi

				# Chapter 19 (Wipe Disk)
				info "  Resetting disk(s)."
				wipefs /dev/sdd --all --force --quiet
				wipefs /dev/sde --all --force --quiet

				# Chapter 19 (Cleanup RAID)
				if [ -b /dev/md0 ]; then
					if $(mount | grep -qw /dev/md0); then
						info "  Unmounting the RAID volume /dev/md0"
						umount --lazy /dev/md0
					fi

					info "  Stopping RAID volume /dev/md0"
					mdadm --stop /dev/md0

					info "  Resetting disk(s)."
					wipefs /dev/sdf --all --force --quiet
					sgdisk --zap /dev/sdf >> /dev/nul

					wipefs /dev/sdg --all --force --quiet
					sgdisk --zap /dev/sdg >> /dev/nul

					wipefs /dev/sdh --all --force --quiet
					sgdisk --zap /dev/sdh >> /dev/nul
				fi

				# Chapter 22 (Reset Firewall)
				info "  Resetting ipTables."
				iptables -F

				# Chapter 25 (Reset LOCALE)
				ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime 

				# Remove lab directory.
				if [[ -d "$g_LAB_PATH" ]]; then
					info "  Removing the lab directory."
					rm -r "$g_LAB_PATH"
				fi

				# Remove lab symbolic link.
				if [[ -h "$g_LAB_SYMLINK" ]]; then
					info "  Removing the lab symbolic link."
					rm -r "$g_LAB_SYMLINK"
				fi

				info "Removing installed packages."
				#CH06
				info "  Removing the net-tools package(s)."
				apt -y remove net-tools -qq &>/dev/null
				info "  Removing the lynx package(s)."
				apt -y remove lynx -qq &>/dev/null
				#CH07
				info "  Removing the tree package(s)."
				apt -y remove tree -qq &>/dev/null
				#CH09
				info "  Removing the acl package(s)."
				apt -y remove acl -qq &>/dev/null
				#CH11
				info "  Removing the zip package(s)."
				apt -y remove zip -qq &>/dev/null
				#CH12
				info "  Removing the quota package(s)."
				apt -y remove quota -qq &>/dev/null
				#CH16
				info "  Removing the sysstat package(s)."
				apt -y remove sysstat -qq &>/dev/null
				info "  Removing the procinfo package(s)."
				apt -y remove procinfo -qq &>/dev/null
				#CH20
				info "  Removing the network-manager package(s)."
				apt -y remove network-manager -qq &>/dev/null
				#CH21
				info "  Removing the whois package(s)."
				apt -y remove whois -qq &>/dev/null
				#CH23
				info "  Removing the at package(s)."
				apt -y remove at -qq &>/dev/null
				#CH27
				info "  Removing the git package(s)."
				apt -y remove git -qq &>/dev/null
			fi

			info "The lab enviornment has been completely removed."
		fi
	fi

	# Install Base then install labs.
	if ! ((g_ARG_FINISH_INSTALL==1)); then
		base
	fi

	# Loop through the chapters, setting up each lab.
	for i in {1..29}; do
		chapter_$i -i $i
	done

	info "Finishing the installation of the lab enviornment."
	cleanup_and_exit_with_code 0
fi

if ((g_ARG_ROLLBACK_LAB==1)); then
	chapter_$g_ARG_ROLLBACK -r $g_ARG_ROLLBACK
fi

if ((g_ARG_UPDATE==1)); then
	update
fi

cleanup_and_exit_with_code 0
# **************************** end of script proper ****************************