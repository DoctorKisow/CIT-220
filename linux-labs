#!/bin/bash
#
# linux-labs - A script used to download, setup and grade the CIT-220 lab enviornment for my CIT-220 Linux System Administration classes.
# Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
# Dr. Matthew Kisow <mkisow@ccac.edu>
#

# License (CC-BY-ND)
# ------------------
#
# This work is licensed under the Creative Commons Attribution-NoDerivatives
# 4.0 International License. To view a copy of this license, visit
# http://creativecommons.org/licenses/by-nd/4.0/ or send a letter to Creative
# Commons, PO Box 1866, Mountain View, CA 94042, USA.

# TODO:
# [ ] LAB01-01 - Student Install
# [ ] LAB10-01 - SFTP in CHROOT JAIL (SEE LAB 29)
# [ ] LAB13-01 - (ssh) pg. 364-365, TCP WRAPPERS
# [ ] LAB17-01 - (lsmod)
# [X] LAB21-01 - Network Troubleshooting
# [ ] LAB29-01 - Chroot on Apache Server
# [X] RESET MODULES FOR ALL LABS
# [ ] GRADING MODULES FOR ALL LABS

# ##############################################################################
# Virtual Machine Setup
#
# SCSI1: 160Gb    sda             8:0    0   160G  0 disk 
#                 ├─sda1          8:1    0     1M  0 part  (BIOS OFFSET)
#                 ├─sda2          8:2    0    30G  0 part  /
#                 ├─sda3          8:3    0    15G  0 part  /tmp
#                 ├─sda4          8:4    0   1.5G  0 part  /boot
#                 ├─sda5          8:5    0   512M  0 part  /boot/efi
#                 ├─sda6          8:6    0    30G  0 part  /home
#                 ├─sda7          8:7    0    15G  0 part  /usr
#                 ├─sda8          8:8    0    30G  0 part  /var
#                 └─sda9          8:9    0     4G  0 part  [SWAP]
#
#                 sdb             8:16   0   128M  0 disk 
#                 └─sdb1          8:17   0   127M  0 part  /labs/CH12/LAB12-02-Q
#                 sdc             8:32   0   128M  0 disk 
#                 └─sdc1          8:33   0   127M  0 disk  /labs/CH18/LAB18-01
#                 sdd             8:48   0   128M  0 disk 
#                 └─vg1-CIT220  253:0    0   248M  0 lvm   /labs/CH19/LAB19-01
#                 sde             8:64   0   128M  0 disk 
#                 └─vg1-CIT220  253:1    0   248M  0 lvm   /labs/CH19/LAB19-01
#                 sdf             8:80   0   128M  0 disk
#                 └─md0           9:0    0   252M  0 raid5 /labs/CH19/LAB19-02
#                 sdg             8:96   0   128M  0 disk
#                 └─md0           9:0    0   252M  0 raid5 /labs/CH19/LAB19-02
#                 sdh             8:112  0   128M  0 disk
#                 └─md0           9:0    0   252M  0 raid5 /labs/CH19/LAB19-02
# ##############################################################################

# Scroll to the bottom of this script to follow the main script flow.

## Set how the script will behave when certain conditions are encountered.
# Enable exiting immediately if a command exits with a non-zero status.
set -e

# Enable erroring on un-bound (undefined) variables.
set -u

# Enable filename patterns that match no files to expand to a null string, rather than themselves.
shopt -s nullglob

# ************************* global variable definitions ************************
g_PROGNAME="$(basename "${0}")"
g_VERSION="0.0.84"
g_PROGRAM_NAME="linux-labs"
g_PROGRAM_DESCRIPTION="A script used to download, setup and grade the CIT-220 lab enviornment"
g_SCRIPT_URL="https://github.com/DoctorKisow/CIT-220/raw/main/linux-labs"
g_COPYRIGHT_TEXT="Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved."
g_AUTHOR_TEXT="Dr. Matthew Kisow"
g_AUTHOR_EMAIL="mkisow@ccac.edu"

# Script location where it was run from.
g_SCRIPT_LOCATION="${BASH_SOURCE[@]}"

# (g_<color>_TEXT) - Variables used to control how output is displayed to the screen during script execution.
g_RED_TEXT="" g_GREEN_TEXT="" g_YELLOW_TEXT="" g_BLUE_TEXT="" g_MAGENTA_TEXT="" g_CYAN_TEXT="" g_WHITE_TEXT="" g_RESET_ATTS=""  g_ALERT_TEXT=""
if [[ -v TERM && -n "${TERM}" && "${TERM}" != "dumb" ]]; then
  g_RD_TEXT="$(tput setaf 1)$(tput bold)"
  g_GREEN_TEXT="$(tput setaf 2)$(tput bold)"
  g_YELLOW_TEXT="$(tput setaf 3)$(tput bold)"
  g_BLUE_TEXT="$(tput setaf 4)$(tput bold)"
  g_MAGENTA_TEXT="$(tput setaf 5)$(tput bold)"
  g_CYAN_TEXT="$(tput setaf 6)$(tput bold)"
  g_WHITE_TEXT="$(tput setaf 7)$(tput bold)"
  g_RESET_ATTS="$(tput sgr0)"
  g_ALERT_TEXT="$(tput bel)"
fi

# (g_LAB_PATH) - Strings that hold the location to the lab files.
g_LAB_PATH="/Lab Files"
g_LAB_SYMLINK="/labs"
g_DIR_PREFIX="CH"
g_LAB_PREFIX="LAB"

# (g_PREFIXSTRING) - String value used to indicate what is appended to the output at the beginning of screen output during script execution.
g_PREFIXSTRING="*  "

# (g_SHOWPREFIX) - String value used to indicate normal script execution.
g_SHOWPREFIX="${g_GREEN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}"

# (g_SCRIPT_PATH) - String value used to hold the execution path of the script.
g_SCRIPT_PATH="`dirname \"$0\"`"
g_SCRIPT_PATH="`( cd \"$g_SCRIPT_PATH\" && pwd )`"

# (g_ARG_<variable>) - Boolean values used to indicate which command line options are set during execution; the default for all values is 0.
# WARNING: DO NOT MODIFY THESE VALUE(S)!
declare -i g_ARG_BREAK_LAB=0
declare -i g_ARG_CHANGE_LAB=0
declare -i g_ARG_FIX_LAB=0
declare -i g_ARG_GRADE_LAB=0
declare -i g_ARG_INSTALL=0
declare -i g_ARG_PROFILE=0
declare -i g_ARG_FINISH_INSTALL=0
declare -i g_ARG_ROLLBACK_LAB=0
declare -i g_ARG_UPDATE=0
declare -i g_ARG_UNINSTALL=0

declare -i g_ARG_LABUSER_RESET=0
declare -i g_ARG_LABUSER=0
declare -i g_ARG_CHANGE=0
declare -i g_ARG_GRADE=0
declare -i g_ARG_ROLLBACK=0

declare g_LAB_PROFILE="${g_PROGRAM_NAME}.profile"
declare g_CLASS_NAME="CIT-220"
declare g_FIRST_TOKEN=""
declare g_INSTALL_DATE=""

# **************************** basic script functions **************************
# (cleanup_and_exit_with_code) - Function used to properly cleanup the enviornment after an error; the passed value are 1 (error) or 0 (normal).
function cleanup_and_exit_with_code ()
{
  # (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
  l_BOOL='^[0-1]+$'
  if ! [[ $1 =~ $l_BOOL ]]; then
    error "Function: cleanup_and_exit_with_code was passed a value that is out of bounds."
  fi

  # If output was redirected to the logfile during an interactive session, repoint it to the console.
  exec &>$(tty)

  # Error trapping is turned off because we want to handle errors.
  set +e
  trap - EXIT

  exit $1
}

# (display_usage_message_and_bail_out) - Function used to display the usage when an invalid command line option is passed to the script.
function display_usage_message_and_bail_out ()
{
  if [ ! -z "${1+x}" ]; then
    printf "%s: %s\n" "${g_PROGNAME}" "${1}" >&2
  fi

  print_usage >&2
  cleanup_and_exit_with_code 1
}

# (error) - Function for the error catching routine, display an error cleanup and exit the script.
function error ()
{
  echo
  echo -e "${g_RED_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}  ERROR: ${1} - exiting" >&2
  cleanup_and_exit_with_code 1
}

# (help) - Function used to display the scripts usage and command line options.
function help ()
{
  printf "${g_PROGNAME} - ${g_PROGRAM_DESCRIPTION}\n"
  print_usage
}

# (info) - Function for formatted informational messages.
function info ()
{
  echo -e "${g_CYAN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}   INFO: ${1}" >&2
}

# (internal_consistency_option_checks) - Function used to validate the some of the more obvious configuration file snafus.
function internal_consistency_option_checks ()
{
  while true ; do
    case "$g_FIRST_TOKEN" in
      -c)
        if ((g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB || g_ARG_INSTALL || g_ARG_PROFILE || g_ARG_UPDATE || g_ARG_UNINSTALL || g_ARG_LABUSER_RESET)); then
          warning "You cannot change the enviornment with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -g)
        if ((g_ARG_INSTALL || g_ARG_PROFILE || g_ARG_UPDATE || g_ARG_UNINSTALL || g_ARG_LABUSER_RESET || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB)); then
          warning "You cannot grade a lab with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -i)
        if ((g_ARG_PROFILE || g_ARG_UPDATE || g_ARG_UNINSTALL || g_ARG_LABUSER_RESET || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB)); then
          warning "You cannot setup the labs enviornment with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -I)
        if ((g_ARG_INSTALL || g_ARG_UPDATE || g_ARG_UNINSTALL || g_ARG_LABUSER_RESET || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB)); then
          warning "You cannot create or set the lab profile with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -r)
        if ((g_ARG_GRADE_LAB || g_ARG_INSTALL || g_ARG_PROFILE || g_ARG_UPDATE || g_ARG_UNINSTALL || g_ARG_LABUSER_RESET || g_ARG_CHANGE_LAB)); then
          warning "You cannot rollback a lab with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -R)
        if ((g_ARG_GRADE_LAB || g_ARG_INSTALL || g_ARG_PROFILE || g_ARG_UPDATE || g_ARG_UNINSTALL || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB)); then
          warning "You cannot reset a labuser account with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -u)
        if ((g_ARG_UNINSTALL || g_ARG_LABUSER_RESET || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB  ||  g_ARG_INSTALL || g_ARG_PROFILE)); then
          warning "You cannot update this script with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -U)
        if ((g_ARG_LABUSER_RESET || g_ARG_UPDATE || g_ARG_CHANGE_LAB || g_ARG_ROLLBACK_LAB || g_ARG_GRADE_LAB  ||  g_ARG_INSTALL || g_ARG_PROFILE)); then
          warning "You cannot uninstall the lab enviornment with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
    esac

    # **************************** student profile options ****************************
    if ((g_ARG_PROFILE==0)); then
      # Exit on unset v_LASTNAME.
      if [ -z $v_LASTNAME ]; then
        error "  The students last name option cannot be empty."
      fi

      # Exit on unset v_SECTION.
      if [ -z $v_SECTION ]; then
        error "  The students class section option cannot be empty."
      fi
    fi
  done
}

# (print_usage) - Function used to display the scripts usage and command line options.
function print_usage ()
{
  clear
  script_banner

  cat << EOF

  Usage: ${g_PROGNAME} [-c <1-29> [-b|--break <21>] | [-f|--fix <21>]] [-g <1-29>]
                    [-h] [-i|--install] [-I] [-r <1-29>] [-u|--update]
                    [-U|--uninstall] [-v]

  Options:
  -b --break             break networking for the troubleshooting lab [21], must be
                         used with -c switch
  -c                     roll the enviornment forward to a lab [1-29]
  -f --fix               fix networking for the troubleshooting lab [21], must be
                         used with -c switch
  -g                     grade a completed lab [1-29]
  -h                     show this help message
  -i --install           install the lab enviornment
  -I                     set the students lab profile
  -r                     roll back a specific lab [1-29]
  -R                     labuser account reset [1-5]
  -u --update            update the ${g_PROGNAME} script
  -U --uninstall         uninstall the lab enviornment
  -v                     display the version number of ${g_PROGNAME} and exit
EOF
}

# (print_version) - Function used to print the script version.
function print_version ()
{
  clear
  script_banner

  printf "%s\n" "${g_VERSION}"
}

# (process_command_line_options) - Function used to set and validate command line options passed to the script.
function process_command_line_options ()
{
  # (l_TEMP) - Local array used to hold the list of command line arguements passed from the cammandline during script execution.
  local l_TEMP

  # (l_RC) - Local boolean value used to test if any commandline arguements passed from the cammandline during script execution are invalid.
  declare -i l_RC

  # Error trapping is turned off because we want to handle errors.
  set +e
    l_TEMP="$(getopt -o bc:fg:hiIr:R:uUvz --long break,fix,install,update,uninstall -n "${g_PROGNAME}" -- "${@}")"
    l_RC="${?}"
  set -e

  # Check if any invalid options were passed and display help.
  if ((l_RC!=0)); then
    display_usage_message_and_bail_out
  fi

  # No arguements were passed to the script, display help.
  if [ $# -eq 0 ]; then
    display_usage_message_and_bail_out
  fi

  eval set -- "${l_TEMP}"

  for arg in "${@}"; do
    shift
    case "$arg" in
      --break)      set -- "$@" '-b' ;;
      --fix)        set -- "$@" '-f' ;;
      --install)    set -- "$@" '-i' ;;
      --uninstall)  set -- "$@" '-U' ;;
      --update)     set -- "$@" '-u' ;;
      *)            set -- "$@" "$arg" ;;
    esac
  done

  # Set the first token for the error message when multiple tokens are passed.
  g_FIRST_TOKEN=${1}

  # Extract the options and their arguments into variables.
  while true ; do
    case "${1}" in
      -b) g_ARG_BREAK_LAB=1; (( g_ARG_CHANGE == 21 )) || display_usage_message_and_bail_out; shift ;;
      -c) g_ARG_CHANGE_LAB=1; g_ARG_CHANGE=${2}; (( g_ARG_CHANGE >= 1 && g_ARG_CHANGE <= 29 )) || display_usage_message_and_bail_out; shift 2 ;;
      -f) g_ARG_FIX_LAB=1; (( g_ARG_CHANGE == 21 )) || display_usage_message_and_bail_out; shift ;;
      -g) g_ARG_GRADE_LAB=1; g_ARG_GRADE=${2}; (( g_ARG_GRADE >= 1 && g_ARG_GRADE <= 29 )) || display_usage_message_and_bail_out; shift 2 ;;
      -h) display_usage_message_and_bail_out ;;
      -i) g_ARG_INSTALL=1; shift ;;
      -I) g_ARG_PROFILE=1; shift ;;
      -r) g_ARG_ROLLBACK_LAB=1; g_ARG_ROLLBACK=${2}; (( g_ARG_ROLLBACK >= 1 && g_ARG_ROLLBACK <= 29 )) || display_usage_message_and_bail_out; shift 2 ;;
      -R) g_ARG_LABUSER_RESET=1; g_ARG_LABUSER=${2}; (( g_ARG_LABUSER >= 1 && g_ARG_LABUSER <=5 )) || display_usage_message_and_bail_out; shift 2 ;;
      -u) g_ARG_UPDATE=1; shift ;;
      -U) g_ARG_UNINSTALL=1; shift;;
      -v) print_version >&2; cleanup_and_exit_with_code 1 ;;
      -z) g_ARG_FINISH_INSTALL=1; shift ;;
      --) shift; break ;;
    esac
  done
}

# (script_banner) - Function used to display the program banner when it is executed interactively from the CLI.
function script_banner ()
{
  printf "${g_WHITE_TEXT}${g_PROGRAM_NAME}, v${g_VERSION}${g_RESET_ATTS}\n"
  printf "${g_CYAN_TEXT}${g_COPYRIGHT_TEXT}${g_RESET_ATTS}\n"
  printf "${g_CYAN_TEXT}${g_AUTHOR_TEXT} <${g_AUTHOR_EMAIL}>${g_RESET_ATTS}\n"
  printf -- "--------------------------------------------------------------------------------\n\n"

  if ((g_ARG_UPDATE==0)); then
    if ! [[ -f "$g_LAB_PATH/.brkfix" ]]; then
      update
    fi
  fi
}

# (set_error_trapping) - Function used to enable and disable error handeling, unbound variables and filename pattern matching; the passed value is 1 for enabled or 0 for disabled.
function set_error_trapping ()
{
  # (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
  l_BOOL='^[0-1]+$'
  if ! [[ $1 =~ $l_BOOL ]]; then
    error "Function: set_error_trapping was passed a value that is out of bounds."
  fi

  # (l_TRAP) - Local boolean value used to enable and disable how the script
  # behaves when certain error conditions are met.
  local l_TRAP="${1}"

  if ((l_TRAP == 0)); then
    # Disable errors when a command exits with a non-zero status.
    set +e

    # Disable errors on unbound (undefined) variables.
    set +u

    # Disable allowing filename patterns that match no files to expand to a null
    # string, rather than themselves.
    shopt -u nullglob
  else
    # Enable exiting immediately if a command exits with a non-zero status.
    set -e

    # Enable erroring on unbound (undefined) variables.
    set -u

    # Enable filename patterns that match no files to expand to a null
    # string, rather than themselves.
    shopt -s nullglob
  fi
}

# (trap_cleanup) - Function used to set how we want the script to handle any error conditions it encounters and what we want to do once those error conditions are encountered.
function trap_cleanup ()
{
  trap - SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT
  error "Caught signal"
}
trap trap_cleanup SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT

# (update) - Function used to check for and update this script from the repository.
function update ()
{
  local l_TMP_FILE
  local l_ABS_PATH
  local l_VERSION

  cd "${g_SCRIPT_PATH}"

  # Test internet access.
  ping -q -c1 8.8.8.8 &>/dev/null
  if [ $? == 1 ]; then
    warning "This script does not have a required network connection to update itself."
    return
  fi

  # Get a new version of the script.
  l_TMP_FILE=$(mktemp -p "" "XXXXX.sh")
  curl -s -L "$g_SCRIPT_URL" > "$l_TMP_FILE"

  l_VERSION=$(grep "^g_VERSION" "$l_TMP_FILE" | awk -F'[="]' '{print $3}')

  # Compare the script versions and update if newer.
  if [ "$g_VERSION" \< "$l_VERSION" ]; then
    if ((g_ARG_UPDATE==1)); then
      update-info "Updating the $g_PROGRAM_NAME script."

      # Create updater script.
      l_ABS_PATH=$(readlink -f "$g_SCRIPT_LOCATION")

      printf '#!/bin/bash\n\n' >> updater.sh
      printf "cp \"$l_TMP_FILE\" \"$l_ABS_PATH\"\n" >> updater.sh
      printf "rm $g_SCRIPT_PATH/updater.sh" >> updater.sh

      chmod +x updater.sh
      chmod 770 "$l_TMP_FILE"

      if [ $(getent group labusers1) ]; then
        chown root:labusers1 "$l_TMP_FILE"
      else
        chown root:root "$l_TMP_FILE"
      fi

      exec /bin/bash "$g_SCRIPT_PATH/updater.sh"
    fi

    if ((g_ARG_UPDATE==0)); then
      update-info "There is a new version v$l_VERSION of the $g_PROGRAM_NAME script available.\n            To upgrade please type \"$g_PROGRAM_NAME -u\" at the command prompt.\n\n"
    fi

  else
    info "You are running the current version of this script.\n\n"
  fi

  rm -f "$l_TMP_FILE"
}

# (update-info) - Function for formatted informational messages.
function update-info ()
{
  echo -e "${g_CYAN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS} UPDATE: ${1}" >&2
}

# (warning) - Function for formatted warning messages.
function warning ()
{
  echo -e "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}WARNING: ${1}" >&2
}
# **************************** basic script functions **************************


# *************************** script specific functions ************************
# (attribute) - Test for and record attributes for the grading module profile. Passed arguements ($1) text string of the attribute you're setting, ($2) attribute text or variable.
function attribute ()
{
  # The number of arguments passed into the function.
  l_NUM_ARGS='^[1-2]+$'

  # Response from the keyboard.
  local l_REPLY=""

  # Input response from the keyboard.
  local l_ATTRIBUTE=""

  if ! [[ $# =~ $l_NUM_ARGS ]]; then
    error "  Function: attribute was passed a value that is out of bounds.  Did you quote the variable?"
  fi

  if [ -z "$2" ]; then
    echo -e "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}             The current ${1} is empty." >&2
    l_REPLY="y"
  else
    echo -e "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}             The current ${1} is: ${g_WHITE_TEXT}${2}${g_RESET_ATTS}" >&2
  fi

  if [ -z "$l_REPLY" ]; then
    read -e -r -s -n 1 -p "                Would you like to change this (y/n): " l_REPLY
  fi

  if [[ ${l_REPLY} =~ ^[Yy]$ ]]; then
    while true; do
      read -r -p "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}             Enter the new ${1}: " l_ATTRIBUTE
      if [ ! -z "$l_ATTRIBUTE" ]; then
        break
      fi
    done
  else
    l_ATTRIBUTE="$2"
  fi

  # Return value to calling function.
  echo "$l_ATTRIBUTE"
}

# (backup_lab) - Backup a lab before resetting. Passed arguements ($1) the chapter number.
function backup_lab ()
{
  # (l_CH_NUM) - Local string value used to hold the lab directory number passed in from $1.
  local l_CH_NUM="$1"

  # (l_WORKING_DIRECTORY) - Local string used to hold working directory.
  local l_WORKING_DIRECTORY=""

  # Verify the function was passed a valid lab number.
  if ! (( l_CH_NUM >= 1 && l_CH_NUM <= 29 )); then
    error "Function: was passed an expression that was out of range."
  fi

  # If we are passed a single digit number, prefix it with a zero.
  l_CH_NUM=$(printf '%02d' $((l_CH_NUM)))

  # Set the working directory.
  l_WORKING_DIRECTORY="$g_LAB_PATH/$g_DIR_PREFIX$l_CH_NUM"

  info "Backing up the previous \"$l_WORKING_DIRECTORY\" working directory."

  if [ -d "$l_WORKING_DIRECTORY.bak" ]; then
    info "  Removing the old backup directory."
    rm -r "$l_WORKING_DIRECTORY.bak" &>/dev/null
  fi

  info "  Creating a backup of the \"$l_WORKING_DIRECTORY\" directory."
  mv "$l_WORKING_DIRECTORY"{,.bak}
}

# (capture_commands) - Capture commands from the history file. Passed arguements ($1) the lab user ($2) the working directory.
function capture_commands ()
{
  # For this function to work correctly the "labusers1" group must have rw on ALL chapter folders.
  local l_LABUSER="labuser$1"
  local l_LABUSER_HIST="/home/$l_LABUSER/.bash_history"
  local l_WORKING_DIRECTORY="$2"
  local l_HIST_FILE="/home/labuser1/command-history.txt"

  # Grading can only be done from the labuser1 account.
  if [ $EUID -ne 501 ]; then
    warning "Login or switch to the labuser1 account to grade this lab."
    cleanup_and_exit_with_code 1
  fi

  # Cleanup any previous grading residue.
  if [ -e $l_WORKING_DIRECTORY/command-history.txt ]; then
    rm $l_WORKING_DIRECTORY/command-history.txt
  fi

  info "Capturing command history for $l_LABUSER."
  printf "\n\n# Command history capture for: $l_LABUSER.\n" >> $l_HIST_FILE
  if [ "$l_LABUSER" == "labuser1" ]; then
    history >> $l_HIST_FILE
    sed -i 's/^ *[0-9]\+..//g' $l_HIST_FILE

    info "  Merging the command history file."
    cat $l_HIST_FILE >> $l_WORKING_DIRECTORY/$l_HIST_FILE
    if [ -e $l_HIST_FILE ]; then
      rm $l_HIST_FILE
    fi

    info "  Truncating command history for $l_LABUSER."
    sed -i '/^/d' /home/$l_LABUSER/.bash_history
  else
    echo 'P@$$w0rd' | sudo -S -k cat $l_LABUSER_HIST >> $l_HIST_FILE 2>&1

    info "  Merging the command history file."
    echo 'P@$$w0rd' | sudo -S -k cat $l_HIST_FILE >> $l_WORKING_DIRECTORY/$l_HIST_FILE 2>&1
    if [ -e $l_HIST_FILE ]; then
      rm $l_HIST_FILE
    fi

    info "  Truncating command history for $l_LABUSER."
    echo 'P@$$w0rd' | sudo -S -k sed -i '/^/d' /home/$l_LABUSER/.bash_history >/dev/null 2>&1

    info "  Cleaning up command history file."
    sed -i '/\[sudo\].*/d' $l_WORKING_DIRECTORY/command-history.txt
  fi
}

# (create directory) - Create a directory structure for the lab module. Passed arguements ($1) the book chapter number.
function create_directory ()
{
  # (l_CH_NUM) - Local string value used to hold the lab directory number passed in from $1.
  local l_CH_NUM="$1"

  # Verify the function was passed a valid lab number.
  if ! (( l_CH_NUM >= 1 && l_CH_NUM <= 29 )); then
    error "Function: was passed an expression that was out of range."
  fi

  # If we are passed a single digit number, prefix it with a zero.
  l_CH_NUM=$(printf '%02d' $((l_CH_NUM)))

  # Set the working directory.
  l_WORKING_DIRECTORY="$g_LAB_PATH/$g_DIR_PREFIX$l_CH_NUM"

  # Create the directory.
  if ! [[ -d "$l_WORKING_DIRECTORY" ]]; then
    mkdir "$l_WORKING_DIRECTORY"
  fi

  # Return the created directories path.
  echo "$l_WORKING_DIRECTORY"
}

# (create_lab) - Create a lab module. Passed arguements ($1) the lab number ($2) optional sets increment.
function create_lab ()
{
  # (l_CH_NUM) - Local string value used to hold the lab directory number passed in from $1.
  local l_LAB_NUM="$1"

  # (l_LAB_NUM_INC) - Local string value used to hold the optional increment value for dual chapter labs number passed in from $2.
  local l_LAB_NUM_INC=${2:-"1"}

  # (l_LAB_NUM) - Local string used for return value.
  local l_LAB=""

  # Verify the function was passed a valid lab number.
  if ! (( l_LAB_NUM >= 1 && l_LAB_NUM <= 29 )); then
    error "Function: was passed an expression that was out of range."
  fi

  # If we are passed a single digit number, prefix it with a zero.
  l_LAB_NUM=$(printf '%02d' $((l_LAB_NUM)))

  # If we are passed a single digit number, prefix it with a zero.
  l_LAB_NUM_INC=$(printf '%02d' $((l_LAB_NUM_INC)))

  # Set the lab number.
  l_LAB="$g_LAB_PREFIX$l_LAB_NUM-$l_LAB_NUM_INC"

  # Return the lab number.
  echo $l_LAB
}

# (install) - Function used to install the lab enviornment.
function install ()
{
  info "Installing the lab enviornment."

  # IS THIS DISTRIBUTION OF LINUX SUPPORTED?
  if [ "$(cat /etc/lsb-release | grep -o "Ubuntu 22.04")" != "Ubuntu 22.04" ]; then
    warning "You are attempting to run this script on a device that is not supported."
    cleanup_and_exit_with_code 1
  fi

  # SOURCE LID (LAB INSTALL DATE) IF IT EXISTS.
  if [[ -f "$g_LAB_PATH/.lid" ]]; then
    source "$g_LAB_PATH/.lid"
  fi

  if ! ((g_ARG_FINISH_INSTALL==1)); then
    if [ -n "$g_INSTALL_DATE" ]; then
      warning "  The lab enviornment was installed on: $g_INSTALL_DATE."
      warning "  Use must use ${g_PROGNAME} -U to uninstall it first."
      cleanup_and_exit_with_code 0
    fi

    base
  else
    info "Finishing installation of the lab enviornment."

    # Loop through the chapters, setting up each lab.
    for i in {1..29}; do
      chapter_$i -i $i
    done
  fi

  info "The lab enviornment has been installed."
}

# (install_package) - Install software packages. Passed arguements ($1) package name.
function install_package ()
{
  local l_package="$1"

  # Install packages and report error conditions as warning.
  info "    Installing the $l_package package(s)."
  apt -y install $l_package -qq &>/dev/null
  if [ $? -ne 0 ]; then
    warning "The $l_package package installation failed with an error condition."
  fi
}

# (interactive_lab_profile) - Collect lab profile information for automated grading.
function interactive_lab_profile ()
{
  local l_COLLECTION_RESPONSE=""

  until [[ $l_COLLECTION_RESPONSE =~ ^[Y|y]$ ]]; do
    # Linux Class Section.
    v_SECTION=$( attribute "linux class section" "${v_SECTION}" )
    v_SECTION="${g_CLASS_NAME}-${v_SECTION^^}"
    sed -i "s/v_SECTION=\"[^\"]*\"/v_SECTION=\"${v_SECTION}\"/" "${g_SCRIPT_PATH}/${g_LAB_PROFILE}"

    # Students Last Name.
    v_LASTNAME=$( attribute "students last name" "${v_LASTNAME}" )
    v_LASTNAME="${v_LASTNAME^^}"
    sed -i "s/v_LASTNAME=\"[^\"]*\"/v_LASTNAME=\"${v_LASTNAME}\"/" "${g_SCRIPT_PATH}/${g_LAB_PROFILE}"

    # Validate Information.
    info "Please validate your entered information."
    printf "\n"
    printf "                Linux Section Name:               ${g_WHITE_TEXT}${v_SECTION}\n${g_RESET_ATTS}"
    printf "                 Student Last Name:               ${g_WHITE_TEXT}${v_LASTNAME}\n${g_RESET_ATTS}"
    printf "\n"

    # Validate Information Response.
    read -e -r -s -n 1 -p "         Please verify that your information is correct, (y/n)?" l_COLLECTION_RESPONSE
  done

  info "  The ${g_SCRIPT_PATH}/${g_LAB_PROFILE} was updated successfully."
}

# (lab_profile) - Create a default lab profile or source the one previously created.
function lab_profile ()
{
  if [ -f "${g_SCRIPT_PATH}/${g_LAB_PROFILE}" ]; then
    info "Reading the students lab profile."

    source "${g_SCRIPT_PATH}/${g_LAB_PROFILE}"
  else
		cat > "${g_SCRIPT_PATH}/${g_LAB_PROFILE}" <<-EOF
		# The students class section number.
		v_SECTION=""

		# The students last name.
		v_LASTNAME=""
		EOF

    info "  A lab profile file was created at ${g_SCRIPT_PATH}/${g_LAB_PROFILE}."
    info "  Manually update the students lab profile by running this script again using ${g_PROGNAME} -I"
    cleanup_and_exit_with_code 0
  fi
}

# (lab_readme) - Place a README file in each directory with information on where to find the lab. Passed arguements ($1) the lab number ($2) optional sets increment.
function lab_readme ()
{
  # (l_WORKING_DIRECTORY) - Local string used to hold the working directory passed in from $1.
  local l_WORKING_DIRECTORY="$1"

  # (l_LAB) - Local string value used to hold the lab number passed in from $2.
  local l_LAB="$2"

  # (l_FILENAME) - Local string used to hold the name of the readme file.
  local l_FILENAME="README"

	cat > "$l_WORKING_DIRECTORY/$l_FILENAME" <<-EOF
	${g_COPYRIGHT_TEXT}
	${g_AUTHOR_TEXT} <${g_AUTHOR_EMAIL}>

	LAB:      ${l_LAB}
	DOCUMENT: The lab packet(s) for this chapter is located on GitHub or on BlackBoard.
	EOF

  info "  Setting the ownership and permissions for lab readme file: $l_LAB."
  chown root:labusers1 "$l_WORKING_DIRECTORY/$l_FILENAME"
  chmod 644 "$l_WORKING_DIRECTORY/$l_FILENAME"
}

# (reset_permissions_check) - Ensure that we have the proper permissions to reset the lab.
function reset_permissions_check ()
{
  if [ $EUID -ne 0 ]; then
    warning "To properly reset this lab you must run the $g_PROGRAM_NAME script using sudo."
    cleanup_and_exit_with_code 1
  fi
}

# (reset_labuser) - Function used to reset labuser accounts after an incident. Passes arguements ($1) labuser account number (1-5).
function reset_labuser ()
{
  local l_LABUSER=$1

  info "Resetting the labuser$l_LABUSER account and associated groups back to default."

  case "${l_LABUSER}" in
    1)  test_user labuser1
        test_group labusers1

        groupadd -g 1001 labusers1

        useradd --comment "Lab User 1" --uid 501 --create-home --no-user-group --gid 1001 --groups adm,cdrom,sudo,dip,plugdev,lxd,labusers2 --shell /bin/bash labuser1
        usermod -g labusers1 labuser1 &>/dev/null
        chown labuser1:labusers1 /home/labuser1
        echo 'labuser1:P@$$w0rd' | chpasswd
        ;;
    2)  test_user labuser2
        test_group labusers2

        groupadd -g 1002 labusers2

        useradd --comment "Lab User 2" --uid 1002 --create-home --no-user-group --gid 1002 --shell /bin/bash labuser2
        echo 'labuser2:P@$$w0rd' | chpasswd
        ;;
    3)  test_user labuser3
        test_group labusers3

        groupadd -g 1003 labusers3

        useradd --comment "Lab User 3" --uid 1003 --create-home --no-user-group --gid 1001 --groups labusers2 --shell /bin/bash labuser3
        echo 'labuser3:P@$$w0rd' | chpasswd
        ;;
    4)  warning "Cannot reset this user, reset lab CH12-01 by typing \"linux-labs -r 12\"." ;;
    5)  warning "Cannot reset this user, reset lab CH12-02 by typing \"linux-labs -r 12\"." ;;
  esac
}

# (test_user) - Function used to test for the existence of a user then remove them. Passes arguements ($1) username.
function test_user ()
{
  # (l_USER) - Local string value used to hold the username passed in from $1.
  local l_USER="$1"

  if id -u "$l_USER" >/dev/null 2>&1; then
    userdel -r -f "$l_USER" >> /dev/null 2>&1
  fi

  if [ $(getent group $l_USER) ]; then
    groupdel $l_USER
  fi
}

# (test_group) - Function used to test for the existence of a group. Passes arguements ($1) group name.
function test_group ()
{
  # (l_GROUP) - Local string value used to hold the group name passed in from $1.
  local l_GROUP="$1"

  if [ $(getent group $l_GROUP) ]; then
    groupdel -f $l_GROUP
  fi
}

# (uninstall) - Function used to uninstall the lab enviornment.
function uninstall ()
{
  # (l_REPLY) - A local variable used to capture a yes/no response.
  local l_REPLY=""

  info "Uninstalling the lab enviornment."

  read -r -n 1 -p "            Are you sure you want to uninstall the lab enviornment? [Y/n]: " l_REPLY
  printf "\n\n"

  if [[ "${l_REPLY}" =~ ^[Yy]$ ]]; then
    # Restore /etc/fstab created during base install.
    info "  Restoring the /etc/fstab file."
    if [ -f /etc/fstab.bak ]; then
      mv /etc/fstab{.bak,} &>/dev/null
    else
      warning "    The backup copy of the filesystem table no longer exists."
    fi

    # Remove the lab user(s).
    info "  Removing users and their home directories."
    if id -u "labuser1" >/dev/null 2>&1; then
      if [ $(id -nG labuser1 | grep -qw sudo) ]; then
        info "    Removing labuser1 from the sudo group."
        gpasswd --delete labuser1 sudo >> /dev/null 2>&1
      fi
    fi

    test_user labuser1
    test_user labuser2
    test_user labuser3
    test_user labuser4
    test_user labuser5
    test_user labuser9

    # Remove the lab security group(s).
    info "  Removing security groups."
    test_group labusers1
    test_group labusers2
    test_group labusers3
    test_group labusers5
    test_group finance
    test_group labusers9
    sed -i -e '/labuser9 ALL=(root) NOPASSWD: \/bin\/systemctl enable ssh, \/bin\/systemctl disable ssh, \/bin\/systemctl reload ssh, \/bin\/systemctl start ssh, \/bin\/systemctl stop ssh/d' /etc/sudoers

    # Chapter 5 (Disable SSH)
    info "  Stopping the SSH service."
    systemctl stop ssh 2>/dev/null

    info "  Disabling the SSH service."
    systemctl disable ssh 2>/dev/null

    # Chapter 8 (Remove hwsnbn.sh)
    info "  Cleaning up the /etc/crontab table."
    sed -i -e '/1  \*    \* \* \*   root    \/labs\/CH08\/hwsnbn.sh/d' /etc/crontab

    # Chapter 12 (Remove Users)
    test_user labuser4
    test_group finance
    test_user labuser5
    test_group labusers5

    # Chapter 12 (MOTD)
    info "  Cleaning up the /etc/motd file."
    if [[ -f /etc/motd ]]; then
      sed -i -e '/This is a private system used for the Linux System Administration CIT-220 class./d' /etc/motd
    else
      warning "    The /etc/motd file is missing no longer exists."
    fi

    # Chapter 12 (Remove Quota Disk)
    if $(mount | grep -qw /dev/sdb1); then
      info "  Unmounting the quota disk /dev/sdb1"
      umount --lazy /dev/sdb1
    fi

    info "  Resetting disk /dev/sdb."
    wipefs /dev/sdb --all --force --quiet
    sgdisk --zap /dev/sdb >> /dev/nul

    # Chapter 18 (Remove Disk)
    if $(mount | grep -qw /dev/sdc1); then
      info "  Unmounting the disk /dev/sdc1"
      umount --lazy /dev/sdc1
    fi

    info "  Resetting disk /dev/sdc."
    wipefs /dev/sdc --all --force --quiet
    sgdisk --zap /dev/sdc >> /dev/nul

    # Chapter 19 (Cleanup Volume Group)
    if $(mount | grep -qw /dev/mapper/vg1-CIT220); then
      info "  Unmounting the volume group /dev/mapper/vg1-CIT220"
      umount --lazy /dev/mapper/vg1-CIT220
    fi

    if [ -b /dev/mapper/vg1-CIT220 ]; then
      info "  Removing Volume Group."

      vgchange -a n vg1 >> /dev/null 2>&1
      lvremove --force /dev/vg1/CIT220 >> /dev/null 2>&1
      vgremove vg1 >> /dev/null 2>&1
      pvremove /dev/sdd >> /dev/null 2>&1
      pvremove /dev/sde >> /dev/null 2>&1
    fi

    info "  Resetting disk /dev/sdd."
    wipefs /dev/sdd --all --force --quiet
    sgdisk --zap /dev/sdd >> /dev/nul

    info "  Resetting disk /dev/sde."
    wipefs /dev/sde --all --force --quiet
    sgdisk --zap /dev/sde >> /dev/nul

    # Chapter 19 (Cleanup RAID)
    if [ -b /dev/md0 ]; then
      if $(mount | grep -qw /dev/md0); then
        info "  Unmounting the RAID volume /dev/md0"
        umount --lazy /dev/md0
      fi

      info "  Stopping RAID volume /dev/md0"
      mdadm --stop /dev/md0 >> /dev/nul
    fi

    info "  Resetting disk /dev/sdf."
    wipefs /dev/sdf --all --force --quiet
    sgdisk --zap /dev/sdf >> /dev/nul

    info "  Resetting disk /dev/sdg."
    wipefs /dev/sdg --all --force --quiet
    sgdisk --zap /dev/sdg >> /dev/nul

    info "  Resetting disk /dev/sdh."
    wipefs /dev/sdh --all --force --quiet
    sgdisk --zap /dev/sdh >> /dev/nul

    # Chapter 22 (Reset Firewall)
    info "  Resetting ipTables."
    iptables -F

    # Chapter 25 (Reset LOCALE)
    ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime 

    # Remove lab directory.
    if [[ -d "$g_LAB_PATH" ]]; then
      info "  Removing the lab directory."
      rm -r "$g_LAB_PATH"
    fi

    # Remove lab symbolic link.
    if [[ -h "$g_LAB_SYMLINK" ]]; then
      info "  Removing the lab symbolic link."
      rm -r "$g_LAB_SYMLINK"
    fi

    info "  Removing installed packages."
    #CH05
    uninstall_package net-tools

    #CH06
    uninstall_package lynx
  
    #CH07
    uninstall_package tree

    #CH09
    uninstall_package acl

    #CH11
    uninstall_package zip

    #CH12
    uninstall_package quota

    #CH16
    uninstall_package sysstat
    uninstall_package procinfo
    uninstall_package ioping

    #CH20
    uninstall_package network-manager
    uninstall_package traceroute
    uninstall_package nmap
    uninstall_package iftop

    #CH21
    uninstall_package whois

    #CH23
    uninstall_package at

    #CH27
    uninstall_package git

    # REMOVE MAINTENANCE SCRIPTS
    if [ -f "/root/machine-id.sh" ]; then
      info "  Removing the machine-id.sh maintenance script."
      rm "/root/machine-id.sh"
    fi

    if [ -f "/root/reset-nic.sh" ]; then
      info "  Removing the reset-nic.sh maintenance script."
      rm "/root/reset-nic.sh"
    fi

    if [ -f "/root/template-prep.sh" ]; then
      info "  Removing the template-prep.sh maintenance script."
      rm "/root/template-prep.sh"
    fi
  fi

  info "The lab enviornment has been uninstalled."
  info "To reinstall the lab enviornment, download the most recent version of this script from ${g_SCRIPT_URL}."
}

# (uninstall_package) - Install software packages. Passed arguements ($1) package name.
function uninstall_package ()
{
  local l_package="$1"

  # Uninstall packages and report error conditions as warning.
  info "    Uninstalling the $l_package package(s)."
  apt -y remove $l_package -qq &>/dev/null
  if [ $? -ne 0 ]; then
    warning "      The $l_package package uninstallation failed with an error condition."
  fi
}
# *************************** script specific functions ************************

# ##############################################################################
# SYSTEM BASE - Setup system for the rest of the labs.
function base ()
{
  local l_LABUSER_PASS="P@\$\$w0rd"

  # Ensure we have the necessary block devices available.
  if [ $(lsblk | grep -o "^sd[a-z]" | wc -l) -ne 8 ]; then
    error "You do not have enough block devices available to complete the labs. LAB12-02, \nLAB18-01, LAB19-01 and LAB19-02 require these block devices to be made \navailable. Please add these block devices before continuing with installation.\n\nFor information on how to add these devices, please contact your instructor.\n"
  fi

  info "Installing the base lab enviornment."

  info "  Installing the required system packages."
  info "  Checking package management sanity."
  apt update -qq &>/dev/null
  if [ $? -ne 0 ]; then
    error "An issue exists in the package manager, please address and run this script again."
  fi

  #CH05
  install_package net-tools

  #CH06
  install_package lynx

  #CH07
  install_package tree

  #CH09
  install_package acl

  #CH11
  install_package zip

  #CH12
  install_package quota

  #CH16
  install_package sysstat
  install_package procinfo
  install_package ioping

  #CH20
  install_package network-manager
  install_package traceroute
  install_package nmap
  install_package iftop

  #CH21
  install_package whois

  #CH23
  install_package at

  #CH27
  install_package git

  # BACKUP THE FILESYSTEM TABLE
  info "Backing up the filesystem table."
  cp -f /etc/fstab{,.bak}

  # ADD GROUPS
  info "  Creating security groups."

  info "    Creating the labusers1 group."
  if ! [ $(getent group labusers1) ]; then
    groupadd -g 1001 labusers1
  else
    warning "A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the labusers2 group."
  if ! [ $(getent group labusers2) ]; then
    groupadd -g 1002 labusers2
  else
    warning "A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the labusers3 group."
  if ! [ $(getent group labusers3) ]; then
    groupadd -g 1003 labusers3
  else
    warning "A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the labusers9 group."
  if ! [ $(getent group labusers9) ]; then
    groupadd -g 509 labusers9
  else
    warning "A previous lab enviornment may not have been cleaned up corretly."
  fi

  # Ignore error when adding users, due to manually setting UID/GID.
  set +e
  set +u

  # UID 500 - mkisowa
  info "    Creating the mkisowa group."
  if ! [ $(getent group mkisowa) ]; then
    groupadd -g 500 mkisowa
  else
    warning "A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the mkisowa account."
  if ! [ "`id -u mkisowa 2>/dev/null`" ]; then
    useradd --comment "Dr. Matthew Kisow" --uid 500 --create-home --no-user-group --gid 500 --groups adm,cdrom,sudo,dip,plugdev,lxd --shell /bin/bash mkisowa
    chown mkisowa:mkisowa /home/mkisowa
    echo 'mkisowa:Ch354vk!0010' | chpasswd
  
    sed -i '/# User privilege specification/ a mkisowa ALL=(ALL) NOPASSWD:ALL' /etc/sudoers
  else
    warning "    A previous lab enviornment may not have been cleaned up corretly."
  fi

  # UID 510 - ccacits
  info "    Creating the ccacits group."
  if ! [ $(getent group ccacits) ]; then
    groupadd -g 510 ccacits
  else
    warning "A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the ccacits account."
  if ! [ "`id -u ccacits 2>/dev/null`" ]; then
    useradd -c "CCAC ITS" --uid 510 --create-home --no-user-group --gid 510 --groups adm,cdrom,sudo,dip,plugdev,lxd --shell /bin/bash ccacits
    chown ccacits:ccacits /home/ccacits
    echo 'ccacits:2T$qj3Dd7aO1bQiZ' | chpasswd
  
    sed -i '/# User privilege specification/ a ccacits ALL=(ALL) NOPASSWD:ALL' /etc/sudoers
  else
    warning "    A previous lab enviornment may not have been cleaned up corretly."
  fi

  # ADD USERS
  info "  Creating lab users."
  info "    Creating the labuser1 account."
  if ! [ "`id -u labuser1 2>/dev/null`" ]; then
    useradd --comment "Lab User 1" --uid 501 --create-home --no-user-group --gid 1001 --groups adm,cdrom,sudo,dip,plugdev,lxd,labusers2 --shell /bin/bash labuser1
    usermod -g labusers1 labuser1 &>/dev/null
    chown labuser1:labusers1 /home/labuser1
    echo 'labuser1:P@$$w0rd' | chpasswd
  else
    warning "    A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the labuser2 account."
  if ! [ "`id -u labuser2 2>/dev/null`" ]; then
    useradd --comment "Lab User 2" --uid 1002 --create-home --no-user-group --gid 1002 --shell /bin/bash labuser2
    chown labuser2:labusers2 /home/labuser2
    echo 'labuser2:P@$$w0rd' | chpasswd
  else
    warning "    A previous lab enviornment may not have been cleaned up corretly."
  fi

  info "    Creating the labuser3 account."
  if ! [ "`id -u labuser3 2>/dev/null`" ]; then
    useradd --comment "Lab User 3" --uid 1003 --create-home --no-user-group --gid 1001 --groups labusers2 --shell /bin/bash labuser3
    chown labuser3:labusers3 /home/labuser3
    echo 'labuser3:P@$$w0rd' | chpasswd
  else
    warning "    A previous lab enviornment may not have been cleaned up corretly."
  fi

  # Reapply error trapping.
  set -e
  set -u

  # CREATE DIRECTORY
  info "  Creating the lab directories and symlink."
  if ! [ -d "$g_LAB_PATH" ]; then
    mkdir "$g_LAB_PATH"
  fi

  # CREATE SYMLINK
  if ! [[ -h "$g_LAB_SYMLINK" ]]; then
    ln -s "$g_LAB_PATH" "$g_LAB_SYMLINK"
  fi

  # SET SECURITY
  info "  Setting the ownership and permissions for the lab enviornment."
  chown root:labusers1 "$g_LAB_PATH"
  chmod 02755 "$g_LAB_PATH"

  # Set a sourceable file that lists the install date.
  info "  Creating installation timestamp file."
  l_TIMESTAMP=$(echo $(date +%d-%b-%Y) | tr '[:lower:]' '[:upper:]')
  if [ -f "$g_LAB_PATH/.lid" ]; then
    warning "A previous lab enviornment may not have been cleaned up corretly."
    rm "$g_LAB_PATH/.lid"
  fi

  printf "g_INSTALL_DATE=$l_TIMESTAMP\n" >> "$g_LAB_PATH/.lid"
  chown root:root "$g_LAB_PATH/.lid"
  chmod 00440 "$g_LAB_PATH/.lid"

  # Create Virtual Machine Maintenance Scripts
  info "Deploying maintenance scripts."

  # (machine-id.sh) - A script to reset GUID of a VM that was not properly reset during creation.
  info "  Creating the machine-id.sh maintenance script."
  cat > "/root/machine-id.sh" <<-EOF
	#!/bin/bash
	#Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
	#Dr. Matthew Kisow <mkisow@ccac.edu>

	rm -f /etc/machine-id
	dbus-uuidgen --ensure=/etc/machine-id
	chmod 444 /etc/machine-id
	ip addr flush dev ens160
	init 0
	EOF

	info "  Setting the ownership and permissions for the machine-id.sh maintenance script."
	chown root:root "/root/machine-id.sh"
	chmod 775 "/root/machine-id.sh"

  # (reset-nic.sh) - A script to reset the network card.
  info "  Creating the reset-nic.sh maintenance script."
	cat > "/root/reset-nic.sh" <<-'EOF'
	#!/bin/bash
	#Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
	#Dr. Matthew Kisow <mkisow@ccac.edu>

	ip addr flush dev ens160
	EOF

  info "  Setting the ownership and permissions for the reset-nic.sh maintenance script."
  chown root:root "/root/reset-nic.sh"
  chmod 775 "/root/reset-nic.sh"

  # (template-prep.sh) - A script to prepare the virtual machine for cloning.
  info "  Creating the template-prep.sh maintenance script."
	cat > "/root/template-prep.sh" <<-'EOF'
	#!/bin/bash
	#Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
	#Dr. Matthew Kisow <mkisow@ccac.edu>

	# Check if script is running as root first
	if [[ "$(whoami)" != "root" ]]; then
	echo "$(tput setaf 1)Script must be ran as root! Example: sudo ./template-prep.sh$(tput sgr 0)"
	exit 1
	fi

	#Shutdown SSH
	systemctl disable ssh
	systemctl stop ssh

	#Clean Cloud
	if [ "$(which cloud-init)" == "" ]; then
		cloud-init clean
		dpkg-reconfigure cloud-init
		apt purge cloud-init -y
		rm -rf /etc/cloud/
		rm -rf /var/lib/cloud/
	fi

	#Update
	apt update
	apt upgrade -y
	apt autoremove -y
	apt clean

	#Reset Resolver
	truncate -s0 /etc/resolv.conf

	#Reset machine-id
	truncate -s0 /etc/machine-id
	rm /var/lib/dbus/machine-id
	ln -s /etc/machine-id /var/lib/dbus/machine-id

	#Set DHCP to MAC address in netplan.
	mv /etc/netplan/00-installer-config{.yaml,.bak}
	echo "network:"                   >> /etc/netplan/00-installer-config.yaml
	echo "  version: 2"               >> /etc/netplan/00-installer-config.yaml
	echo "  renderer: networkd"       >> /etc/netplan/00-installer-config.yaml
	echo "  ethernets:"               >> /etc/netplan/00-installer-config.yaml
	echo "    default:"               >> /etc/netplan/00-installer-config.yaml
	echo "      match:"               >> /etc/netplan/00-installer-config.yaml
	echo "        name: e*"           >> /etc/netplan/00-installer-config.yaml
	echo "      dhcp4: yes"           >> /etc/netplan/00-installer-config.yaml
	echo "      dhcp-identifier: mac" >> /etc/netplan/00-installer-config.yaml

	chmod 600 /etc/netplan/00-installer-config.yaml
	#Cleanup and Shutdown
	truncate -s0 ~/.bash_history
	truncate -s0 /home/mkisowa/.bash_history
	shutdown -h now
	EOF

  info "  Setting the ownership and permissions for the template-prep.sh maintenance script."
  chown root:root "/root/template-prep.sh"
  chmod 775 "/root/template-prep.sh"

  # Create script to move installation script to labs directory
  if ! [ "$g_SCRIPT_PATH" == "$g_LAB_PATH" ]; then
    info "Moving the installation script then continuing the installation."
    printf '#!/bin/bash\n\n' >> install.sh

    if [ "$g_SCRIPT_PATH" == "/" ]; then
      printf "mv \"/$g_PROGNAME\" \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
      printf "chmod 750 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
      printf "chown root:labusers1 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
      printf "rm \"/install.sh\"\n" >> install.sh
      printf "exec /bin/bash \"$g_LAB_PATH/$g_PROGNAME\" -i -z\n" >> install.sh
    else
      printf "mv \"$g_SCRIPT_PATH/$g_PROGNAME\" \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
      printf "chmod 750 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
      printf "chown root:labusers1 \"$g_LAB_PATH/$g_PROGNAME\"\n" >> install.sh
      printf "rm \"$g_SCRIPT_PATH/install.sh\"\n" >> install.sh
      printf "exec /bin/bash \"$g_LAB_PATH/$g_PROGNAME\" -i -z\n" >> install.sh
    fi

    chmod 750 "$g_SCRIPT_PATH/install.sh"
    chown mkisowa:labusers1 "$g_SCRIPT_PATH/install.sh"
    exec /bin/bash "$g_SCRIPT_PATH/install.sh"
  fi
}

# CHAPTER - Name of Chapter - Passed arguements ($1) the operation are we performing, ($2) the chapter/lab number.
# CH01 - Installing (No Labs)
function chapter_1 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH02 - Package Management (No Labs)
function chapter_2 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH03 - Virtualization (No Labs)
function chapter_3 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH04 - The Boot Process (No Labs)
function chapter_4 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH05 - Managing System Services
#        Lab Validated: 06-JUN-2023
function chapter_5 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""
  local l_HIST_FILE=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      ;;
    -g)
      info "Grading the lab(s) for chapter: $l_CH_NUM."

      info "  Getting working directory for chapter $l_CH_NUM."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      capture_commands 1 $l_WORKING_DIRECTORY

      #1
      if grep -q "systemctl status ssh" $l_WORKING_DIRECTORY/command-history.txt; then
        info "systemctl status ssh - found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt

        # If this command is supposed to be run on multiple occurances, then remove the first.
        sed -i '0,/^systemctl status ssh/{//d;}' $l_WORKING_DIRECTORY/command-history.txt
      else
        warning "systemctl status ssh - not found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      fi

      #2
      if grep -q "sudo systemctl enable ssh" $l_WORKING_DIRECTORY/command-history.txt; then
        info "sudo systemctl enable ssh - found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      else
        warning "sudo systemctl enable ssh - not found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      fi

      #3
      if grep -q "systemctl status ssh" $l_WORKING_DIRECTORY/command-history.txt; then
        info "systemctl status ssh - found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt

        # If this command is supposed to be run on multiple occurances, then remove the first.
        sed -i '0,/^systemctl status ssh/{//d;}' $l_WORKING_DIRECTORY/command-history.txt
      else
        warning "systemctl status ssh - not found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      fi

      #4
      if grep -q "sudo systemctl start ssh" $l_WORKING_DIRECTORY/command-history.txt; then
        info "sudo systemctl start ssh - found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      else
        warning "sudo systemctl start ssh - not found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      fi

      #5
      if grep -q "systemctl status ssh" $l_WORKING_DIRECTORY/command-history.txt; then
        info "systemctl status ssh - found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt

        # If this command is supposed to be run on multiple occurances, then remove the first.
        sed -i '0,/^systemctl status ssh/{//d;}' $l_WORKING_DIRECTORY/command-history.txt
      else
        warning "systemctl status ssh - not found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      fi

      #6
      if grep -q "runlevel" $l_WORKING_DIRECTORY/command-history.txt; then
        info "runlevel - found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      else
        warning "runlevel - not found!" >> $l_WORKING_DIRECTORY/grading-$l_CH_NUM.txt
      fi
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 00750 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Disable SSH
      info "  Stopping the SSH service."
      systemctl stop ssh 2>/dev/null
      info "  Disabling the SSH service."
      systemctl disable ssh 2>/dev/null

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH06 - System Performance
#        Lab Validated: 06-JUN-2023
function chapter_6 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02774 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # CREATE SCRIPT
      printf '#!/bin/bash\n\n' >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "# LAB6-01 - System Performance\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "# Copyright © 2022 - 2023\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "# Dr. Matthew Kisow\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "# CC BY-NC-ND 4.0\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "clear\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "echo \"Spawning processes for LAB6-01...\"\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "for i in {1..10}; do (lynx ccac.edu > /dev/null) & done\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "while true; do sleep 86400; done\n\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      printf "exit 0\n" >> "$l_WORKING_DIRECTORY/lab06-01.sh"
      chmod 00750 "$l_WORKING_DIRECTORY/lab06-01.sh"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH07 - File Manipulation
#        Lab Validated: 06-JUN-2023
function chapter_7 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      chown labuser1:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02774 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # CREATE FILE STRUCTURE
      # Ship Capitans Directories
      mkdir "$l_WORKING_DIRECTORY/Christopher Pike"
      mkdir "$l_WORKING_DIRECTORY/James T. Kirk"
      mkdir "$l_WORKING_DIRECTORY/Montgomery Scott"
      mkdir "$l_WORKING_DIRECTORY/Hikaru Sulu"
      mkdir "$l_WORKING_DIRECTORY/Nyota Uhura"

      # Starfleet Federation Directory
      mkdir "$l_WORKING_DIRECTORY/Starfleet Federation"

      # Numbered Directory
      mkdir "$l_WORKING_DIRECTORY/numbered"

      # Difference Directory
      mkdir "$l_WORKING_DIRECTORY/difference"
      mkdir -p "$l_WORKING_DIRECTORY/difference"/{1..3}
      touch "$l_WORKING_DIRECTORY/difference"/README
      mkdir -p "$l_WORKING_DIRECTORY/difference/1"/{1..3}
      touch "$l_WORKING_DIRECTORY/difference/1"/file{1..2}.{txt,html}
      printf '<head>\nHello Zeus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/1/file3.html"
      printf '<head>\nHello Hera!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/1/file2.html"
      printf '<head>\nHello Aphrodite!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/1/file3.html"
      printf '7h3 qu1ck 8r0wn f0x jump5 0ver 7h3 142y d09!\n' > "$l_WORKING_DIRECTORY/difference/1/file3.txt"
      mkdir -p "$l_WORKING_DIRECTORY/difference/2"/{1..5}
      touch "$l_WORKING_DIRECTORY/difference/2"/file{1..5}.{txt,html}
      printf '<head>\nHello Zeus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file1.html"
      printf '<head>\nHello Hera!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file2.html"
      printf '<head>\nHello Aphrodite!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file3.html"
      printf '<head>\nGoodbye Eros!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file4.html"
      printf '<head>\nGoodbye Athena!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/2/file5.html"
      printf 'The quick brown fox jumps over the lazy dog!\n' > "$l_WORKING_DIRECTORY/difference/2/file4.txt"
      mkdir -p "$l_WORKING_DIRECTORY/difference/3"/{1..7}
      touch "$l_WORKING_DIRECTORY/difference/3"/file{1..7}.{txt,html}
      printf '<head>\nHello Zeus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file1.html"
      printf '<head>\nHello Hera!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file2.html"
      printf '<head>\nGoodbye Aphrodite!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file3.html"
      printf '<head>\nHello Eros!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file4.html"
      printf '<head>\nGoodbye Athena!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file5.html"
      printf '<head>\nHello Hephaestus!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file6.html"
      printf '<head>\nGoodbye Ares!\n<\head>\n' > "$l_WORKING_DIRECTORY/difference/3/file7.html"
      printf 'The quick brown fox jumps over the lazy dog!\n' > "$l_WORKING_DIRECTORY/difference/3/file1.txt"
      printf '7h3 qu1ck 8r0wn f0x jump5 0v3r 7h3 142y d09!\n' > "$l_WORKING_DIRECTORY/difference/3/file2.txt"
      printf 'The quick brown fox jumps over the lazy dog!\n' > "$l_WORKING_DIRECTORY/difference/3/file4.txt"

      # USS Enterprise Quotes
      printf "Our mission? We explore. We seek out new life and new civilizations. We boldly go where no one has gone before.\n- Christopher Pike, 2259\n\n" >> "$l_WORKING_DIRECTORY/Christopher Pike/USS Enterprise"
      printf "All I ask is a tall ship and a star to steer her by.\n- James T. Kirk, 2268" >> "$l_WORKING_DIRECTORY/Christopher Pike/USS Enterprise"

      touch "$l_WORKING_DIRECTORY/Christopher Pike/USS Discovery"

      # Hard Link
      ln "$l_WORKING_DIRECTORY/Christopher Pike/USS Enterprise" "$l_WORKING_DIRECTORY/James T. Kirk/USS Enterprise"

      # USS Enterprise-A Quotes
      printf "My friends, we've come home.\n- James T. Kirk, 2286" >> "$l_WORKING_DIRECTORY/James T. Kirk/USS Enterprise-A"

      # USS Excelsior Quotes
      printf "My God, that's a big ship.\nNot so big as her captain, I think.\n- Leonard McCoy and Montgomery Scott, 2293" >> "$l_WORKING_DIRECTORY/Montgomery Scott/USS Excelsior"

      # Soft Link
      ln -s "$l_WORKING_DIRECTORY/Montgomery Scott/USS Excelsior" "$l_WORKING_DIRECTORY/Hikaru Sulu/USS Excelsior"
      touch "$l_WORKING_DIRECTORY/Nyota Uhura/USS Leondegrance"

      # SET SECURITY
      chown labuser1:labusers1 -R "$l_WORKING_DIRECTORY"/*
      chmod 00755 -R "$l_WORKING_DIRECTORY"/*

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH08 - File Processing
#        Lab Validated: 07-JUN-2023
function chapter_8 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      # This directory needs to be writable for #17 and #21.
      chmod 02774 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # SCRIPT - HE WHO SHALL NOT BE NAMED
      info "   Creating hwsnbn.sh script."
      printf '#!/bin/sh\n\n' >> "$l_WORKING_DIRECTORY/hwsnbn.sh"
      printf "sed -i 's/Tom Marvolo Riddle/He who shall not be named/g' /labs/CH08/wizard-names.txt\n" >> "$l_WORKING_DIRECTORY/hwsnbn.sh"
      printf "sed -i 's/Lord Voldemort/He who shall not be named/g' /labs/CH08/wizard-names.txt\n" >> "$l_WORKING_DIRECTORY/hwsnbn.sh"
      chown root:root "$l_WORKING_DIRECTORY/hwsnbn.sh"
      chmod 00700 "$l_WORKING_DIRECTORY/hwsnbn.sh"

      # Remove ANY existing crontab entries from previous script runs.
      info "   Removing any old hwsnbn.sh residue from crontab."
      sed -i -e '/1  \*    \* \* \*   root    \/labs\/CH08\/hwsnbn.sh/d' /etc/crontab

      # Apply crontab entry for hwsnbn.sh.
      info "   Applying new hwsnbn.sh entry to crontab."
      sed -i "`wc -l < /etc/crontab` i */1  *    * * *   root    /labs/CH08/hwsnbn.sh" /etc/crontab

      # frankenstein letter
			cat > "$l_WORKING_DIRECTORY/frankenstein-letter.txt" <<-EOF
			To Mrs. Saville, England
			St. Petersburgh, Dec. 11th, 17—

			You will rejoice to hear that no disaster has accompanied
			the commencement of an enterprise which you have regard-
			ed with such evil forebodings. I arrived here yesterday, and
			my first task is to assure my dear sister of my welfare and
			increasing confidence in the success of my undertaking.
			I am already far north of London, and as I walk in the
			streets of Petersburgh, I feel a cold northern breeze play
			upon my cheeks, which braces my nerves and fills me
			with delight. Do you understand this feeling? This breeze,
			which has travelled from the regions towards which I am
			advancing, gives me a foretaste of those icy climes. Inspir-
			ited by this wind of promise, my daydreams become more
			fervent and vivid. I try in vain to be persuaded that the
			pole is the seat of frost and desolation; it ever presents it-
			self to my imagination as the region of beauty and delight.

			There, Margaret, the sun is forever visible, its broad disk just
			skirting the horizon and diffusing a perpetual splendour.
			There—for with your leave, my sister, I will put some trust
			in preceding navigators— there snow and frost are ban-
			ished; and, sailing over a calm sea, we may be wafted to

			a land surpassing in wonders and in beauty every region
			hitherto discovered on the habitable globe. Its productions
			and features may be without example, as the phenomena of
			the heavenly bodies undoubtedly are in those undiscovered
			solitudes. What may not be expected in a country of eter-
			nal light? I may there discover the wondrous power which
			attracts the needle and may regulate a thousand celestial
			observations that require only this voyage to render their
			seeming eccentricities consistent forever. I shall satiate my
			ardent curiosity with the sight of a part of the world never
			before visited, and may tread a land never before imprinted
			by the foot of man. These are my enticements, and they are
			sufficient to conquer all fear of danger or death and to in-
			duce me to commence this labourious voyage with the joy
			a child feels when he embarks in a little boat, with his holi-
			day mates, on an expedition of discovery up his native river.

			But supposing all these conjectures to be false, you cannot
			contest the inestimable benefit which I shall confer on all
			mankind, to the last generation, by discovering a passage
			near the pole to those countries, to reach which at present
			so many months are requisite; or by ascertaining the secret
			of the magnet, which, if at all possible, can only be effected
			by an undertaking such as mine.

			These reflections have dispelled the agitation with which
			I began my letter, and I feel my heart glow with an enthu-
			siasm which elevates me to heaven, for nothing contributes
			so much to tranquillize the mind as a steady purpose—a
			point on which the soul may fix its intellectual eye. This
			expedition has been the favourite dream of my early years.

			I have read with ardour the accounts of the various voyag-
			es which have been made in the prospect of arriving at the
			North Pacific Ocean through the seas which surround the
			pole. You may remember that a history of all the voyages
			made for purposes of discovery composed the whole of our
			good Uncle Thomas' library. My education was neglected,
			yet I was passionately fond of reading. These volumes were
			my study day and night, and my familiarity with them in-
			creased that regret which I had felt, as a child, on learning
			that my father's dying injunction had forbidden my uncle to
			allow me to embark in a seafaring life.

			These visions faded when I perused, for the first time,
			those poets whose effusions entranced my soul and lifted
			it to heaven. I also became a poet and for one year lived in
			a paradise of my own creation; I imagined that I also might
			obtain a niche in the temple where the names of Homer and
			Shakespeare are consecrated. You are well acquainted with
			my failure and how heavily I bore the disappointment. But
			just at that time I inherited the fortune of my cousin, and
			my thoughts were turned into the channel of their earlier
			bent.

			Six years have passed since I resolved on my present
			undertaking. I can, even now, remember the hour from
			which I dedicated myself to this great enterprise. I com-
			menced by inuring my body to hardship. I accompanied
			the whale-fishers on several expeditions to the North Sea; I
			voluntarily endured cold, famine, thirst, and want of sleep;
			I often worked harder than the common sailors during the
			day and devoted my nights to the study of mathematics, the
			theory of medicine, and those branches of physical science
			from which a naval adventurer might derive the greatest
			practical advantage. Twice I actually hired myself as an un-
			der-mate in a Greenland whaler, and acquitted myself to
			admiration. I must own I felt a little proud when my captain
			offered me the second dignity in the vessel and entreated
			me to remain with the greatest earnestness, so valuable did
			he consider my services.

			And now, dear Margaret, do I not deserve to accomplish
			some great purpose? My life might have been passed in
			ease and luxury, but I preferred glory to every enticement
			that wealth placed in my path. Oh, that some encouraging
			voice would answer in the affirmative! My courage and my
			resolution is firm; but my hopes fluctuate, and my spirits
			are often depressed. I am about to proceed on a long and
			difficult voyage, the emergencies of which will demand all
			my fortitude: I am required not only to raise the spirits of
			others, but sometimes to sustain my own, when theirs are
			failing.

			This is the most favourable period for travelling in Russia.
			They fly quickly over the snow in their sledges; the motion is
			pleasant, and, in my opinion, far more agreeable than that
			of an English stagecoach. The cold is not excessive, if you
			are wrapped in furs— a dress which I have already adopted,
			for there is a great difference between walking the deck and
			remaining seated motionless for hours, when no exercise
			prevents the blood from actually freezing in your veins. I
			have no ambition to lose my life on the post-road between
			St. Petersburgh and Archangel.

			I shall depart for the latter town in a fortnight or three
			weeks; and my intention is to hire a ship there, which can
			easily be done by paying the insurance for the owner, and
			to engage as many sailors as I think necessary among those
			who are accustomed to the whale-fishing. I do not intend
			to sail until the month of June; and when shall I return?

			Ah, dear sister, how can I answer this question? If I suc-
			ceed, many, many months, perhaps years, will pass before
			you and I may meet. If I fail, you will see me again soon, or
			never.

			Farewell, my dear, excellent Margaret. Heaven shower
			down blessings on you, and save me, that I may again and
			again testify my gratitude for all your love and kindness.

			Your affectionate brother,
			R. Walton
			EOF

      #Students will not be permitted to edit this file.
      chmod 644 "$l_WORKING_DIRECTORY/frankenstein-letter.txt"

      # lorem-ipsum
			cat > "$l_WORKING_DIRECTORY/lorem-ipsum.txt" <<-EOF
			Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
			incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
			nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
			Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
			fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
			culpa qui officia deserunt mollit anim id est laborum.

			Nor is there anyone who loves or pursues or desires to obtain niap of itself,
			because it is niap, but occasionally secnatsmucric occur in hcihw toil dna niap
			can procure him some great pleasure.

			Roman Philosopher, Cicero
			EOF

      #Change permissions for the changes under the sed command #17
      chmod 664 "$l_WORKING_DIRECTORY/lorem-ipsum.txt"

      # numbers
			cat > "$l_WORKING_DIRECTORY/numbers.txt" <<-EOF
			22
			67
			189
			13
			88
			99
			3
			15
			8
			68
			113
			74
			9
			58
			77
			19
			115
			34
			100
			91
			EOF

      #Students will not be permitted to edit this file.
      chmod 644 "$l_WORKING_DIRECTORY/numbers.txt"

      # starfleet-ships
			cat > "$l_WORKING_DIRECTORY/starfleet-ships.txt" <<-EOF
			Danube-class,USS Rubicon,NCC-72936
			unknown,USS Farouk El-Baz,NCC-31823
			Renaissance-class,USS Hornet,NCC-45231
			Nebula-class,USS Sutherland,NCC-72015
			unknown,USS Endeavour,NCC-71805
			unknown,USS Whorfin,NCC-1024
			Merced-class,USS Trieste,NCC-37124
			unknown,USS Merrimac,NCC-1715
			Prometheus-class,USS Prometheus,NX-59650
			Transport ship,USS Constantinople,NCC-43622
			Inquiry-class,USS Rustazh,NCC-86503
			New Orleans-class,USS Thomas Paine,NCC-65530
			Sagan-class,USS Stargazer,NCC-82893
			Galaxy-class,USS Odyssey,NCC-71832
			Dreadnought,USS Entente,NCC-2120
			Apollo-class,USS Ajax,NCC-11574
			Walker-class,USS Shenzhou,NCC-1227
			California-class,USS Oakland,NCC-75012
			Constitution-class,USS Potemkin,NCC-1657
			Sovereign-class,USS Pachacuti,NCC-74181
			unknown,unknown,NCC-31054
			Merian-class,USS Mitchell,NCC-325027
			unknown,USS Endeavour,NCC-25330
			unknown,USS Omaha Nebraska,NCC-5252
			Galaxy-class,USS Yamato,NCC-71807
			Dresselhaus-type,USS Dresselhaus,NCC-325019
			unknown,USS Exeter,NCC-26531
			Ambassador-class,USS Yamaguchi,NCC-26510
			Excelsior-class,USS Repulse,NCC-2544
			Miranda-class,USS ShirKahr,NCC-31905
			Inquiry-class,USS Nathan Hale,NCC-86501
			unknown,USS Nobel,NCC-55012
			unknown,unknown,NCC-71325
			unknown,USS Atlantis,NCC-72007
			Danube-class,USS Ganges,NCC-72454
			Antares-type,Woden,NCC-325
			Inquiry-class,USS Magellan,NCC-86509
			Nebula-class,USS Bonchune,NCC-70915
			unknown,USS Atlantis,NCC-32710
			Federation mission scoutship,unknown,NCC-75227
			Akira-class,USS Thunderchild,NCC-63549
			unknown,USS Tecumseh,NCC-14934
			Nimitz-class,USS Europa,NCC-1648
			Luna-class,USS Titan,NCC-80102
			Freedom-class,USS Franklin,NX-326
			California-class,USS Cerritos,NCC-75567
			unknown,USS Tikhov,NCC-1067-M
			Nebula-class,USS Bellerophon,NCC-62048
			Constitution-class,USS Korolev,NCC-2014
			Sovereign-class,USS Gilgamesh,NCC-74669
			Obena-class,USS Archimedes,NCC-83002
			Ambassador-class,USS Excalibur,NCC-26517
			Defiant-class,USS Sao Paulo,NCC-75633
			Curry-type,Raging Queen,NCC-42264
			unknown,unknown,NCC-1831
			Sutherland-class,USS Ibn al-Haytham,NCC-91965
			Nebula-class,USS Monitor,NCC-61826
			Constellation-class,USS Hathaway,NCC-2593
			Sovereign-class,USS Venture,NCC-75306
			Constitution-class,USS Enterprise-A,NCC-1701-A
			Yeager-type,USS Yeager,NCC-65674
			Ptolemy-class,unknown,NCC-3801
			Antares-type,Antares,NCC-501
			New Orleans-class,USS Kyushu,NCC-65491
			Excelsior-class,USS Valley Forge,NCC-43305
			unknown,USS Wellington,NCC-33821
			Springfield-class,USS Chekov,NCC-57302
			Reliant-class,USS Uhura,NCC-90214
			Sovereign-class,USS Okuda,NCC-74107
			Oberth-class,USS Oberth,NCC-602
			Inquiry-class,USS Zheng He,NCC-86505
			unknown,USS Equicon,NCC-1988
			Excelsior-class,USS Excelsior,NCC-2000
			Sutherland-class,USS Huygens,NCC-91814
			Nebula-class,USS Prometheus,NCC-71201
			Oberth-class,USS Tsiolkovsky,NCC-53911
			Constitution-class,USS Endeavour,NCC-1895
			Sovereign-class,USS Hrothgar,NCC-74975
			Antares-type,Yorkshire,NCC-330
			Credence-type,USS Credence,NCC-2804
			Korolev-class,USS Goddard,NCC-59621
			Excelsior-class,USS Melbourne,NCC-62043
			Inquiry-class,USS Shackleton,NCC-86517
			unknown,USS Non Sequitur,NCC-12999
			Excelsior-class,USS Lakota,NCC-42768
			Constellation-class,USS Constellation,NX-1974
			Galaxy-class,USS Venture,NCC-71854
			Constitution-class,USS Hood,NCC-1703
			Apollo-class,USS Clement,NCC-12537
			Curry-type,USS Curry,NCC-42254
			Miranda-class,USS Antares,NCC-9844
			Shepard-class,USS Gagarin,NCC-1309
			unknown,USS Max Plank,NCC-28573
			Renaissance-class,USS Aries,NCC-45167
			Challenger-class,USS Buran,NCC-57580
			Daedalus-class,USS Essex,NCC-173
			Constitution-class,USS Ahwahnee,NCC-2048
			unknown,USS Gremlin,NCC-72927
			Oberth-class,USS Grissom,NCC-638
			Oberth-class,USS Cochrane,NCC-59318
			Defiant-class,USS Valiant,NCC-74210
			unknown,USS Apollo,NCC-30000
			Constitution-class,USS Exeter,NCC-1672
			California-class,USS Solvang,NCC-12101
			unknown,unknown,NCC-1697
			Constitution-class,USS Emden,NCC-1856
			Eisenberg-class,USS Nog,NCC-325070
			Ross-class,USS Yi Sun-Sin,NCC-76545
			unknown,USS Kelvin,NCC-0514
			Excelsior II-class,USS Eureka,NCC-42023
			unknown,USS Archer,NCC-627
			Galaxy-class,USS Galaxy,NCC-70637
			Bonaventure-type,Bonaventure,10281NCC
			Hiawatha-type,USS Hiawatha,NCC-815
			Nebula-class,USS Honshu,NCC-60205
			Reliant-class,USS Reliant,NCC-90200
			Crossfield-class,USS Glenn,NCC-1030
			unknown,USS John Muir,NCC-1732
			Sovereign-class,USS Van Citters,NCC-72504
			Luna-class,USS Europa,NCC-80104
			Cheyenne-class,USS Ahwahnee,NCC-71620
			Nebula-class,USS Phoenix,NCC-65420
			California-class,USS Carlsbad,NCC-73110
			unknown,USS Eagle,NCC-956
			unknown,USS Akagi,NCC-62158
			unknown,unknown,NCC-31810
			California-class,USS Vacaville,NCC-72707
			Crossfield-class,USS Discovery,NCC-1031
			Sovereign-class,USS Valkyrie,NCC-74877
			Crossfield-class (refit),USS Discovery,NCC-1031-A
			Defiant-class,USS Defiant,NX-74205
			unknown,USS Hokule'a,NCC-31087
			Danube-class,USS Rio Grande,NCC-72452
			Luna-class,USS Oberon,NCC-80103
			unknown,unknown,NCC-1685
			unknown,USS Challenger,NCC-2032
			Antares-type,unknown,NCC-502
			unknown,USS Excelsior,NCC-21445
			unknown,USS Neil Armstrong,NCC-31806
			Sutherland-class,USS Almagest,NCC-91870
			unknown,USS Heart of Gold,NCC-42
			Parliament-class,USS Vancouver,NCC-70492
			unknown,unknown,NCC-30532
			Alka-Selsior-type,USS Alka-Selsior,NCC-1404
			Excelsior-class,USS Berlin,NCC-14232
			unknown,USS Tripoli,NCC-19386
			Niagara-class,USS Princeton,NCC-59804
			unknown,USS Voyager,NCC-74656-J
			Constitution-class,USS Enterprise,NCC-1701
			Lancelot-class,USS Leondegrance,NCC-2176
			unknown,USS Archer,NCC-44278
			Engle-class,USS T'Plana-Hath,NCC-1004
			Sombra-class,USS Peregrine,NCC-1549
			Oberth-class,USS Yosemite,NCC-19002
			Intrepid-class,USS Voyager,NCC-74656
			unknown,USS Da-Teplan,NCC-30087
			Centaur-type,USS Centaur,NCC-42043
			Galaxy-class,USS Challenger,NCC-71099
			Excelsior-class,USS Charleston,NCC-42285
			Nova-class,USS Equinox,NCC-72381
			Oberth-class,USS Pegasus,NCC-53847
			Constellation-class,USS Stargazer,NCC-2893
			Miranda-class,USS Brattain,NCC-21166
			Miranda-class,USS Reliant,NCC-1864
			Danube-class,USS Shenandoah,NCC-73024
			unknown,USS Nova,NCC-73515
			Constitution-class,USS Intrepid,NCC-1631
			Reliant-class,USS Clark,NCC-90206
			unknown,USS Endeavour,NCC-39272
			Ross-class,USS Vanguard,NCC-75148
			Constellation-class,USS Victory,NCC-9754
			unknown,unknown,NCC-85343[4]
			unknown,USS Wyoming,NCC-43730
			Magee-class,USS Shran,NCC-1413
			Danube-class,unknown,NCC-73918
			Elkins-type,USS Elkins,NCC-74121
			Miranda-class,USS Saratoga,NCC-1887
			Ambassador-class,USS Zhukov,NCC-26136
			Courage-class,USS Song,NCC-325084
			Miranda-class,USS Tian An Men,NCC-21382
			Class F shuttlecraft,unknown,NCC-K7
			unknown,USS Liberator,NCC-67016
			Constellation-class,unknown,NCC-7100
			unknown,USS Republic,NCC-1371
			Miranda-class,USS Lantree,NCC-1837
			Scout,USS Revere,NCC-595
			Miranda-class,USS Majestic,NCC-31060
			Ambassador-class,USS Enterprise,NCC-1701-C
			Oberth-class,USS Raman,NCC-29487
			Sovereign-class,USS Arsinoe,NCC-75307
			Sydney-class,USS Jenolan,NCC-2010
			Excelsior-class,USS Fredrickson,NCC-42111
			unknown,USS Tycho,NCC-85103
			Hermes-class,unknown,NCC-585
			unknown,USS Intrepid,NCC-38907
			Sovereign-class,USS Hutchinson,NCC-74957
			unknown,USS Kongo,NCC-1710
			unknown,unknown,NCC-85183[3]
			Constitution-class (31st century),USS Noble,NCC-325002
			unknown,USS Sherlock Holmes,NCC-221B
			Nebula-class,USS Leeds,NCC-70352
			unknown,USS Ticonderoga,NCC-87270
			Intrepid-class,USS Intrepid,NCC-74600
			unknown,USS Constellation,NCC-55817
			unknown,unknown,NCC-77567
			Norway-class,USS Budapest,NCC-64923
			Miranda-class,USS Saratoga,NCC-31911
			Soyuz-class,USS Bozeman,NCC-1941
			Dauntless-class,USS Dauntless,NCC-80816
			Excelsior-class,USS Fearless,NCC-14598
			Gagarin-class,USS Gagarin,NCC-97930
			Constitution-class,unknown,NCC-1700
			Hansando-type,USS Hansando,NCC-325072
			Protostar-type,USS Protostar,NX-76884
			California-class,USS Merced,NCC-87075
			Malachowski-class,USS Clarke,NCC-1661
			Antares-type,unknown,NCC-G1465[1]
			Oberth-class,USS Bonestell,NCC-31600
			Intrepid-class,USS Bellerophon,NCC-74705
			Luna-class,USS Luna,NCC-80101
			unknown,USS Nightwing,NCC-8342
			Nebula-class,USS Merrimac,NCC-61827
			Huron-type,USS Huron,NCC-F1913
			Saber-class,USS Yeager,NCC-61947
			Curiosity-class,USS Ibn Majid,NCC-75710
			unknown,USS Copernicus,NCC-58637
			unknown,USS Unicorn,NCC-85117
			Akira-class,USS Avalon,NCC-63887
			unknown,USS Scovill,NCC-1598
			Saladin-class,unknown,NCC-500
			Sovereign-class,USS Enterprise,NCC-1701-E
			unknown,USS Valiant,NCC-75418
			Excelsior-class,USS Hood,NCC-42296
			unknown,USS Helin,NCC-1692
			Excelsior-class,USS Potemkin,NCC-18253
			unknown,USS Yuri Gagarin,NCC-25306
			Constitution-class,USS Excalibur,NCC-1664
			unknown,USS Excalibur,NCC-21534
			Miranda-class,USS Trial,NCC-1948
			unknown,USS Ganymede,NCC-18451
			unknown,unknown,NCC-21335
			unknown,USS Giacconi,NCC-316608
			unknown,USS Saratoga,NCC-31640
			Constitution-class (31st century),USS Armstrong,NCC-317856
			Excelsior II-class,USS Excelsior,NCC-42037
			unknown,USS Yorktown,NCC-20045
			Nebula-class,USS Lexington,NCC-30405
			Constitution-class (31st century),USS Excalibur,NCC-1664-M
			Nebula-class,USS Farragut,NCC-60597
			California-class,USS Rubidoux,NCC-12109
			Daedalus-class,USS Horizon,NCC-176
			unknown,USS Zapata,NCC-33184
			unknown,unknown,NCC-1718
			unknown,USS Hermes,NCC-10376
			Shepard-class,USS Kerala,NCC-1255
			Galaxy-class,USS Enterprise,NCC-1701-D
			Constitution-class,USS Lexington,NCC-1709
			Sutherland-class,USS Sutherland,NCC-91800
			Cardenas-class,USS Yeager,NCC-1437
			unknown,USS Aleo,NCC-1981
			Bradbury-class,USS Bradbury,NX-72307
			Constitution-class,USS Defiant,NCC-1764
			Akira-class,USS Helios,NCC-63284
			Transport Container,unknown,NCC-4000
			Steamrunner-class,USS Appalachia,NCC-52136
			unknown,USS Sarajevo,NCC-38529
			Scout,USS Columbia,NCC-621
			Excelsior-class,USS Enterprise-B,NCC-1701-B
			Osler-type,Osler,NX-75300
			unknown,unknown,NCC-19585[2]
			Constitution-class,USS Constellation,NCC-1017
			Hoover-class,USS Edison,NCC-1683
			Sydney-class,USS Nash,NCC-2010-5
			California-class,USS Alhambra,NCC-75256
			Akira-class,USS Rabin,NCC-63293
			Oberth-class,USS Copernicus,NCC-640
			unknown,USS Springfield,NCC-1963
			Miranda-class,USS Nautilus,NCC-31910
			EOF

      #Students will not be permitted to edit this file.
      chmod 644 "$l_WORKING_DIRECTORY/starfleet-ships.txt"

      # wizard-names
			cat > "$l_WORKING_DIRECTORY/wizard-names.txt" <<-EOF
			Harry Potter
			Minerva McGonagall
			Albus Dumbledore
			Neville Longbottom
			Sirius Black
			Dennis Creevey
			Ron Weasley
			Hermione Granger
			Remus Lupin
			Draco Malfoy
			Alastor (Mad-Eye) Moody
			Newt Scamander
			EOF

      #Change permissions for the changes under the VIM command #21
      chmod 664 "$l_WORKING_DIRECTORY/wizard-names.txt"

      # written-numbers
			cat > "$l_WORKING_DIRECTORY/written-numbers.txt" <<-EOF
			one
			two
			three
			four
			five
			six
			seven
			eight
			nine
			ten
			EOF

      ##Students will not be permitted to edit this file.
      chmod 644 "$l_WORKING_DIRECTORY/written-numbers.txt"

      # written-numbers-search
			cat > "$l_WORKING_DIRECTORY/written-numbers-search.txt" <<-EOF
			one
			three
			eight
			twenty
			EOF

      ##Students will not be permitted to edit this file.
      chmod 644 "$l_WORKING_DIRECTORY/written-numbers-search.txt"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      reset_permissions_check

      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# CH09 - File Permissions
#        Lab Validated: 07-JUN-2023
function chapter_9 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable, would normally go here, this however, is a two-part lab, see below.
  #l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      # Set the lab number variable LAB09-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "There is no lab to roll forward for lab: $l_LAB."

      # Set the lab number variable LAB09-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "There is no lab to roll forward for lab: $l_LAB."

      cleanup_and_exit_with_code 1
      ;;
    -g)
      # Set the lab number variable LAB09-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "There is no grading module available for lab: $l_LAB."

      # Set the lab number variable LAB09-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "There is no grading module available for lab: $l_LAB."

      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02755 "$l_WORKING_DIRECTORY"

      # CREATE LAB09-01 - SET PERMISSIONS
      # Set the lab number variable LAB09-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # CREATE LAB DIRECTORY - SET PERMISSIONS
      mkdir "$l_WORKING_DIRECTORY/$l_LAB"
      chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
      chmod 02755 "$l_WORKING_DIRECTORY/$l_LAB"

      # Directory made here, permissions and ownership applied below.
      mkdir "$l_WORKING_DIRECTORY/$l_LAB/Constellations"

      # CREATE FILES
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/andromeda.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/antlia.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/apus.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/aquila.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/ara.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/aries.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/auriga.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/caelum.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/camelopardalis.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/cancer.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/canes.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/canis minor.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/canis major.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/capricornus.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Constellations/cassiopeia.txt"

      # SET PERMISSIONS FOR FILES
      chown labuser1:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/Constellations"
      chmod 00644 -R "$l_WORKING_DIRECTORY/$l_LAB/Constellations"
      chmod 00744 "$l_WORKING_DIRECTORY/$l_LAB/Constellations/."
      chown labuser1:labusers1 -R "$l_WORKING_DIRECTORY/$l_LAB/Constellations"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"

      # CREATE LAB09-02 - SET PERMISSIONS
      # Set the lab number variable LAB09-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # CREATE LAB DIRECTORY - SET PERMISSIONS
      mkdir "$l_WORKING_DIRECTORY/$l_LAB"
      chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB"
      chmod 02755 "$l_WORKING_DIRECTORY/$l_LAB"

      # Directory made here, permissions and ownership applied below.
      mkdir "$l_WORKING_DIRECTORY/$l_LAB/Physicists"

      # CREATE FILES - SOME WITH QUOTES
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/archimedes.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/bohr.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/cox.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/curie.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/einstein.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/faraday.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/feynman.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/galilei.txt"
      printf "Intelligence is the ability to adapt to change." >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/hawking.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/kaku.txt"
      printf "Falling Apple" >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/newton.txt"
      printf "Now, I have become Death, the destroyer of worlds." >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/oppenheimer.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/pascal.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/raman.txt"
      touch "$l_WORKING_DIRECTORY/$l_LAB/Physicists/tesla.txt"

      # Create script to list all .txt files without extension.
      printf '#!/bin/bash\n' >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/physicists-list"
      printf "ls -1 *.txt | sed -e 's/\.txt$//'" >> "$l_WORKING_DIRECTORY/$l_LAB/Physicists/physicists-list"

      # SET PERMISSIONS FOR FOLDERS AND FILES
      chmod 00660 -R "$l_WORKING_DIRECTORY/$l_LAB/Physicists"
      chmod 00757 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/."
      chown labuser3:labusers1 -R "$l_WORKING_DIRECTORY/$l_LAB/Physicists"

      # Einstein is editable by labuser3 then labuser2 after security change.
      chmod 00640 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/einstein.txt"

      # Newton is editable by labuser3 and labuser2
      chown labuser2:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/newton.txt"

      # Hawking is only editable by labuser2
      chmod 00600 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/hawking.txt"
      chown labuser2:labusers1 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/hawking.txt"

      # Oppenheimer is editable by labuser3 and labuser2
      chown labuser2:labusers2 "$l_WORKING_DIRECTORY/$l_LAB/Physicists/oppenheimer.txt"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH10 - SELinux and AppArmor (No Labs)
function chapter_10 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH11 - File Compression and Storage
#       Lab Validated: 08-JUN-2023
function chapter_11 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      chmod 02775 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # CREATE THE ZOO
      mkdir "$l_WORKING_DIRECTORY/Pittsburgh Zoo"

      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Aardvark"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Anteater"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Beaver"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Camel"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Donkey"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Eland"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Giraffe"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Grizzly Bear"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Kangaroo"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Lemur"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Red Panda"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Sloth"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Tiger"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Wolf"
      touch "$l_WORKING_DIRECTORY/Pittsburgh Zoo/Zebra"

      cd "$l_WORKING_DIRECTORY"
      tar -czf pghzoo.tar.gz "Pittsburgh Zoo" 2>/dev/null
      chmod 664 pghzoo.tar.gz
      rm -r "$l_WORKING_DIRECTORY/Pittsburgh Zoo/"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH12 - User and Group Management
#       Lab Validated: 08-JUN-2023
function chapter_12 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable, would normally go here, this however, is a two-part, see below.
  #l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      # Set the lab number variable LAB09-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "There is no lab to roll forward for lab: $l_LAB."

      # Set the lab number variable LAB09-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "There is no lab to roll forward for lab: $l_LAB."

      cleanup_and_exit_with_code 1
      ;;
    -g)
      # Set the lab number variable LAB12-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "There is no grading module available for lab: $l_LAB."

      # Set the lab number variable LAB12-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "There is no grading module available for lab: $l_LAB."

      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02775 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      # Set the lab number variable LAB12-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Remove Users and Groups created by students in the lab.
      test_user labuser4
      test_group finance

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"

      # CREATE LAB - SET PERMISSIONS
      # Set the lab number variable LAB12-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Remove Users and Groups created by students in the lab.
      test_user labuser5
      test_group labuser5

      # Cleanup residue left from previous labs if it exists.
      if [[ $(mount | grep "$l_WORKING_DIRECTORY/$l_LAB-Q") ]]; then
        info "  Turning off disk quota for /dev/sdb1."
        quotaoff "/Lab Files/CH12/LAB12-02-Q"
      fi

      if [[ $(mount | grep "$l_WORKING_DIRECTORY/$l_LAB-Q") ]]; then
        info "  Unmounting the quota disk /dev/sdb1"
        umount --lazy "$l_WORKING_DIRECTORY/$l_LAB-Q"
      fi

      if [ -d "$l_WORKING_DIRECTORY/$l_LAB-Q" ]; then
        info "  Removing the $l_WORKING_DIRECTORY/$l_LAB-Q directory."
        rm -r "/Lab Files/CH12/LAB12-02-Q/*"
      fi

      info "Removing any old LAB12-02-Q residue from /etc/fstab."
      sed -i -e '/# Disk\/User Quota Lab: LAB12-02-Q/d' /etc/fstab
      sed -i -e '/\/dev\/sdb1      \/labs\/CH12\/LAB12-02-Q  ext4  defaults,usrquota,grpquota 0 0/d' /etc/fstab

      #Setup Quota Disk
      wipefs /dev/sdb --all --force --quiet
      sgdisk -g /dev/sdb >> /dev/nul
      sgdisk -n 1:0:262110 -t 1:8300 /dev/sdb >> /dev/nul
      mkfs.ext4 /dev/sdb1 >> /dev/null 2>&1

      mkdir "$l_WORKING_DIRECTORY/$l_LAB-Q"
      printf "# Disk/User Quota Lab: LAB12-02-Q\n/dev/sdb1      /labs/CH12/LAB12-02-Q  ext4  defaults,usrquota,grpquota 0 0\n" >> /etc/fstab
      mount /labs/CH12/LAB12-02-Q

      info "  Setting the ownership and permissions for lab number: $l_LAB quota directory."
      chown root:labusers1 "$l_WORKING_DIRECTORY/$l_LAB-Q"
      chmod 02770 "$l_WORKING_DIRECTORY/$l_LAB-Q"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH13 - Account Security (No Labs)
function chapter_13 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH14 - Logging Services (No Labs)
function chapter_14 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH15 - Linux Devices (No Labs)
function chapter_15 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH16 - Hardware Troubleshooting
#       Lab Validated: 20-JUN-2023
function chapter_16 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02750 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH17 - Kernel Modules (No Labs)
function chapter_17 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH18 - Storage Concepts
#       Lab Validated: 20-JUN-2023
function chapter_18 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02775 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Cleanup residue left from previous labs if it exists.
      if [[ $(mount | grep "$l_WORKING_DIRECTORY/$l_LAB") ]]; then
        info "  Unmounting the disk /dev/sdc1"
        umount --lazy "$l_WORKING_DIRECTORY/$l_LAB"
      fi

      info "Removing any old LAB18-01 residue from /etc/fstab."
      sed -i -e '/# Disk Lab: LAB18-01/d' /etc/fstab
      sed -i -e '/\/dev\/sdc1/d' /etc/fstab

      # Wipe /dev/sdv
      wipefs /dev/sdc --all --force --quiet

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH19 - Storage Configuration
#       Lab Validated: 20-JUN-2023
function chapter_19 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable, would normally go here, this however, is a two-part, see below.
  #l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      # Set the lab number variable LAB09-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "There is no lab to roll forward for lab: $l_LAB."

      # Set the lab number variable LAB09-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "There is no lab to roll forward for lab: $l_LAB."

      cleanup_and_exit_with_code 1
      ;;
    -g)
      # Set the lab number variable LAB09-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "There is no grading module available for lab: $l_LAB."

      # Set the lab number variable LAB09-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "There is no grading module available for lab: $l_LAB."

      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02775 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      # Set the lab number variable LAB19-01.
      l_LAB=$(create_lab $l_CH_NUM)
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Cleanup residue left from previous labs if it exists.
      if [[ $(mount | grep /dev/mapper/vg1-CIT220) ]]; then
        info "  Unmounting the volume group /dev/mapper/vg1-CIT220"
        umount --lazy /dev/mapper/vg1-CIT220
      fi

      info "Removing any old LAB19-01 residue from /etc/fstab."
      sed -i -e '/# Volume Group Lab: LAB19-01/d' /etc/fstab
      sed -i -e '/\/dev\/mapper\/vg1-CIT220/d' /etc/fstab

      if [ -b /dev/mapper/vg1-CIT220 ]; then
        info "  Removing Volume Group."

        vgchange -a n vg1 >> /dev/null 2>&1
        lvremove --force /dev/vg1/CIT220 >> /dev/null 2>&1
        vgremove vg1 >> /dev/null 2>&1
        pvremove /dev/sdd >> /dev/null 2>&1
        pvremove /dev/sde >> /dev/null 2>&1
      fi

      info "  Resetting disks."
      wipefs /dev/sdd --all --force --quiet
      sgdisk --zap /dev/sdd >> /dev/nul

      wipefs /dev/sde --all --force --quiet
      sgdisk --zap /dev/sde >> /dev/nul

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"

      # CREATE LAB - SET PERMISSIONS
      # Set the lab number variable LAB19-02.
      l_LAB=$(create_lab $l_CH_NUM 2)
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Cleanup residue left from previous labs if it exists.
      if [ -b /dev/md0 ]; then
        if [[ $(mount | grep /dev/md0) ]]; then
          info "  Unmounting the RAID volume /dev/md0"
          umount --lazy /dev/md0
        fi

        info "Removing any old LAB19-02 residue from /etc/fstab."
        sed -i -e '/# RAID Lab: LAB19-02/d' /etc/fstab
        sed -i -e '/\/dev\/md0/d' /etc/fstab

        info "  Stopping RAID volume /dev/md0"
        mdadm --stop /dev/md0

        info "  Resetting disks."
        wipefs /dev/sdf --all --force --quiet
        sgdisk --zap /dev/sdf >> /dev/nul

        wipefs /dev/sdg --all --force --quiet
        sgdisk --zap /dev/sdg >> /dev/nul

        wipefs /dev/sdh --all --force --quiet
        sgdisk --zap /dev/sdh >> /dev/nul
      fi

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH20 - Network Configuration (No Labs)
function chapter_20 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH21 - Network Troubleshooting
#       Lab Validated: 23-JUN-2024
function chapter_21 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

      case "$l_OPER" in
      -c)
        info "Changing the lab environment for lab: $l_LAB."

        if (($g_ARG_BREAK_LAB==1 || $g_ARG_FIX_LAB==1)); then
          if (($g_ARG_BREAK_LAB==1)); then

            info "  Breaking a networking feature in lab environment."
            # SOURCE BRKFIX (BREAK/FIX) IF IT EXISTS.
            if [[ -f "$g_LAB_PATH/.brkfix" ]]; then
              source "$g_LAB_PATH/.brkfix"

              if [ -n "$g_CH21_BRKFIX" ]; then
                warning "    The network troubleshooting feature was previously run."
                warning "    For assistance, e-mail your instructor with the feature code: $g_CH21_BRKFIX."
                cleanup_and_exit_with_code 0
              fi
            fi

            if ! [ "$TERM" == "linux" ]; then
              warning "    The break/fix command should be run ONLY from the virtual machine console."
              cleanup_and_exit_with_code 0
            fi

            case $(shuf -i 1-4 -n 1) in
              1)
                # BREAK ROUTE (NEEDS WORK)
                info "    Breaking network feature 22.1."
                info "    When reaching out for help from your instructor use this number."
                printf "g_CH21_BRKFIX=22.1\n" >> "$g_LAB_PATH/.brkfix"

                route del default
                route add default gw 127.0.0.1 lo
                ;;
              2)
                # BREAK NETPLAN PRIVATE ADDRESS (WORKS)
                info "    Breaking network feature 66.3."
                info "    When reaching out for help from your instructor use this number."
                printf "g_CH21_BRKFIX=66.3\n" >> "$g_LAB_PATH/.brkfix"

                mv /etc/netplan/00-installer-config{.yaml,.brkfix}

                printf "network:\n" >> /etc/netplan/00-installer-config.yaml
                printf "  ethernets:\n" >> /etc/netplan/00-installer-config.yaml
                printf "    ens160:\n" >> /etc/netplan/00-installer-config.yaml
                printf "      addresses:\n" >> /etc/netplan/00-installer-config.yaml
                printf "      - 10.0.2.3/24\n" >> /etc/netplan/00-installer-config.yaml
                printf "      routes:\n" >> /etc/netplan/00-installer-config.yaml
                printf "      - to: default\n" >> /etc/netplan/00-installer-config.yaml
                printf "        via: 10.0.2.1\n" >> /etc/netplan/00-installer-config.yaml
                printf "      nameservers:\n" >> /etc/netplan/00-installer-config.yaml
                printf "        addresses:\n" >> /etc/netplan/00-installer-config.yaml
                printf "        - 10.0.2.6\n" >> /etc/netplan/00-installer-config.yaml
                printf "        search:\n" >> /etc/netplan/00-installer-config.yaml
                printf "        - ccac.org\n" >> /etc/netplan/00-installer-config.yaml
                printf "  version: 2\n" >> /etc/netplan/00-installer-config.yaml

                chmod 600 /etc/netplan/00-installer-config.yaml

                dhclient -r &>/dev/null
                netplan apply
                ;;
              3)
                # BREAK NETPLAN INTERFACE NAME (WORKS)
                info "    Breaking network feature 106.5."
                info "    When reaching out for help from your instructor use this number."
                printf "g_CH21_BRKFIX=106.5\n" >> "$g_LAB_PATH/.brkfix"

                mv /etc/netplan/00-installer-config{.yaml,.brkfix}

                printf "network:\n" >> /etc/netplan/00-installer-config.yaml
                printf "  ethernets:\n" >> /etc/netplan/00-installer-config.yaml
                printf "    eth0:\n" >> /etc/netplan/00-installer-config.yaml
                printf "      dhcp4: yes\n" >> /etc/netplan/00-installer-config.yaml
                printf "      dhcp-identifier: mac\n" >> /etc/netplan/00-installer-config.yaml
                printf "  version: 2\n" >> /etc/netplan/00-installer-config.yaml

                chmod 600 /etc/netplan/00-installer-config.yaml
                dhclient -r &>/dev/null
                netplan apply
                ;;
              4)
                # BREAK DNS (WORKS)
                info "    Breaking network feature 77.4."
                info "    When reaching out for help from your instructor use this number."
                printf "g_CH21_BRKFIX=77.4\n" >> "$g_LAB_PATH/.brkfix"

                sed -i 's/nameserver 127.0.0.53/nameserver 10.0.5.53/' /etc/resolv.conf
                ;;
            esac
          fi

          if (($g_ARG_FIX_LAB==1)); then
            info "  Fixing networking in lab enviornment."

            if [[ -f "$g_LAB_PATH/.brkfix" ]]; then
              info "    Removing break/fix information file."
              rm "$g_LAB_PATH/.brkfix"
            fi

            ## IF EXIST BACKUP NETPLAN FILE, REVERT AND APPLY
            if [[ -f "/etc/netplan/00-installer-config.brkfix" ]]; then
              info "    Reverting interface configurations."
              rm /etc/netplan/00-installer-config.yaml
              mv /etc/netplan/00-installer-config{.brkfix,.yaml}

              netplan apply
            fi

            # IF CHANGES WERE MADE TO THE RESOLVER, REVERT THEM
            if [ "$(cat /etc/resolv.conf | grep -o "nameserver 10.0.5.53")" != "nameserver 10.0.5.53" ]; then
              info "    Repairing modifications to nameservers."
              sed -i 's/nameserver 10.0.5.53/nameserver 127.0.0.53/' /etc/resolv.conf
            fi

            # RELEASE AND RENEW THE IP ADDRESS
            info "    Releasing and renewing IP address from DHCP server."
            dhclient -r &>/dev/null
            dhclient

            # CHECK FOR CHANGES TO THE DEFAULT GATEWAY AND REPAIR THEM
            ping -q -c1 8.8.8.8 &>/dev/null
            if [ $? == 1 ]; then
              info "    Repairing default routes."
              route del default
              route add default gw 10.250.5.1 ens160
            fi

            info "  The networking in the lab environment has been repaired."
            info "  Your IP address is: $(hostname -I | awk '{print $1}')."
          fi
        fi
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH22 - Linux Firewalls
#       Lab Validated: 20-JUN-2023
function chapter_22 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02770 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Reset iptables to default.
      iptables -F

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH23 - Orchestration (No Labs)
function chapter_23 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH24 - Automate Tasks
#       Lab Validated: 20-JUN-2023
function chapter_24 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02770 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Create a script to display a message.
      printf '#!/bin/sh' >> "$l_WORKING_DIRECTORY/lab2401.sh"
      printf "\nwall \"It's time to stop working on these labs.\"\n" >> "$l_WORKING_DIRECTORY/lab2401.sh"
      chown labuser1:labusers1 "$l_WORKING_DIRECTORY/lab2401.sh"
      chmod 770 "$l_WORKING_DIRECTORY/lab2401.sh"

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH25 - Localization
#       Lab Validated: 20-JUN-2023
function chapter_25 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02770 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # Reset LOCALE
      ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime 

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH26 - Bash Scripting Essentials
#       Lab Validated: 20-JUN-2023
function chapter_26 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02770 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH27 - Git
#       Lab Validated: 20-JUN-2023
function chapter_27 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      info "  Creating the chapter: $l_CH_NUM directory."
      l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      chmod 02770 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      #SETUP GIT - CLONE lsRules
      cd "$l_WORKING_DIRECTORY"
      git clone https://github.com/DoctorKisow/lsRules.git &>/dev/null

      # WRITE CHAPTER/LAB README
      lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH28 - Server Roles (No Labs)
function chapter_28 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

#CH29 - Security Best Practice (No Labs)
function chapter_29 ()
{
  local l_OPER="$1"
  local l_CH_NUM="$2"
  local l_WORKING_DIRECTORY=""
  local l_LAB=""

  # Verify the function was passed the correct operation.
  if ! [[ $l_OPER =~ ^(-c|-g|-i|-r)$ ]]; then
    error "Function was passed an expression that was out of range."
  fi

  # Set the lab number variable.
  l_LAB=$(create_lab $l_CH_NUM)

  case "$l_OPER" in
    -c)
      info "There is no lab to roll forward for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -g)
      info "There is no grading module available for lab: $l_LAB."
      cleanup_and_exit_with_code 1
      ;;
    -i)
      info "Setting up the labs for chapter: $l_CH_NUM."

      info "  There are no labs available for this chapter."
      #info "  Setting up the labs for chapter: $l_CH_NUM."

      # SET SECURITY
      #info "  Creating the chapter: $l_CH_NUM directory."
      #l_WORKING_DIRECTORY=$(create_directory $l_CH_NUM)

      #info "  Setting ownership and permissions for the chapter: $l_CH_NUM directory."
      #chown root:labusers1 "$l_WORKING_DIRECTORY"
      #chmod 02754 "$l_WORKING_DIRECTORY"

      # CREATE LAB - SET PERMISSIONS
      #info "  Setting up lab number: $l_LAB, for chapter: $l_CH_NUM."

      # ...

      # WRITE CHAPTER/LAB README
      #lab_readme "$l_WORKING_DIRECTORY" "$l_LAB"
      ;;
    -r)
      info "Resetting Lab: $l_CH_NUM."
      backup_lab $l_CH_NUM
      chapter_$l_CH_NUM -i $l_CH_NUM
      info "Lab $l_CH_NUM reset complete."
      ;;
  esac
}

# *************************** begin of script proper ***************************
process_command_line_options "${@}"
internal_consistency_option_checks

# Only clear screen and present script banner when gAFI is zero.
if ! ((g_ARG_FINISH_INSTALL==1)); then
  clear
  script_banner
fi

# CHANGE LAB
if ((g_ARG_CHANGE_LAB==1)); then
  # ROOT FUNCTION, ARE WE ROOT?
  if [ $EUID -ne 0 ]; then
    warning "This option can only be run using administrative permissions."
    cleanup_and_exit_with_code 1
  else
    chapter_$g_ARG_CHANGE -c $g_ARG_CHANGE
  fi
fi

# GRADE LAB
if ((g_ARG_GRADE_LAB==1)); then
  lab_profile

  info "Grading lab: $g_ARG_GRADE..."
  chapter_$g_ARG_GRADE -g $g_ARG_GRADE
fi

# INSTALL LAB ENVIRONMENT
if ((g_ARG_INSTALL==1)); then
  # ROOT FUNCTION, ARE WE ROOT?
  if [ $EUID -ne 0 ]; then
    warning "This option can only be run using administrative permissions."
    cleanup_and_exit_with_code 1
  else
    install
  fi
fi

# RESET LAB USER ACCOUNT
if ((g_ARG_LABUSER_RESET==1)); then
  # ROOT FUNCTION, ARE WE ROOT?
  if [ $EUID -ne 0 ]; then
    warning "This option can only be run using administrative permissions."
    cleanup_and_exit_with_code 1
  else
    reset_labuser $g_ARG_LABUSER
  fi
fi

# SET STUDENT PROFILE
if ((g_ARG_PROFILE==1)); then
  info "The interactive configuration file option was selected."

  if [ -f "${g_SCRIPT_PATH}/${g_LAB_PROFILE}" ]; then
    interactive_lab_profile
  else
    warning "  The configuration file doesn't exist!"
    cleanup_and_exit_with_code 0
  fi
fi

# ROLLBACK LAB
if ((g_ARG_ROLLBACK_LAB==1)); then
  chapter_$g_ARG_ROLLBACK -r $g_ARG_ROLLBACK
fi

# UPDATE SCRIPT
if ((g_ARG_UPDATE==1)); then
  # ROOT FUNCTION, ARE WE ROOT?
  if [ $EUID -ne 0 ]; then
    warning "This option can only be run using administrative permissions."
    cleanup_and_exit_with_code 1
  else
    update
  fi
fi

# UNINSTALL LAB ENVIORNMENT
if ((g_ARG_UNINSTALL==1)); then
  # ROOT FUNCTION, ARE WE ROOT?
  if [ $EUID -ne 0 ]; then
    warning "This option can only be run using administrative permissions."
    cleanup_and_exit_with_code 1
  else
    uninstall
  fi
fi

cleanup_and_exit_with_code 0
# **************************** end of script proper ****************************